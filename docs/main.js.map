{"version":3,"sources":["webpack://sapientia-ts/./node_modules/rot-js/lib/rng.js","webpack://sapientia-ts/./node_modules/rot-js/lib/display/backend.js","webpack://sapientia-ts/./node_modules/rot-js/lib/display/canvas.js","webpack://sapientia-ts/./node_modules/rot-js/lib/display/hex.js","webpack://sapientia-ts/./node_modules/rot-js/lib/util.js","webpack://sapientia-ts/./node_modules/rot-js/lib/display/rect.js","webpack://sapientia-ts/./node_modules/rot-js/lib/display/tile.js","webpack://sapientia-ts/./node_modules/rot-js/lib/color.js","webpack://sapientia-ts/./node_modules/rot-js/lib/display/tile-gl.js","webpack://sapientia-ts/./node_modules/rot-js/lib/display/term.js","webpack://sapientia-ts/./node_modules/rot-js/lib/text.js","webpack://sapientia-ts/./node_modules/rot-js/lib/constants.js","webpack://sapientia-ts/./node_modules/rot-js/lib/display/display.js","webpack://sapientia-ts/./node_modules/rot-js/lib/MinHeap.js","webpack://sapientia-ts/./node_modules/rot-js/lib/eventqueue.js","webpack://sapientia-ts/./node_modules/rot-js/lib/scheduler/scheduler.js","webpack://sapientia-ts/./node_modules/rot-js/lib/scheduler/index.js","webpack://sapientia-ts/./node_modules/rot-js/lib/scheduler/simple.js","webpack://sapientia-ts/./node_modules/rot-js/lib/fov/fov.js","webpack://sapientia-ts/./node_modules/rot-js/lib/fov/recursive-shadowcasting.js","webpack://sapientia-ts/./node_modules/rot-js/lib/fov/index.js","webpack://sapientia-ts/./node_modules/rot-js/lib/fov/precise-shadowcasting.js","webpack://sapientia-ts/./node_modules/rot-js/lib/noise/simplex.js","webpack://sapientia-ts/./node_modules/rot-js/lib/path/path.js","webpack://sapientia-ts/./node_modules/rot-js/lib/path/index.js","webpack://sapientia-ts/./node_modules/rot-js/lib/path/dijkstra.js","webpack://sapientia-ts/./src/ui/colors.ts","webpack://sapientia-ts/./src/game/terrain.ts","webpack://sapientia-ts/./src/util.ts","webpack://sapientia-ts/./src/game/map.ts","webpack://sapientia-ts/./src/layout.ts","webpack://sapientia-ts/./src/loaders/map_loader.ts","webpack://sapientia-ts/./src/game/actions.ts","webpack://sapientia-ts/./src/components/ai.ts","webpack://sapientia-ts/./src/game/entities.ts","webpack://sapientia-ts/./src/components/equipment.ts","webpack://sapientia-ts/./src/game/entity_factory.ts","webpack://sapientia-ts/./src/components/stats.ts","webpack://sapientia-ts/./src/components/inventory.ts","webpack://sapientia-ts/./src/game/ingredients.ts","webpack://sapientia-ts/./src/game/world.ts","webpack://sapientia-ts/./src/game/messageLog.ts","webpack://sapientia-ts/./src/ui/input_handlers.ts","webpack://sapientia-ts/./src/ui/views.ts","webpack://sapientia-ts/./src/game/engine.ts","webpack://sapientia-ts/./src/index.ts"],"names":["FRAC","this","_seed","_s0","_s1","_s2","_c","seed","t","lowerBound","upperBound","max","Math","min","floor","getUniform","mean","stddev","u","v","r","sqrt","log","array","length","result","clone","slice","index","indexOf","getItem","push","splice","data","total","id","random","part","state","setState","getState","setSeed","Date","now","Backend","options","_options","Canvas","super","_ctx","document","createElement","getContext","cb","requestAnimationFrame","canvas","opts","setOptions","font","fontStyle","fontSize","fontFamily","_updateSize","textAlign","textBaseline","fillStyle","bg","fillRect","width","height","x","y","rect","getBoundingClientRect","left","top","_normalizedEventToPosition","Hex","_spacingX","_spacingY","_hexSize","clearBefore","ch","fg","px","transpose","reverse","_fill","chars","concat","i","fillText","ceil","availWidth","availHeight","hexSizeWidth","hexSizeHeight","hexSize","oldFont","measureText","ratio","spacing","nodeSize","size","n","mod","cx","cy","a","b","border","ctx","beginPath","moveTo","lineTo","fill","charWidth","xprop","yprop","Rect","_canvasCache","cache","_drawWithCache","_drawNoCache","hash","drawImage","boxWidth","boxHeight","widthFraction","forceSquareRatio","Tile","_colorCanvas","tileWidth","tileHeight","tileColorize","clearRect","fgs","bgs","tile","tileMap","Error","context","globalCompositeOperation","tileSet","fromString","str","cached","CACHE","charAt","values","match","map","parseInt","split","TileGL","_uniforms","_gl","_initWebGL","e","alert","message","preserveDrawingBuffer","complete","addEventListener","_updateTexture","gl","scissorY","scissor","clearColor","parseColor","clear","COLOR_BUFFER_BIT","uniform2fv","uniform1f","uniform4fv","drawArrays","TRIANGLE_STRIP","window","program","vss","fss","vs","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","fs","FRAGMENT_SHADER","p","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","VS","FS","useProgram","pos","Float32Array","buf","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","createQuad","UNIFORMS","forEach","name","getUniformLocation","_program","enable","BLEND","blendFuncSeparate","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","ONE","SCISSOR_TEST","canvasSize","viewport","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","REPEAT","TEXTURE_WRAP_T","pixelStorei","UNPACK_FLIP_Y_WEBGL","texImage2D","RGBA","UNSIGNED_BYTE","trim","colorCache","color","parsed","Number","$","termcolor","COLOR_RATIO","rgb","Term","_offset","_cursor","_lastColor","setTimeout","avail","computeSize","val","process","stdout","write","dx","dy","positionToAnsi","newColor","colorToAnsi","columns","rows","RE_COLORS","breakInsideToken","tokens","tokenIndex","breakIndex","removeBreakChar","newTextToken","type","value","substring","DIRS","4","8","6","BACKENDS","DEFAULT_OPTIONS","layout","Display","_data","_dirty","Object","assign","DEBUG","bind","_tick","_backend","schedule","what","colors","draw","ctor","getContainer","computeFontSize","touches","clientX","clientY","eventToPosition","key","text","maxWidth","lines","offset","replace","Infinity","lineLength","lastTokenWithSpace","token","arr","pop","join","nextIndex","lastIndexOf","lastTextToken","breakLines","shift","isSpace","isPrevSpace","isFullWidth","isPrevFullWidth","cc","charCodeAt","c","cch","_draw","MinHeap","heap","timestamp","loc","len","updateUp","updateDown","last","numbers","validnumbers","filter","existNode","minimal","lessThan","parent","parentNode","swap","leftChild","leftChildNode","rightChild","rightChildNode","m","minNode","console","EventQueue","_time","_events","event","time","find","remove","Scheduler","_queue","_repeat","_current","getTime","item","repeat","getEventTime","get","add","next","FOV","lightPassesCallback","_lightPasses","topology","dirs","countFactor","startOffset","j","R","callback","blocks","A1","A2","visibility","SHADOWS","neighbors","_getCircle","neighborCount","_checkVisibility","index1","edge1","old","diff","index2","edge2","visibleLength","visible","P","P1","P2","Path","toX","toY","passableCallback","_toX","_toY","_passableCallback","_dirs","dir","_computed","_todo","_add","fromX","fromY","_compute","prev","_getNeighbors","neighbor","obj","black","wallDark","wallLight","TerrainAspect","char","fgColor","bgColor","Terrain","walkable","transparent","darkTile","lightTile","UnexploredTile","BlockingQueue","_resolvers","_promises","Promise","resolve","Dictionary","getRandomInt","label","tiles","entities","Set","explored","Actor","Site","isBlocking","entity","getBlockingEntityAt","place","terrainDefs","DataType","MapSection","gameMaps","loadData","filename","dataType","parseFunction","TerrainDef","parseTerrainDef","Map","parseMaps","fetch","then","res","terrains","line","startsWith","toLowerCase","darkChar","darkFgColor","darkBgColor","lightChar","lightFgColor","lightBgColor","newTerrain","currSection","metadata","sites","terrainCodes","makeMap","sectionName","Metadata","TerrainCodes","TileList","ItemList","SiteList","includes","tCode","tName","tileRow","rowOk","xPos","yPos","darkColor","mapName","site","mandatoryMetadata","mm","mapLabel","w","h","orig","startingPos","engine","actor","WaitAction","messageLog","addMessage","success","PickupAction","actorX","actorY","inventory","items","capacity","reason","delete","DirectionAction","getActorAt","destXY","getSiteAt","BumpAction","targetActor","MeleeAction","perform","targetSite","EnterMapAction","MovementAction","target","msgClass","damage","stats","att","def","attackDesc","player","hp","destX","destY","inBounds","move","ExitMapAction","world","pushMap","mapStack","popMap","currMap","ItemAction","game","targetXY","DropAction","has","drop","UseAction","consumable","use","EquipAction","equippable","equipment","toggle","CombineAction","item1","item2","combinable","combine","AI","walkables","outputPath","compute","EnemyAI","path","distance","abs","getPathTo","PlayerAI","playerActionQueue","dequeue","RenderOrder","EquipmentType","ActorType","ItemType","Entity","renderOrder","Item","ai","chooseAction","constructor","actionResult","gameView","renderMessages","Stats","baseDef","baseAtt","maxHp","_hp","newVal","die","bonusDef","bonusAtt","amount","newHpValue","amountRecovered","deathMessage","deathMessageClass","Corpse","Equipment","weapon","armor","Weapon","Armor","bonus","k","itemName","newItem","equipType","unequip","equipMessage","currentItem","unequipMessage","equipmentType","equip","GameWorld","newMap","placeRandom","expected","actual","currPos","Message","cssClass","plainText","count","MessageLog","messages","stack","InputHandler","eventListener","handleEvent","GameInputHandler","newAction","keyCode","code","compositeCommand","MOVE_KEYS","moveMulti","getModifierState","tileSelection","renderMap","CONFIRM_KEYS","renderMapInfo","getEntitiesAt","WAIT_KEYS","itemMap","inventoryView","render","inventoryInputHandler","InventoryInputHandler","setInputHandler","getElementById","style","display","enqueue","selectedItemKey","backToGame","secondItem","selectedItem","setSelectedRow","querySelectorAll","row","querySelector","textContent","classList","renderStats","set","GameView","appendChild","highlightedTile","entityTiles","entities2tiles","currTile","xOffset","yOffset","newDiv","container","innerHTML","itemText","firstItem","createTextNode","fullText","InventoryView","currLetter","currAscii","commandStr","nameStr","isEquipped","String","fromCharCode","Engine","actors","scheduler","fov","transparency","setMouseHandler","actorType","inventorySize","Player","Orc","Troll","makeActor","addActor","setFov","currActor","act","resetVisible","newInputHandler","currEventListener","body","removeEventListener","mouseEventListener","bRect","xPixels","yPixels","xTiles","yTiles","documentElement","xRes","screen","devicePixelRatio","yRes","isResolutionKO","mapFiles","promises","f","all","loadAllData","processTurn"],"mappings":"mBAIA,MAAMA,EAAO,uBACb,MAAM,EACF,cACIC,KAAKC,MAAQ,EACbD,KAAKE,IAAM,EACXF,KAAKG,IAAM,EACXH,KAAKI,IAAM,EACXJ,KAAKK,GAAK,EAEd,UAAY,OAAOL,KAAKC,MAIxB,QAAQK,GASJ,OARAA,EAAQA,EAAO,EAAI,EAAIA,EAAOA,EAC9BN,KAAKC,MAAQK,EACbN,KAAKE,KAAOI,IAAS,GAAKP,EAC1BO,EAAe,MAAPA,EAAe,IAAO,EAC9BN,KAAKG,IAAMG,EAAOP,EAClBO,EAAe,MAAPA,EAAe,IAAO,EAC9BN,KAAKI,IAAME,EAAOP,EAClBC,KAAKK,GAAK,EACHL,KAKX,aACI,IAAIO,EAAI,QAAUP,KAAKE,IAAMF,KAAKK,GAAKN,EAKvC,OAJAC,KAAKE,IAAMF,KAAKG,IAChBH,KAAKG,IAAMH,KAAKI,IAChBJ,KAAKK,GAAS,EAAJE,EACVP,KAAKI,IAAMG,EAAIP,KAAKK,GACbL,KAAKI,IAOhB,cAAcI,EAAYC,GACtB,IAAIC,EAAMC,KAAKD,IAAIF,EAAYC,GAC3BG,EAAMD,KAAKC,IAAIJ,EAAYC,GAC/B,OAAOE,KAAKE,MAAMb,KAAKc,cAAgBJ,EAAME,EAAM,IAAMA,EAO7D,UAAUG,EAAO,EAAGC,EAAS,GACzB,IAAIC,EAAGC,EAAGC,EACV,GACIF,EAAI,EAAIjB,KAAKc,aAAe,EAC5BI,EAAI,EAAIlB,KAAKc,aAAe,EAC5BK,EAAIF,EAAIA,EAAIC,EAAIA,QACXC,EAAI,GAAU,GAALA,GAElB,OAAOJ,EADKE,EAAIN,KAAKS,MAAM,EAAIT,KAAKU,IAAIF,GAAKA,GACvBH,EAK1B,gBACI,OAAO,EAAIL,KAAKE,MAA0B,IAApBb,KAAKc,cAK/B,QAAQQ,GACJ,OAAKA,EAAMC,OAGJD,EAAMX,KAAKE,MAAMb,KAAKc,aAAeQ,EAAMC,SAFvC,KAOf,QAAQD,GACJ,IAAIE,EAAS,GACTC,EAAQH,EAAMI,QAClB,KAAOD,EAAMF,QAAQ,CACjB,IAAII,EAAQF,EAAMG,QAAQ5B,KAAK6B,QAAQJ,IACvCD,EAAOM,KAAKL,EAAMM,OAAOJ,EAAO,GAAG,IAEvC,OAAOH,EAMX,iBAAiBQ,GACb,IAAIC,EAAQ,EACZ,IAAK,IAAIC,KAAMF,EACXC,GAASD,EAAKE,GAElB,IACIA,EADAC,EAASnC,KAAKc,aAAemB,EACzBG,EAAO,EACf,IAAKF,KAAMF,EAEP,GADAI,GAAQJ,EAAKE,GACTC,EAASC,EACT,OAAOF,EAKf,OAAOA,EAMX,WAAa,MAAO,CAAClC,KAAKE,IAAKF,KAAKG,IAAKH,KAAKI,IAAKJ,KAAKK,IAIxD,SAASgC,GAKL,OAJArC,KAAKE,IAAMmC,EAAM,GACjBrC,KAAKG,IAAMkC,EAAM,GACjBrC,KAAKI,IAAMiC,EAAM,GACjBrC,KAAKK,GAAKgC,EAAM,GACTrC,KAKX,QAEI,OADY,IAAI,GACHsC,SAAStC,KAAKuC,cAGpB,IAAI,GAAMC,QAAQC,KAAKC,OCnIvB,MAAMC,EACjB,eAAiB,OAAO,KACxB,WAAWC,GAAW5C,KAAK6C,SAAWD,GCL3B,MAAME,UAAeH,EAChC,cACII,QACA/C,KAAKgD,KAAOC,SAASC,cAAc,UAAUC,WAAW,MAE5D,SAASC,GAAMC,sBAAsBD,GACrC,eAAiB,OAAOpD,KAAKgD,KAAKM,OAClC,WAAWC,GACPR,MAAMS,WAAWD,GACjB,MACME,EAAO,GADEF,EAAKG,UAAY,GAAGH,EAAKG,aAAe,MAC9BH,EAAKI,cAAcJ,EAAKK,aACjD5D,KAAKgD,KAAKS,KAAOA,EACjBzD,KAAK6D,cACL7D,KAAKgD,KAAKS,KAAOA,EACjBzD,KAAKgD,KAAKc,UAAY,SACtB9D,KAAKgD,KAAKe,aAAe,SAE7B,QACI/D,KAAKgD,KAAKgB,UAAYhE,KAAK6C,SAASoB,GACpCjE,KAAKgD,KAAKkB,SAAS,EAAG,EAAGlE,KAAKgD,KAAKM,OAAOa,MAAOnE,KAAKgD,KAAKM,OAAOc,QAEtE,gBAAgBC,EAAGC,GACf,IAAIhB,EAAStD,KAAKgD,KAAKM,OACnBiB,EAAOjB,EAAOkB,wBAKlB,OAJAH,GAAKE,EAAKE,KACVH,GAAKC,EAAKG,IACVL,GAAKf,EAAOa,MAAQI,EAAKJ,MACzBG,GAAKhB,EAAOc,OAASG,EAAKH,OACtBC,EAAI,GAAKC,EAAI,GAAKD,GAAKf,EAAOa,OAASG,GAAKhB,EAAOc,OAC5C,EAAE,GAAI,GAEVpE,KAAK2E,2BAA2BN,EAAGC,IC1BnC,MAAMM,UAAY9B,EAC7B,cACIC,QACA/C,KAAK6E,UAAY,EACjB7E,KAAK8E,UAAY,EACjB9E,KAAK+E,SAAW,EAEpB,KAAK/C,EAAMgD,GACP,IAAKX,EAAGC,EAAGW,EAAIC,EAAIjB,GAAMjC,EACrBmD,EAAK,EACJd,EAAI,GAAKrE,KAAK6E,UACfP,EAAItE,KAAK8E,UAAY9E,KAAK+E,UAS9B,GAPI/E,KAAK6C,SAASuC,WACdD,EAAGE,UAEHL,IACAhF,KAAKgD,KAAKgB,UAAYC,EACtBjE,KAAKsF,MAAMH,EAAG,GAAIA,EAAG,MAEpBF,EACD,OAEJjF,KAAKgD,KAAKgB,UAAYkB,EACtB,IAAIK,EAAQ,GAAGC,OAAOP,GACtB,IAAK,IAAIQ,EAAI,EAAGA,EAAIF,EAAMhE,OAAQkE,IAC9BzF,KAAKgD,KAAK0C,SAASH,EAAME,GAAIN,EAAG,GAAIxE,KAAKgF,KAAKR,EAAG,KAGzD,YAAYS,EAAYC,GAQpB,OAPI7F,KAAK6C,SAASuC,YACdQ,GAAcC,EAEdD,GADAC,EAAcD,EAAaC,GAKxB,CAFKlF,KAAKE,MAAM+E,EAAa5F,KAAK6E,WAAa,EACzClE,KAAKE,OAAOgF,EAAc,EAAI7F,KAAK+E,UAAY/E,KAAK8E,UAAY,IAGjF,gBAAgBc,EAAYC,GACpB7F,KAAK6C,SAASuC,YACdQ,GAAcC,EAEdD,GADAC,EAAcD,EAAaC,GAG/B,IAAIC,EAAe,EAAIF,IAAe5F,KAAK6C,SAASsB,MAAQ,GAAKxD,KAAKS,KAAK,IAAM,EAC7E2E,EAAgBF,GAAe,EAAI,KAAO7F,KAAK6C,SAASuB,OAAS,IACjE4B,EAAUrF,KAAKC,IAAIkF,EAAcC,GAEjCE,EAAUjG,KAAKgD,KAAKS,KACxBzD,KAAKgD,KAAKS,KAAO,SAAWzD,KAAK6C,SAASe,WAC1C,IAAIO,EAAQxD,KAAKgF,KAAK3F,KAAKgD,KAAKkD,YAAY,KAAK/B,OACjDnE,KAAKgD,KAAKS,KAAOwC,EACjB,IAAIE,EAAQhC,EAAQ,IACpB6B,EAAUrF,KAAKE,MAAMmF,GAAW,EAEhC,IAAIrC,EAAW,EAAIqC,GAAWhG,KAAK6C,SAASuD,SAAW,EAAID,EAAQxF,KAAKS,KAAK,KAE7E,OAAOT,KAAKgF,KAAKhC,GAAY,EAEjC,2BAA2BU,EAAGC,GAC1B,IAAI+B,EACArG,KAAK6C,SAASuC,WACdf,GAAKC,EAELD,GADAC,EAAID,EAAIC,EAER+B,EAAWrG,KAAKgD,KAAKM,OAAOa,OAG5BkC,EAAWrG,KAAKgD,KAAKM,OAAOc,OAEhC,IAAIkC,EAAOD,EAAWrG,KAAK6C,SAASuB,OASpC,OChFD,SAAaC,EAAGkC,GACnB,OAAQlC,EAAIkC,EAAIA,GAAKA,EDwEbC,CADJlC,EAAI3D,KAAKE,MAAMyD,EAAIgC,GACR,IACPjC,GAAKrE,KAAK6E,UACVR,EAAI,EAAI,EAAI1D,KAAKE,MAAMwD,GAAK,EAAIrE,KAAK6E,aAGrCR,EAAI,EAAI1D,KAAKE,MAAMwD,GAAK,EAAIrE,KAAK6E,YAE9B,CAACR,EAAGC,GAKf,MAAMmC,EAAIC,GACN,IAAIC,EAAI3G,KAAK+E,SACT6B,EAAI5G,KAAK6C,SAASgE,OACtB,MAAMC,EAAM9G,KAAKgD,KACjB8D,EAAIC,YACA/G,KAAK6C,SAASuC,WACd0B,EAAIE,OAAOP,EAAKE,EAAIC,EAAGF,GACvBI,EAAIG,OAAOR,EAAKE,EAAI,EAAIC,EAAGF,EAAK1G,KAAK6E,UAAY+B,GACjDE,EAAIG,OAAOR,EAAKE,EAAI,EAAIC,EAAGF,EAAK1G,KAAK6E,UAAY+B,GACjDE,EAAIG,OAAOR,EAAKE,EAAIC,EAAGF,GACvBI,EAAIG,OAAOR,EAAKE,EAAI,EAAIC,EAAGF,EAAK1G,KAAK6E,UAAY+B,GACjDE,EAAIG,OAAOR,EAAKE,EAAI,EAAIC,EAAGF,EAAK1G,KAAK6E,UAAY+B,GACjDE,EAAIG,OAAOR,EAAKE,EAAIC,EAAGF,KAGvBI,EAAIE,OAAOP,EAAIC,EAAKC,EAAIC,GACxBE,EAAIG,OAAOR,EAAKzG,KAAK6E,UAAY+B,EAAGF,EAAKC,EAAI,EAAIC,GACjDE,EAAIG,OAAOR,EAAKzG,KAAK6E,UAAY+B,EAAGF,EAAKC,EAAI,EAAIC,GACjDE,EAAIG,OAAOR,EAAIC,EAAKC,EAAIC,GACxBE,EAAIG,OAAOR,EAAKzG,KAAK6E,UAAY+B,EAAGF,EAAKC,EAAI,EAAIC,GACjDE,EAAIG,OAAOR,EAAKzG,KAAK6E,UAAY+B,EAAGF,EAAKC,EAAI,EAAIC,GACjDE,EAAIG,OAAOR,EAAIC,EAAKC,EAAIC,IAE5BE,EAAII,OAER,cACI,MAAM3D,EAAOvD,KAAK6C,SACZsE,EAAYxG,KAAKgF,KAAK3F,KAAKgD,KAAKkD,YAAY,KAAK/B,OAIvD,IAAIiD,EACAC,EAJJrH,KAAK+E,SAAWpE,KAAKE,MAAM0C,EAAK6C,SAAW7C,EAAKI,SAAWwD,EAAYxG,KAAKS,KAAK,IAAM,GACvFpB,KAAK6E,UAAY7E,KAAK+E,SAAWpE,KAAKS,KAAK,GAAK,EAChDpB,KAAK8E,UAA4B,IAAhB9E,KAAK+E,SAGlBxB,EAAK6B,WACLgC,EAAQ,SACRC,EAAQ,UAGRD,EAAQ,QACRC,EAAQ,UAEZrH,KAAKgD,KAAKM,OAAO8D,GAASzG,KAAKgF,MAAMpC,EAAKY,MAAQ,GAAKnE,KAAK6E,WAC5D7E,KAAKgD,KAAKM,OAAO+D,GAAS1G,KAAKgF,MAAMpC,EAAKa,OAAS,GAAKpE,KAAK8E,UAAY,EAAI9E,KAAK+E,WEzB1F,QAvGyB,MACrB,MAAMuC,UAAaxE,EACf,cACIC,QACA/C,KAAK6E,UAAY,EACjB7E,KAAK8E,UAAY,EACjB9E,KAAKuH,aAAe,GAExB,WAAW3E,GACPG,MAAMS,WAAWZ,GACjB5C,KAAKuH,aAAe,GAExB,KAAKvF,EAAMgD,GACHsC,EAAKE,MACLxH,KAAKyH,eAAezF,GAGpBhC,KAAK0H,aAAa1F,EAAMgD,GAGhC,eAAehD,GACX,IAEIsB,GAFCe,EAAGC,EAAGW,EAAIC,EAAIjB,GAAMjC,EACrB2F,EAAO,GAAK1C,EAAKC,EAAKjB,EAE1B,GAAI0D,KAAQ3H,KAAKuH,aACbjE,EAAStD,KAAKuH,aAAaI,OAE1B,CACD,IAAIf,EAAI5G,KAAK6C,SAASgE,OACtBvD,EAASL,SAASC,cAAc,UAChC,IAAI4D,EAAMxD,EAAOH,WAAW,MAK5B,GAJAG,EAAOa,MAAQnE,KAAK6E,UACpBvB,EAAOc,OAASpE,KAAK8E,UACrBgC,EAAI9C,UAAYC,EAChB6C,EAAI5C,SAAS0C,EAAGA,EAAGtD,EAAOa,MAAQyC,EAAGtD,EAAOc,OAASwC,GACjD3B,EAAI,CACJ6B,EAAI9C,UAAYkB,EAChB4B,EAAIrD,KAAOzD,KAAKgD,KAAKS,KACrBqD,EAAIhD,UAAY,SAChBgD,EAAI/C,aAAe,SACnB,IAAIwB,EAAQ,GAAGC,OAAOP,GACtB,IAAK,IAAIQ,EAAI,EAAGA,EAAIF,EAAMhE,OAAQkE,IAC9BqB,EAAIpB,SAASH,EAAME,GAAIzF,KAAK6E,UAAY,EAAGlE,KAAKgF,KAAK3F,KAAK8E,UAAY,IAG9E9E,KAAKuH,aAAaI,GAAQrE,EAE9BtD,KAAKgD,KAAK4E,UAAUtE,EAAQe,EAAIrE,KAAK6E,UAAWP,EAAItE,KAAK8E,WAE7D,aAAa9C,EAAMgD,GACf,IAAKX,EAAGC,EAAGW,EAAIC,EAAIjB,GAAMjC,EACzB,GAAIgD,EAAa,CACb,IAAI4B,EAAI5G,KAAK6C,SAASgE,OACtB7G,KAAKgD,KAAKgB,UAAYC,EACtBjE,KAAKgD,KAAKkB,SAASG,EAAIrE,KAAK6E,UAAY+B,EAAGtC,EAAItE,KAAK8E,UAAY8B,EAAG5G,KAAK6E,UAAY+B,EAAG5G,KAAK8E,UAAY8B,GAE5G,IAAK3B,EACD,OAEJjF,KAAKgD,KAAKgB,UAAYkB,EACtB,IAAIK,EAAQ,GAAGC,OAAOP,GACtB,IAAK,IAAIQ,EAAI,EAAGA,EAAIF,EAAMhE,OAAQkE,IAC9BzF,KAAKgD,KAAK0C,SAASH,EAAME,IAAKpB,EAAI,IAAOrE,KAAK6E,UAAWlE,KAAKgF,MAAMrB,EAAI,IAAOtE,KAAK8E,YAG5F,YAAYc,EAAYC,GAGpB,MAAO,CAFKlF,KAAKE,MAAM+E,EAAa5F,KAAK6E,WAC5BlE,KAAKE,MAAMgF,EAAc7F,KAAK8E,YAG/C,gBAAgBc,EAAYC,GACxB,IAAIgC,EAAWlH,KAAKE,MAAM+E,EAAa5F,KAAK6C,SAASsB,OACjD2D,EAAYnH,KAAKE,MAAMgF,EAAc7F,KAAK6C,SAASuB,QAEnD6B,EAAUjG,KAAKgD,KAAKS,KACxBzD,KAAKgD,KAAKS,KAAO,SAAWzD,KAAK6C,SAASe,WAC1C,IAAIO,EAAQxD,KAAKgF,KAAK3F,KAAKgD,KAAKkD,YAAY,KAAK/B,OACjDnE,KAAKgD,KAAKS,KAAOwC,EACjB,IACI8B,EADQ5D,EAAQ,IACQ2D,EAAYD,EAIxC,OAHIE,EAAgB,IAChBD,EAAYnH,KAAKE,MAAMiH,EAAYC,IAEhCpH,KAAKE,MAAMiH,EAAY9H,KAAK6C,SAASuD,SAEhD,2BAA2B/B,EAAGC,GAC1B,MAAO,CAAC3D,KAAKE,MAAMwD,EAAIrE,KAAK6E,WAAYlE,KAAKE,MAAMyD,EAAItE,KAAK8E,YAEhE,cACI,MAAMvB,EAAOvD,KAAK6C,SACZsE,EAAYxG,KAAKgF,KAAK3F,KAAKgD,KAAKkD,YAAY,KAAK/B,OACvDnE,KAAK6E,UAAYlE,KAAKgF,KAAKpC,EAAK6C,QAAUe,GAC1CnH,KAAK8E,UAAYnE,KAAKgF,KAAKpC,EAAK6C,QAAU7C,EAAKI,UAC3CJ,EAAKyE,mBACLhI,KAAK6E,UAAY7E,KAAK8E,UAAYnE,KAAKD,IAAIV,KAAK6E,UAAW7E,KAAK8E,YAEpE9E,KAAKgD,KAAKM,OAAOa,MAAQZ,EAAKY,MAAQnE,KAAK6E,UAC3C7E,KAAKgD,KAAKM,OAAOc,OAASb,EAAKa,OAASpE,KAAK8E,WAIrD,OADAwC,EAAKE,OAAQ,EACNF,GArGc,GCAV,MAAMW,UAAanF,EAC9B,cACIC,QACA/C,KAAKkI,aAAejF,SAASC,cAAc,UAE/C,KAAKlB,EAAMgD,GACP,IAAKX,EAAGC,EAAGW,EAAIC,EAAIjB,GAAMjC,EACrBmG,EAAYnI,KAAK6C,SAASsF,UAC1BC,EAAapI,KAAK6C,SAASuF,WAU/B,GATIpD,IACIhF,KAAK6C,SAASwF,aACdrI,KAAKgD,KAAKsF,UAAUjE,EAAI8D,EAAW7D,EAAI8D,EAAYD,EAAWC,IAG9DpI,KAAKgD,KAAKgB,UAAYC,EACtBjE,KAAKgD,KAAKkB,SAASG,EAAI8D,EAAW7D,EAAI8D,EAAYD,EAAWC,MAGhEnD,EACD,OAEJ,IAAIM,EAAQ,GAAGC,OAAOP,GAClBsD,EAAM,GAAG/C,OAAON,GAChBsD,EAAM,GAAGhD,OAAOvB,GACpB,IAAK,IAAIwB,EAAI,EAAGA,EAAIF,EAAMhE,OAAQkE,IAAK,CACnC,IAAIgD,EAAOzI,KAAK6C,SAAS6F,QAAQnD,EAAME,IACvC,IAAKgD,EACD,MAAM,IAAIE,MAAM,SAASpD,EAAME,4BAEnC,GAAIzF,KAAK6C,SAASwF,aAAc,CAC5B,IAAI/E,EAAStD,KAAKkI,aACdU,EAAUtF,EAAOH,WAAW,MAChCyF,EAAQC,yBAA2B,cACnCD,EAAQN,UAAU,EAAG,EAAGH,EAAWC,GACnC,IAAIlD,EAAKqD,EAAI9C,GACTxB,EAAKuE,EAAI/C,GACbmD,EAAQhB,UAAU5H,KAAK6C,SAASiG,QAASL,EAAK,GAAIA,EAAK,GAAIN,EAAWC,EAAY,EAAG,EAAGD,EAAWC,GACzF,eAANlD,IACA0D,EAAQ5E,UAAYkB,EACpB0D,EAAQC,yBAA2B,cACnCD,EAAQ1E,SAAS,EAAG,EAAGiE,EAAWC,IAE5B,eAANnE,IACA2E,EAAQ5E,UAAYC,EACpB2E,EAAQC,yBAA2B,mBACnCD,EAAQ1E,SAAS,EAAG,EAAGiE,EAAWC,IAEtCpI,KAAKgD,KAAK4E,UAAUtE,EAAQe,EAAI8D,EAAW7D,EAAI8D,EAAYD,EAAWC,QAGtEpI,KAAKgD,KAAK4E,UAAU5H,KAAK6C,SAASiG,QAASL,EAAK,GAAIA,EAAK,GAAIN,EAAWC,EAAY/D,EAAI8D,EAAW7D,EAAI8D,EAAYD,EAAWC,IAI1I,YAAYxC,EAAYC,GAGpB,MAAO,CAFKlF,KAAKE,MAAM+E,EAAa5F,KAAK6C,SAASsF,WACrCxH,KAAKE,MAAMgF,EAAc7F,KAAK6C,SAASuF,aAGxD,kBACI,MAAM,IAAIO,MAAM,8CAEpB,2BAA2BtE,EAAGC,GAC1B,MAAO,CAAC3D,KAAKE,MAAMwD,EAAIrE,KAAK6C,SAASsF,WAAYxH,KAAKE,MAAMyD,EAAItE,KAAK6C,SAASuF,aAElF,cACI,MAAM7E,EAAOvD,KAAK6C,SAClB7C,KAAKgD,KAAKM,OAAOa,MAAQZ,EAAKY,MAAQZ,EAAK4E,UAC3CnI,KAAKgD,KAAKM,OAAOc,OAASb,EAAKa,OAASb,EAAK6E,WAC7CpI,KAAKkI,aAAa/D,MAAQZ,EAAK4E,UAC/BnI,KAAKkI,aAAa9D,OAASb,EAAK6E,YCzEjC,SAASW,EAAWC,GACvB,IAAIC,EAAQ9H,EACZ,GAAI6H,KAAOE,EACPD,EAASC,EAAMF,OAEd,CACD,GAAqB,KAAjBA,EAAIG,OAAO,GAAW,CACtB,IACIC,GADUJ,EAAIK,MAAM,eAAiB,IACpBC,KAAKjF,GAAMkF,SAASlF,EAAG,MAC5C,GAAqB,GAAjB+E,EAAO7H,OACP0H,EAASG,EAAOE,KAAKjF,GAAU,GAAJA,QAE1B,CACD,IAAK,IAAIoB,EAAI,EAAGA,EAAI,EAAGA,IACnB2D,EAAO3D,EAAI,IAAM,GAAK2D,EAAO3D,GAC7B2D,EAAOrH,OAAO0D,EAAG,GAErBwD,EAASG,QAIbH,GADM9H,EAAI6H,EAAIK,MAAM,uBACXlI,EAAE,GAAGqI,MAAM,WAAWF,KAAKjF,GAAMkF,SAASlF,KAG1C,CAAC,EAAG,EAAG,GAEpB6E,EAAMF,GAAOC,EAEjB,OAAOA,EAAOvH,QA8JlB,MAAMwH,EAAQ,CACV,MAAS,CAAC,EAAG,EAAG,GAChB,KAAQ,CAAC,EAAG,EAAG,KACf,SAAY,CAAC,EAAG,EAAG,KACnB,WAAc,CAAC,EAAG,EAAG,KACrB,KAAQ,CAAC,EAAG,EAAG,KACf,UAAa,CAAC,EAAG,IAAK,GACtB,MAAS,CAAC,EAAG,IAAK,GAClB,KAAQ,CAAC,EAAG,IAAK,KACjB,SAAY,CAAC,EAAG,IAAK,KACrB,YAAe,CAAC,EAAG,IAAK,KACxB,cAAiB,CAAC,EAAG,IAAK,KAC1B,kBAAqB,CAAC,EAAG,IAAK,KAC9B,KAAQ,CAAC,EAAG,IAAK,GACjB,YAAe,CAAC,EAAG,IAAK,KACxB,KAAQ,CAAC,EAAG,IAAK,KACjB,KAAQ,CAAC,EAAG,IAAK,KACjB,aAAgB,CAAC,GAAI,GAAI,KACzB,WAAc,CAAC,GAAI,IAAK,KACxB,YAAe,CAAC,GAAI,IAAK,IACzB,SAAY,CAAC,GAAI,IAAK,IACtB,cAAiB,CAAC,GAAI,GAAI,IAC1B,cAAiB,CAAC,GAAI,GAAI,IAC1B,UAAa,CAAC,GAAI,IAAK,IACvB,eAAkB,CAAC,GAAI,IAAK,KAC5B,UAAa,CAAC,GAAI,IAAK,KACvB,UAAa,CAAC,GAAI,IAAK,KACvB,UAAa,CAAC,GAAI,IAAK,KACvB,cAAiB,CAAC,GAAI,GAAI,KAC1B,gBAAmB,CAAC,GAAI,IAAK,KAC7B,OAAU,CAAC,GAAI,EAAG,KAClB,eAAkB,CAAC,GAAI,IAAK,IAC5B,UAAa,CAAC,GAAI,IAAK,KACvB,eAAkB,CAAC,IAAK,IAAK,KAC7B,iBAAoB,CAAC,IAAK,IAAK,KAC/B,QAAW,CAAC,IAAK,IAAK,KACtB,QAAW,CAAC,IAAK,IAAK,KACtB,UAAa,CAAC,IAAK,GAAI,KACvB,UAAa,CAAC,IAAK,IAAK,IACxB,UAAa,CAAC,IAAK,IAAK,KACxB,UAAa,CAAC,IAAK,IAAK,KACxB,eAAkB,CAAC,IAAK,IAAK,KAC7B,eAAkB,CAAC,IAAK,IAAK,KAC7B,gBAAmB,CAAC,IAAK,IAAK,KAC9B,UAAa,CAAC,IAAK,IAAK,GACxB,WAAc,CAAC,IAAK,IAAK,GACzB,WAAc,CAAC,IAAK,IAAK,KACzB,OAAU,CAAC,IAAK,EAAG,GACnB,OAAU,CAAC,IAAK,EAAG,KACnB,MAAS,CAAC,IAAK,IAAK,GACpB,KAAQ,CAAC,IAAK,IAAK,KACnB,KAAQ,CAAC,IAAK,IAAK,KACnB,QAAW,CAAC,IAAK,IAAK,KACtB,aAAgB,CAAC,IAAK,IAAK,KAC3B,WAAc,CAAC,IAAK,GAAI,KACxB,QAAW,CAAC,IAAK,EAAG,GACpB,YAAe,CAAC,IAAK,EAAG,KACxB,YAAe,CAAC,IAAK,GAAI,IACzB,aAAgB,CAAC,IAAK,IAAK,KAC3B,WAAc,CAAC,IAAK,IAAK,KACzB,aAAgB,CAAC,IAAK,IAAK,KAC3B,WAAc,CAAC,IAAK,EAAG,KACvB,UAAa,CAAC,IAAK,IAAK,KACxB,WAAc,CAAC,IAAK,GAAI,KACxB,YAAe,CAAC,IAAK,IAAK,IAC1B,OAAU,CAAC,IAAK,GAAI,IACpB,MAAS,CAAC,IAAK,GAAI,IACnB,SAAY,CAAC,IAAK,IAAK,KACvB,SAAY,CAAC,IAAK,IAAK,KACvB,UAAa,CAAC,IAAK,IAAK,KACxB,YAAe,CAAC,IAAK,IAAK,IAC1B,cAAiB,CAAC,IAAK,IAAK,KAC5B,eAAkB,CAAC,IAAK,IAAK,KAC7B,WAAc,CAAC,IAAK,IAAK,KACzB,UAAa,CAAC,IAAK,GAAI,IACvB,cAAiB,CAAC,IAAK,IAAK,IAC5B,aAAgB,CAAC,IAAK,GAAI,KAC1B,UAAa,CAAC,IAAK,IAAK,KACxB,UAAa,CAAC,IAAK,IAAK,KACxB,OAAU,CAAC,IAAK,IAAK,KACrB,gBAAmB,CAAC,IAAK,GAAI,KAC7B,UAAa,CAAC,IAAK,GAAI,IACvB,KAAQ,CAAC,IAAK,IAAK,IACnB,UAAa,CAAC,IAAK,IAAK,IACxB,IAAO,CAAC,IAAK,IAAK,KAClB,UAAa,CAAC,IAAK,IAAK,KACxB,UAAa,CAAC,IAAK,IAAK,KACxB,cAAiB,CAAC,IAAK,IAAK,KAC5B,QAAW,CAAC,IAAK,IAAK,KACtB,OAAU,CAAC,IAAK,IAAK,KACrB,UAAa,CAAC,IAAK,IAAK,IACxB,QAAW,CAAC,IAAK,GAAI,IACrB,UAAa,CAAC,IAAK,IAAK,KACxB,KAAQ,CAAC,IAAK,IAAK,KACnB,UAAa,CAAC,IAAK,IAAK,KACxB,UAAa,CAAC,IAAK,IAAK,KACxB,SAAY,CAAC,IAAK,IAAK,KACvB,WAAc,CAAC,IAAK,IAAK,KACzB,OAAU,CAAC,IAAK,IAAK,KACrB,cAAiB,CAAC,IAAK,IAAK,KAC5B,WAAc,CAAC,IAAK,IAAK,KACzB,MAAS,CAAC,IAAK,IAAK,KACpB,UAAa,CAAC,IAAK,IAAK,KACxB,SAAY,CAAC,IAAK,IAAK,KACvB,MAAS,CAAC,IAAK,IAAK,KACpB,WAAc,CAAC,IAAK,IAAK,IACzB,MAAS,CAAC,IAAK,IAAK,KACpB,MAAS,CAAC,IAAK,IAAK,KACpB,WAAc,CAAC,IAAK,IAAK,KACzB,UAAa,CAAC,IAAK,IAAK,KACxB,WAAc,CAAC,IAAK,IAAK,KACzB,OAAU,CAAC,IAAK,IAAK,KACrB,aAAgB,CAAC,IAAK,IAAK,KAC3B,MAAS,CAAC,IAAK,IAAK,KACpB,qBAAwB,CAAC,IAAK,IAAK,KACnC,QAAW,CAAC,IAAK,IAAK,KACtB,IAAO,CAAC,IAAK,EAAG,GAChB,QAAW,CAAC,IAAK,EAAG,KACpB,QAAW,CAAC,IAAK,EAAG,KACpB,SAAY,CAAC,IAAK,GAAI,KACtB,UAAa,CAAC,IAAK,GAAI,GACvB,OAAU,CAAC,IAAK,GAAI,IACpB,QAAW,CAAC,IAAK,IAAK,KACtB,MAAS,CAAC,IAAK,IAAK,IACpB,WAAc,CAAC,IAAK,IAAK,GACzB,YAAe,CAAC,IAAK,IAAK,KAC1B,OAAU,CAAC,IAAK,IAAK,GACrB,UAAa,CAAC,IAAK,IAAK,KACxB,KAAQ,CAAC,IAAK,IAAK,KACnB,KAAQ,CAAC,IAAK,IAAK,GACnB,UAAa,CAAC,IAAK,IAAK,KACxB,YAAe,CAAC,IAAK,IAAK,KAC1B,SAAY,CAAC,IAAK,IAAK,KACvB,OAAU,CAAC,IAAK,IAAK,KACrB,UAAa,CAAC,IAAK,IAAK,KACxB,eAAkB,CAAC,IAAK,IAAK,KAC7B,WAAc,CAAC,IAAK,IAAK,KACzB,cAAiB,CAAC,IAAK,IAAK,KAC5B,SAAY,CAAC,IAAK,IAAK,KACvB,SAAY,CAAC,IAAK,IAAK,KACvB,aAAgB,CAAC,IAAK,IAAK,KAC3B,YAAe,CAAC,IAAK,IAAK,KAC1B,KAAQ,CAAC,IAAK,IAAK,KACnB,OAAU,CAAC,IAAK,IAAK,GACrB,YAAe,CAAC,IAAK,IAAK,KAC1B,MAAS,CAAC,IAAK,IAAK,KACpB,MAAS,CAAC,IAAK,IAAK,MCxUT,MAAMO,UAAe9G,EAChC,cACII,QACA/C,KAAK0J,UAAY,GACjB,IACI1J,KAAK2J,IAAM3J,KAAK4J,aAEpB,MAAOC,GACHC,MAAMD,EAAEE,UAGhB,qBACI,QAAS9G,SAASC,cAAc,UAAUC,WAAW,SAAU,CAAE6G,uBAAuB,IAE5F,SAAS5G,GAAMC,sBAAsBD,GACrC,eAAiB,OAAOpD,KAAK2J,IAAIrG,OACjC,WAAWC,GACPR,MAAMS,WAAWD,GACjBvD,KAAK6D,cACL,IAAIiF,EAAU9I,KAAK6C,SAASiG,QACxBA,GAAW,aAAcA,IAAYA,EAAQmB,SAC7CnB,EAAQoB,iBAAiB,QAAQ,IAAMlK,KAAKmK,eAAerB,KAG3D9I,KAAKmK,eAAerB,GAG5B,KAAK9G,EAAMgD,GACP,MAAMoF,EAAKpK,KAAK2J,IACVpG,EAAOvD,KAAK6C,SAClB,IAAKwB,EAAGC,EAAGW,EAAIC,EAAIjB,GAAMjC,EACrBqI,EAAWD,EAAG9G,OAAOc,QAAUE,EAAI,GAAKf,EAAK6E,WAWjD,GAVAgC,EAAGE,QAAQjG,EAAId,EAAK4E,UAAWkC,EAAU9G,EAAK4E,UAAW5E,EAAK6E,YAC1DpD,IACIzB,EAAK8E,aACL+B,EAAGG,WAAW,EAAG,EAAG,EAAG,GAGvBH,EAAGG,cAAcC,EAAWvG,IAEhCmG,EAAGK,MAAML,EAAGM,oBAEXzF,EACD,OAEJ,IAAIM,EAAQ,GAAGC,OAAOP,GAClBuD,EAAM,GAAGhD,OAAOvB,GAChBsE,EAAM,GAAG/C,OAAON,GACpBkF,EAAGO,WAAW3K,KAAK0J,UAAwB,aAAG,CAACrF,EAAGC,IAClD,IAAK,IAAImB,EAAI,EAAGA,EAAIF,EAAMhE,OAAQkE,IAAK,CACnC,IAAIgD,EAAOzI,KAAK6C,SAAS6F,QAAQnD,EAAME,IACvC,IAAKgD,EACD,MAAM,IAAIE,MAAM,SAASpD,EAAME,4BAEnC2E,EAAGQ,UAAU5K,KAAK0J,UAAoB,SAAGnG,EAAK8E,aAAe,EAAI,GACjE+B,EAAGO,WAAW3K,KAAK0J,UAAyB,cAAGjB,GAC3ClF,EAAK8E,eACL+B,EAAGS,WAAW7K,KAAK0J,UAAgB,KAAGc,EAAWjC,EAAI9C,KACrD2E,EAAGS,WAAW7K,KAAK0J,UAAc,GAAGc,EAAWhC,EAAI/C,MAEvD2E,EAAGU,WAAWV,EAAGW,eAAgB,EAAG,IA8C5C,QACI,MAAMX,EAAKpK,KAAK2J,IAChBS,EAAGG,cAAcC,EAAWxK,KAAK6C,SAASoB,KAC1CmG,EAAGE,QAAQ,EAAG,EAAGF,EAAG9G,OAAOa,MAAOiG,EAAG9G,OAAOc,QAC5CgG,EAAGK,MAAML,EAAGM,kBAEhB,YAAY9E,EAAYC,GAGpB,MAAO,CAFKlF,KAAKE,MAAM+E,EAAa5F,KAAK6C,SAASsF,WACrCxH,KAAKE,MAAMgF,EAAc7F,KAAK6C,SAASuF,aAGxD,kBACI,MAAM,IAAIO,MAAM,8CAEpB,gBAAgBtE,EAAGC,GACf,IAAIhB,EAAStD,KAAK2J,IAAIrG,OAClBiB,EAAOjB,EAAOkB,wBAKlB,OAJAH,GAAKE,EAAKE,KACVH,GAAKC,EAAKG,IACVL,GAAKf,EAAOa,MAAQI,EAAKJ,MACzBG,GAAKhB,EAAOc,OAASG,EAAKH,OACtBC,EAAI,GAAKC,EAAI,GAAKD,GAAKf,EAAOa,OAASG,GAAKhB,EAAOc,OAC5C,EAAE,GAAI,GAEVpE,KAAK2E,2BAA2BN,EAAGC,GAE9C,aACI,IAAI8F,EAAKnH,SAASC,cAAc,UAAUC,WAAW,SAAU,CAAE6G,uBAAuB,IACxFgB,OAAOZ,GAAKA,EACZ,IAAIa,EAuEZ,SAAuBb,EAAIc,EAAKC,GAC5B,MAAMC,EAAKhB,EAAGiB,aAAajB,EAAGkB,eAG9B,GAFAlB,EAAGmB,aAAaH,EAAIF,GACpBd,EAAGoB,cAAcJ,IACZhB,EAAGqB,mBAAmBL,EAAIhB,EAAGsB,gBAC9B,MAAM,IAAI/C,MAAMyB,EAAGuB,iBAAiBP,IAAO,IAE/C,MAAMQ,EAAKxB,EAAGiB,aAAajB,EAAGyB,iBAG9B,GAFAzB,EAAGmB,aAAaK,EAAIT,GACpBf,EAAGoB,cAAcI,IACZxB,EAAGqB,mBAAmBG,EAAIxB,EAAGsB,gBAC9B,MAAM,IAAI/C,MAAMyB,EAAGuB,iBAAiBC,IAAO,IAE/C,MAAME,EAAI1B,EAAG2B,gBAIb,GAHA3B,EAAG4B,aAAaF,EAAGV,GACnBhB,EAAG4B,aAAaF,EAAGF,GACnBxB,EAAG6B,YAAYH,IACV1B,EAAG8B,oBAAoBJ,EAAG1B,EAAG+B,aAC9B,MAAM,IAAIxD,MAAMyB,EAAGgC,kBAAkBN,IAAM,IAE/C,OAAOA,EA3FWC,CAAc3B,EAAIiC,EAAIC,GAQpC,OAPAlC,EAAGmC,WAAWtB,GA4FtB,SAAoBb,GAChB,MAAMoC,EAAM,IAAIC,aAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAC7CC,EAAMtC,EAAGuC,eACfvC,EAAGwC,WAAWxC,EAAGyC,aAAcH,GAC/BtC,EAAG0C,WAAW1C,EAAGyC,aAAcL,EAAKpC,EAAG2C,aACvC3C,EAAG4C,wBAAwB,GAC3B5C,EAAG6C,oBAAoB,EAAG,EAAG7C,EAAG8C,OAAO,EAAO,EAAG,GAjG7CC,CAAW/C,GACXgD,EAASC,SAAQC,GAAQtN,KAAK0J,UAAU4D,GAAQlD,EAAGmD,mBAAmBtC,EAASqC,KAC/EtN,KAAKwN,SAAWvC,EAChBb,EAAGqD,OAAOrD,EAAGsD,OACbtD,EAAGuD,kBAAkBvD,EAAGwD,UAAWxD,EAAGyD,oBAAqBzD,EAAG0D,IAAK1D,EAAGyD,qBACtEzD,EAAGqD,OAAOrD,EAAG2D,cACN3D,EAEX,2BAA2B/F,EAAGC,GAC1B,MAAO,CAAC3D,KAAKE,MAAMwD,EAAIrE,KAAK6C,SAASsF,WAAYxH,KAAKE,MAAMyD,EAAItE,KAAK6C,SAASuF,aAElF,cACI,MAAMgC,EAAKpK,KAAK2J,IACVpG,EAAOvD,KAAK6C,SACZmL,EAAa,CAACzK,EAAKY,MAAQZ,EAAK4E,UAAW5E,EAAKa,OAASb,EAAK6E,YACpEgC,EAAG9G,OAAOa,MAAQ6J,EAAW,GAC7B5D,EAAG9G,OAAOc,OAAS4J,EAAW,GAC9B5D,EAAG6D,SAAS,EAAG,EAAGD,EAAW,GAAIA,EAAW,IAC5C5D,EAAGO,WAAW3K,KAAK0J,UAAoB,SAAG,CAACnG,EAAK4E,UAAW5E,EAAK6E,aAChEgC,EAAGO,WAAW3K,KAAK0J,UAAsB,WAAGsE,GAEhD,eAAelF,IA8EnB,SAAuBsB,EAAIpI,GACvB,IAAIzB,EAAI6J,EAAG8D,gBACX9D,EAAG+D,YAAY/D,EAAGgE,WAAY7N,GAC9B6J,EAAGiE,cAAcjE,EAAGgE,WAAYhE,EAAGkE,mBAAoBlE,EAAGmE,SAC1DnE,EAAGiE,cAAcjE,EAAGgE,WAAYhE,EAAGoE,mBAAoBpE,EAAGmE,SAC1DnE,EAAGiE,cAAcjE,EAAGgE,WAAYhE,EAAGqE,eAAgBrE,EAAGsE,QACtDtE,EAAGiE,cAAcjE,EAAGgE,WAAYhE,EAAGuE,eAAgBvE,EAAGsE,QACtDtE,EAAGwE,YAAYxE,EAAGyE,oBAAqB,GACvCzE,EAAG0E,WAAW1E,EAAGgE,WAAY,EAAGhE,EAAG2E,KAAM3E,EAAG2E,KAAM3E,EAAG4E,cAAehN,GArFhEkM,CAAclO,KAAK2J,IAAKb,IAGhC,MAAMsE,EAAW,CAAC,eAAgB,gBAAiB,WAAY,aAAc,WAAY,KAAM,QACzFf,EAAK,ocAkBR4C,OACG3C,EAAK,ihBAuBR2C,OA0CH,IAAIC,EAAa,GACjB,SAAS1E,EAAW2E,GAChB,KAAMA,KAASD,GAAa,CACxB,IAAIE,EACJ,GAAa,eAATD,EACAC,EAAS,CAAC,EAAG,EAAG,EAAG,QAElB,GAAID,EAAMvN,QAAQ,SAAW,EAAG,CACjCwN,GAAUD,EAAM9F,MAAM,YAAc,IAAIC,IAAI+F,QAC5C,IAAK,IAAI5J,EAAI,EAAGA,EAAI,EAAGA,IACnB2J,EAAO3J,GAAK2J,EAAO3J,GAAK,SAI5B2J,EAAS,EAAiBD,GAAO7F,KAAIgG,GAAKA,EAAI,MAC9CF,EAAOtN,KAAK,GAEhBoN,EAAWC,GAASC,EAExB,OAAOF,EAAWC,GCrQtB,SAASI,EAAUJ,GACf,MAEMK,EADa,EADA,IAGnB,IAAIC,EAAM,EAAiBN,GAI3B,OAAW,GAHHxO,KAAKE,MAAM4O,EAAI,GAAKD,GAGR,EAFZ7O,KAAKE,MAAM4O,EAAI,GAAKD,GAEA,EADpB7O,KAAKE,MAAM4O,EAAI,GAAKD,GACI,GAErB,MAAME,UAAa/M,EAC9B,cACII,QACA/C,KAAK2P,QAAU,CAAC,EAAG,GACnB3P,KAAK4P,QAAU,EAAE,GAAI,GACrB5P,KAAK6P,WAAa,GAEtB,SAASzM,GAAM0M,WAAW1M,EAAI,IAAO,IACrC,WAAWR,GACPG,MAAMS,WAAWZ,GACjB,IAAI0D,EAAO,CAAC1D,EAAQuB,MAAOvB,EAAQwB,QAC/B2L,EAAQ/P,KAAKgQ,cACjBhQ,KAAK2P,QAAUI,EAAMzG,KAAI,CAAC2G,EAAKtO,IAAUhB,KAAKE,OAAOoP,EAAM3J,EAAK3E,IAAU,KAE9E,QACIuO,QAAQC,OAAOC,MAjCZ,YAAeb,EAiCevP,KAAK6C,SAASoB,YAEnD,KAAKjC,EAAMgD,GAEP,IAAKX,EAAGC,EAAGW,EAAIC,EAAIjB,GAAMjC,EAErBqO,EAAKrQ,KAAK2P,QAAQ,GAAKtL,EACvBiM,EAAKtQ,KAAK2P,QAAQ,GAAKrL,EACvBgC,EAAOtG,KAAKgQ,cAChB,GAAIK,EAAK,GAAKA,GAAM/J,EAAK,GACrB,OAEJ,GAAIgK,EAAK,GAAKA,GAAMhK,EAAK,GACrB,OAeJ,GAbI+J,IAAOrQ,KAAK4P,QAAQ,IAAMU,IAAOtQ,KAAK4P,QAAQ,KAC9CM,QAAQC,OAAOC,MA5C3B,SAAwB/L,EAAGC,GACvB,MAAO,KAAQA,EAAI,KAAKD,EAAI,KA2CCkM,CAAeF,EAAIC,IACxCtQ,KAAK4P,QAAQ,GAAKS,EAClBrQ,KAAK4P,QAAQ,GAAKU,GAIlBtL,IACKC,IACDA,EAAK,OAIRA,EACD,OAGJ,IAAIuL,EA/DZ,SAAqBtL,EAAIjB,GACrB,MAAO,YAAesL,EAAUrK,WAAYqK,EAAUtL,MA8DnCwM,CAAYvL,EAAIjB,GAK/B,GAJIuM,IAAaxQ,KAAK6P,aAClBK,QAAQC,OAAOC,MAAMI,GACrBxQ,KAAK6P,WAAaW,GAEZ,MAANvL,EAAY,CAEZ,IAAIM,EAAQ,GAAGC,OAAOP,GACtBiL,QAAQC,OAAOC,MAAM7K,EAAM,IAG/BvF,KAAK4P,QAAQ,KACT5P,KAAK4P,QAAQ,IAAMtJ,EAAK,KACxBtG,KAAK4P,QAAQ,GAAK,EAClB5P,KAAK4P,QAAQ,MAGrB,kBAAoB,MAAM,IAAIjH,MAAM,+CACpC,gBAAgBtE,EAAGC,GAAK,MAAO,CAACD,EAAGC,GACnC,cAAgB,MAAO,CAAC4L,QAAQC,OAAOO,QAASR,QAAQC,OAAOQ,OCnFnE,MAAMC,EAAY,oBAuKlB,SAASC,EAAiBC,EAAQC,EAAYC,EAAYC,GACtD,IAGIC,EAAe,CACfC,KA1KiB,EA2KjBC,MAAON,EAAOC,GAAYK,MAAMC,UAAUL,GAAcC,EAAkB,EAAI,KAGlF,OADAH,EAAO/O,OAAOgP,EAAa,EAAG,EAPV,CAChBI,KAtKoB,GA4KwBD,GACzCJ,EAAOC,GAAYK,MAAMC,UAAU,EAAGL,GChL1C,MAAMM,EAAO,CAChBC,EAAG,CAAC,CAAC,GAAI,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,EAAE,EAAG,IAClCC,EAAG,CAAC,CAAC,GAAI,GAAI,CAAC,GAAI,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,EAAE,EAAG,GAAI,EAAE,EAAG,GAAI,EAAE,GAAI,IACtEC,EAAG,CAAC,EAAE,GAAI,GAAI,CAAC,GAAI,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,EAAE,EAAG,GAAI,EAAE,EAAG,KCAnDC,EAAW,CACb,IAAO9M,EACP,KAAQ,EACR,KAAQqD,EACR,UAAWwB,EACX,KAAQiG,GAENiC,EAAkB,CACpBxN,MDduB,GCevBC,ODbwB,GCcxBgB,WAAW,EACXwM,OAAQ,OACRjO,SAAU,GACVyC,QAAS,EACTS,OAAQ,EACRmB,kBAAkB,EAClBpE,WAAY,YACZF,UAAW,GACXwB,GAAI,OACJjB,GAAI,OACJkE,UAAW,GACXC,WAAY,GACZM,QAAS,GACTI,QAAS,KACTT,cAAc,GAuOlB,EAlO4B,MACxB,MAAMwJ,EACF,YAAYjP,EAAU,IAClB5C,KAAK8R,MAAQ,GACb9R,KAAK+R,QAAS,EACd/R,KAAK6C,SAAW,GAChBD,EAAUoP,OAAOC,OAAO,GAAIN,EAAiB/O,GAC7C5C,KAAKwD,WAAWZ,GAChB5C,KAAKkS,MAAQlS,KAAKkS,MAAMC,KAAKnS,MAC7BA,KAAKoS,MAAQpS,KAAKoS,MAAMD,KAAKnS,MAC7BA,KAAKqS,SAASC,SAAStS,KAAKoS,OAQhC,MAAM/N,EAAGC,EAAGiO,GACR,IAAIC,EAAS,CAACxS,KAAK6C,SAASoB,GAAIjE,KAAK6C,SAASqC,IAC9ClF,KAAKyS,KAAKpO,EAAGC,EAAG,KAAM,KAAMkO,EAAOD,EAAOC,EAAOjR,SAKrD,QACIvB,KAAK8R,MAAQ,GACb9R,KAAK+R,QAAS,EAKlB,WAAWnP,GAEP,GADAoP,OAAOC,OAAOjS,KAAK6C,SAAUD,GACzBA,EAAQuB,OAASvB,EAAQwB,QAAUxB,EAAQe,UAAYf,EAAQgB,YAAchB,EAAQwD,SAAWxD,EAAQgP,OAAQ,CAChH,GAAIhP,EAAQgP,OAAQ,CAChB,IAAIc,EAAOhB,EAAS9O,EAAQgP,QAC5B5R,KAAKqS,SAAW,IAAIK,EAExB1S,KAAKqS,SAAS7O,WAAWxD,KAAK6C,UAC9B7C,KAAK+R,QAAS,EAElB,OAAO/R,KAKX,aAAe,OAAOA,KAAK6C,SAI3B,eAAiB,OAAO7C,KAAKqS,SAASM,eAOtC,YAAY/M,EAAYC,GACpB,OAAO7F,KAAKqS,SAASrC,YAAYpK,EAAYC,GAQjD,gBAAgBD,EAAYC,GACxB,OAAO7F,KAAKqS,SAASO,gBAAgBhN,EAAYC,GAErD,gBAAgBD,EAAYC,GAGxB,MAAO,CAFKlF,KAAKE,MAAM+E,EAAa5F,KAAK6C,SAASsB,OACrCxD,KAAKE,MAAMgF,EAAc7F,KAAK6C,SAASuB,SAQxD,gBAAgByF,GACZ,IAAIxF,EAAGC,EASP,MARI,YAAauF,GACbxF,EAAIwF,EAAEgJ,QAAQ,GAAGC,QACjBxO,EAAIuF,EAAEgJ,QAAQ,GAAGE,UAGjB1O,EAAIwF,EAAEiJ,QACNxO,EAAIuF,EAAEkJ,SAEH/S,KAAKqS,SAASW,gBAAgB3O,EAAGC,GAS5C,KAAKD,EAAGC,EAAGW,EAAIC,EAAIjB,GACViB,IACDA,EAAKlF,KAAK6C,SAASqC,IAElBjB,IACDA,EAAKjE,KAAK6C,SAASoB,IAEvB,IAAIgP,EAAM,GAAG5O,KAAKC,IAClBtE,KAAK8R,MAAMmB,GAAO,CAAC5O,EAAGC,EAAGW,EAAIC,EAAIjB,IACb,IAAhBjE,KAAK+R,SAGJ/R,KAAK+R,SACN/R,KAAK+R,OAAS,IAElB/R,KAAK+R,OAAOkB,IAAO,GAUvB,SAAS5O,EAAGC,EAAG4O,EAAMC,GACjB,IAAIjO,EAAK,KACLjB,EAAK,KACLwC,EAAKpC,EACLqC,EAAKpC,EACL8O,EAAQ,EACPD,IACDA,EAAWnT,KAAK6C,SAASsB,MAAQE,GAErC,IAAIyM,EFrIT,SAAkB9H,EAAKmK,GAC1B,IAAI3R,EAAS,GAET6R,EAAS,EACbrK,EAAIsK,QAAQ1C,GAAW,SAAUvH,EAAO8H,EAAM7D,EAAM3L,GAEhD,IAAIS,EAAO4G,EAAIqI,UAAUgC,EAAQ1R,GAajC,OAZIS,EAAKb,QACLC,EAAOM,KAAK,CACRqP,KAvCS,EAwCTC,MAAOhP,IAIfZ,EAAOM,KAAK,CACRqP,KAAe,KAARA,EA3CI,EACA,EA2CXC,MAAO9D,EAAK2B,SAEhBoE,EAAS1R,EAAQ0H,EAAM9H,OAChB,MAGX,IAAIa,EAAO4G,EAAIqI,UAAUgC,GAOzB,OANIjR,EAAKb,QACLC,EAAOM,KAAK,CACRqP,KAvDa,EAwDbC,MAAOhP,IAMnB,SAAoB0O,EAAQqC,GACnBA,IACDA,EAAWI,KAEf,IAAI9N,EAAI,EACJ+N,EAAa,EACbC,GAAsB,EAC1B,KAAOhO,EAAIqL,EAAOvP,QAAQ,CACtB,IAAImS,EAAQ5C,EAAOrL,GAKnB,GA1EoB,GAsEhBiO,EAAMvC,OACNqC,EAAa,EACbC,GAAsB,GAzET,GA2EbC,EAAMvC,KAAmB,CACzB1L,IACA,SAGJ,KAAqB,GAAd+N,GAA4C,KAAzBE,EAAMtC,MAAMjI,OAAO,IACzCuK,EAAMtC,MAAQsC,EAAMtC,MAAMC,UAAU,GAGxC,IAAI1P,EAAQ+R,EAAMtC,MAAMxP,QAAQ,MAChC,IAAc,GAAVD,EAAa,CACb+R,EAAMtC,MAAQP,EAAiBC,EAAQrL,EAAG9D,GAAO,GAEjD,IAAIgS,EAAMD,EAAMtC,MAAM5H,MAAM,IAC5B,KAAOmK,EAAIpS,QAAiC,KAAvBoS,EAAIA,EAAIpS,OAAS,IAClCoS,EAAIC,MAERF,EAAMtC,MAAQuC,EAAIE,KAAK,IAG3B,GAAKH,EAAMtC,MAAM7P,OAAjB,CAIA,GAAIiS,EAAaE,EAAMtC,MAAM7P,OAAS4R,EAAU,CAE5C,IAAIxR,GAAS,EACb,OAAU,CACN,IAAImS,EAAYJ,EAAMtC,MAAMxP,QAAQ,IAAKD,EAAQ,GACjD,IAAkB,GAAdmS,EACA,MAEJ,GAAIN,EAAaM,EAAYX,EACzB,MAEJxR,EAAQmS,EAEZ,IAAc,GAAVnS,EACA+R,EAAMtC,MAAQP,EAAiBC,EAAQrL,EAAG9D,GAAO,QAEhD,IAA2B,GAAvB8R,EAA0B,CAC/B,IAAIC,EAAQ5C,EAAO2C,GACfzC,EAAa0C,EAAMtC,MAAM2C,YAAY,KACzCL,EAAMtC,MAAQP,EAAiBC,EAAQ2C,EAAoBzC,GAAY,GACvEvL,EAAIgO,OAGJC,EAAMtC,MAAQP,EAAiBC,EAAQrL,EAAG0N,EAAWK,GAAY,QAIrEA,GAAcE,EAAMtC,MAAM7P,QACO,GAA7BmS,EAAMtC,MAAMxP,QAAQ,OACpB6R,EAAqBhO,GAG7BA,SAnCIqL,EAAO/O,OAAO0D,EAAG,GAqCzBqL,EAAOhP,KAAK,CAAEqP,KApIU,IAsIxB,IAAI6C,EAAgB,KACpB,IAAK,IAAIvO,EAAI,EAAGA,EAAIqL,EAAOvP,OAAQkE,IAAK,CACpC,IAAIiO,EAAQ5C,EAAOrL,GACnB,OAAQiO,EAAMvC,MACV,KA3Ia,EA4IT6C,EAAgBN,EAChB,MACJ,KA7IgB,EA8IZ,GAAIM,EAAe,CACf,IAAIL,EAAMK,EAAc5C,MAAM5H,MAAM,IACpC,KAAOmK,EAAIpS,QAAiC,KAAvBoS,EAAIA,EAAIpS,OAAS,IAClCoS,EAAIC,MAERI,EAAc5C,MAAQuC,EAAIE,KAAK,IAEnCG,EAAgB,MAK5B,OADAlD,EAAO8C,MACA9C,EAhGAmD,CAAWzS,EAAQ2R,GEwGL,CAAcD,EAAMC,GACjC,KAAOrC,EAAOvP,QAAQ,CAClB,IAAImS,EAAQ5C,EAAOoD,QACnB,OAAQR,EAAMvC,MACV,KFvKK,EEwKD,IAAIgD,GAAU,EAAOC,GAAc,EAAOC,GAAc,EAAOC,GAAkB,EACjF,IAAK,IAAI7O,EAAI,EAAGA,EAAIiO,EAAMtC,MAAM7P,OAAQkE,IAAK,CACzC,IAAI8O,EAAKb,EAAMtC,MAAMoD,WAAW/O,GAC5BgP,EAAIf,EAAMtC,MAAMjI,OAAO1D,GAC3B,GAA6B,SAAzBzF,KAAK6C,SAAS+O,OAAmB,CACjC,IAAI8C,EAAMH,GAAM,EAEhB,GADoB,KAARG,GAAiBA,GAAO,IAAQA,GAAO,KAAUA,GAAO,KAAQA,GAAO,KAAUH,GAAM,OAAUA,GAAM,MACxG,CACPvU,KAAKyS,KAAKhM,EAAK,EAAGC,EAAI+N,EAAGvP,EAAIjB,GAC7BjE,KAAKyS,KAAKhM,EAAK,EAAGC,EAAI,KAAMxB,EAAIjB,GAChCwC,GAAM,EACN,UAIR4N,EAAeE,EAAK,OAAUA,EAAK,OAAYA,EAAK,OAAUA,EAAK,OAAWA,EAAK,MAEnFJ,EAA8B,IAAnBM,EAAED,WAAW,IAAiC,OAAnBC,EAAED,WAAW,IAG/CF,GAAoBD,GAAgBF,GACpC1N,IAIA4N,IAAgBD,GAChB3N,IAEJzG,KAAKyS,KAAKhM,IAAMC,EAAI+N,EAAGvP,EAAIjB,GAC3BmQ,EAAcD,EACdG,EAAkBD,EAEtB,MACJ,KFvMG,EEwMCnP,EAAKwO,EAAMtC,OAAS,KACpB,MACJ,KFzMG,EE0MCnN,EAAKyP,EAAMtC,OAAS,KACpB,MACJ,KF9MQ,EE+MJ3K,EAAKpC,EACLqC,IACA0M,KAIZ,OAAOA,EAKX,QAEI,GADApT,KAAKqS,SAASC,SAAStS,KAAKoS,OACvBpS,KAAK+R,OAAV,CAGA,IAAoB,IAAhB/R,KAAK+R,OAAiB,CACtB/R,KAAKqS,SAAS5H,QACd,IAAK,IAAIvI,KAAMlC,KAAK8R,MAChB9R,KAAK2U,MAAMzS,GAAI,QAInB,IAAK,IAAI+Q,KAAOjT,KAAK+R,OACjB/R,KAAK2U,MAAM1B,GAAK,GAGxBjT,KAAK+R,QAAS,GAMlB,MAAMkB,EAAKjO,GACP,IAAIhD,EAAOhC,KAAK8R,MAAMmB,GAClBjR,EAAK,IAAMhC,KAAK6C,SAASoB,KACzBe,GAAc,GAElBhF,KAAKqS,SAASI,KAAKzQ,EAAMgD,IAQjC,OALA6M,EAAQvK,KAAO,EACfuK,EAAQjN,IAAMA,EACdiN,EAAQ5J,KAAOA,EACf4J,EAAQpI,OAASA,EACjBoI,EAAQnC,KAAOA,EACRmC,GAhOiB,GCpCrB,MAAM+C,EACT,cACI5U,KAAK6U,KAAO,GACZ7U,KAAK8U,UAAY,EAErB,SAASnO,EAAGC,GACR,OAAOD,EAAEsM,KAAOrM,EAAEqM,IAAMtM,EAAEmO,UAAYlO,EAAEkO,UAAYnO,EAAEsM,IAAMrM,EAAEqM,IAElE,MAAM/R,GACFlB,KAAK6U,KAAO7U,KAAK6U,KAAKvL,KAAI,EAAG2J,MAAK7B,QAAO0D,gBAAgB,CAAG7B,IAAKA,EAAM/R,EAAGkQ,QAAO0D,gBAErF,MACI,OAAO9U,KAAK6U,KAAKtT,OAErB,KAAK6P,EAAO6B,GACRjT,KAAK8U,WAAa,EAClB,MAAMC,EAAM/U,KAAKgV,MACjBhV,KAAK6U,KAAK/S,KAAK,CAAEsP,QAAO0D,UAAW9U,KAAK8U,UAAW7B,QACnDjT,KAAKiV,SAASF,GAElB,MACI,GAAkB,GAAd/U,KAAKgV,MACL,MAAM,IAAIrM,MAAM,qBAEpB,MAAMjE,EAAM1E,KAAK6U,KAAK,GAQtB,OAPI7U,KAAKgV,MAAQ,GACbhV,KAAK6U,KAAK,GAAK7U,KAAK6U,KAAKjB,MACzB5T,KAAKkV,WAAW,IAGhBlV,KAAK6U,KAAKjB,MAEPlP,EAEX,KAAKxD,GACD,IAAK,IAAIuE,EAAI,EAAGA,EAAIzF,KAAKgV,MAAOvP,IAC5B,GAAIvE,GAAKlB,KAAK6U,KAAKpP,GAAG2L,MAClB,OAAOpR,KAAK6U,KAAKpP,GAGzB,OAAO,KAEX,OAAOvE,GACH,IAAIS,EAAQ,KACZ,IAAK,IAAI8D,EAAI,EAAGA,EAAIzF,KAAKgV,MAAOvP,IACxBvE,GAAKlB,KAAK6U,KAAKpP,GAAG2L,QAClBzP,EAAQ8D,GAGhB,GAAc,OAAV9D,EACA,OAAO,EAEX,GAAI3B,KAAKgV,MAAQ,EAAG,CAChB,IAAIG,EAAOnV,KAAK6U,KAAKjB,MAKrB,OAJIuB,EAAK/D,OAASlQ,IACdlB,KAAK6U,KAAKlT,GAASwT,EACnBnV,KAAKkV,WAAWvT,KAEb,EAKX,OAFI3B,KAAK6U,KAAKjB,OAEP,EAEX,WAAWvP,GACP,OAAO1D,KAAKE,OAAOwD,EAAI,GAAK,GAEhC,cAAcA,GACV,OAAO,EAAIA,EAAI,EAEnB,eAAeA,GACX,OAAO,EAAIA,EAAI,EAEnB,UAAUA,GACN,OAAOA,GAAK,GAAKA,EAAIrE,KAAK6U,KAAKtT,OAEnC,KAAK8C,EAAGC,GACJ,MAAM/D,EAAIP,KAAK6U,KAAKxQ,GACpBrE,KAAK6U,KAAKxQ,GAAKrE,KAAK6U,KAAKvQ,GACzBtE,KAAK6U,KAAKvQ,GAAK/D,EAEnB,QAAQ6U,GACJ,MAAMC,EAAeD,EAAQE,OAAOtV,KAAKuV,UAAUpD,KAAKnS,OACxD,IAAIwV,EAAUH,EAAa,GAC3B,IAAK,MAAM5P,KAAK4P,EACRrV,KAAKyV,SAASzV,KAAK6U,KAAKpP,GAAIzF,KAAK6U,KAAKW,MACtCA,EAAU/P,GAGlB,OAAO+P,EAEX,SAASnR,GACL,GAAS,GAALA,EACA,OAEJ,MAAMqR,EAAS1V,KAAK2V,WAAWtR,GAC3BrE,KAAKuV,UAAUG,IAAW1V,KAAKyV,SAASzV,KAAK6U,KAAKxQ,GAAIrE,KAAK6U,KAAKa,MAChE1V,KAAK4V,KAAKvR,EAAGqR,GACb1V,KAAKiV,SAASS,IAGtB,WAAWrR,GACP,MAAMwR,EAAY7V,KAAK8V,cAAczR,GAC/B0R,EAAa/V,KAAKgW,eAAe3R,GACvC,IAAKrE,KAAKuV,UAAUM,GAChB,OAEJ,MAAMI,EAAIjW,KAAKkW,QAAQ,CAAC7R,EAAGwR,EAAWE,IAClCE,GAAK5R,IACLrE,KAAK4V,KAAKvR,EAAG4R,GACbjW,KAAKkV,WAAWe,IAGxB,aACIE,QAAQ9U,IAAIrB,KAAK6U,OClHV,MAAMuB,EAIjB,cACIpW,KAAKqW,MAAQ,EACbrW,KAAKsW,QAAU,IAAI1B,EAKvB,UAAY,OAAO5U,KAAKqW,MAIxB,QAEI,OADArW,KAAKsW,QAAU,IAAI1B,EACZ5U,KAMX,IAAIuW,EAAOC,GACPxW,KAAKsW,QAAQxU,KAAKyU,EAAOC,GAM7B,MACI,IAAKxW,KAAKsW,QAAQtB,MACd,OAAO,KAEX,IAAM/B,IAAKuD,EAAMpF,MAAOmF,GAAUvW,KAAKsW,QAAQ1C,MAK/C,OAJI4C,EAAO,IACPxW,KAAKqW,OAASG,EACdxW,KAAKsW,QAAQpC,OAAOsC,IAEjBD,EAOX,aAAaA,GACT,MAAMpV,EAAInB,KAAKsW,QAAQG,KAAKF,GAC5B,GAAIpV,EAAG,CACH,MAAM,IAAE8R,GAAQ9R,EAChB,OAAO8R,GASf,OAAOsD,GACH,OAAOvW,KAAKsW,QAAQI,OAAOH,IC5DpB,MAAMI,EAIjB,cACI3W,KAAK4W,OAAS,IAAIR,EAClBpW,KAAK6W,QAAU,GACf7W,KAAK8W,SAAW,KAKpB,UAAY,OAAO9W,KAAK4W,OAAOG,UAK/B,IAAIC,EAAMC,GAIN,OAHIA,GACAjX,KAAK6W,QAAQ/U,KAAKkV,GAEfhX,KAOX,UAAUgX,GACN,OAAOhX,KAAK4W,OAAOM,aAAaF,GAKpC,QAII,OAHAhX,KAAK4W,OAAOnM,QACZzK,KAAK6W,QAAU,GACf7W,KAAK8W,SAAW,KACT9W,KAOX,OAAOgX,GACH,IAAIxV,EAASxB,KAAK4W,OAAOF,OAAOM,GAC5BrV,EAAQ3B,KAAK6W,QAAQjV,QAAQoV,GAOjC,OANc,GAAVrV,GACA3B,KAAK6W,QAAQ9U,OAAOJ,EAAO,GAE3B3B,KAAK8W,UAAYE,IACjBhX,KAAK8W,SAAW,MAEbtV,EAMX,OAEI,OADAxB,KAAK8W,SAAW9W,KAAK4W,OAAOO,MACrBnX,KAAK8W,UC5DpB,QCCe,cAAqBH,EAChC,IAAIK,EAAMC,GAEN,OADAjX,KAAK4W,OAAOQ,IAAIJ,EAAM,GACfjU,MAAMqU,IAAIJ,EAAMC,GAE3B,OAII,OAHsB,OAAlBjX,KAAK8W,WAA6D,GAAxC9W,KAAK6W,QAAQjV,QAAQ5B,KAAK8W,WACpD9W,KAAK4W,OAAOQ,IAAIpX,KAAK8W,SAAU,GAE5B/T,MAAMsU,SCVN,MAAMC,EAOjB,YAAYC,EAAqB3U,EAAU,IACvC5C,KAAKwX,aAAeD,EACpBvX,KAAK6C,SAAWmP,OAAOC,OAAO,CAAEwF,SAAU,GAAK7U,GAQnD,WAAW6D,EAAIC,EAAIvF,GACf,IACIuW,EAAMC,EAAaC,EADnBpW,EAAS,GAEb,OAAQxB,KAAK6C,SAAS4U,UAClB,KAAK,EACDE,EAAc,EACdC,EAAc,CAAC,EAAG,GAClBF,EAAO,CACHpG,EAAK,GAAG,GACRA,EAAK,GAAG,GACRA,EAAK,GAAG,GACRA,EAAK,GAAG,IAEZ,MACJ,KAAK,EACDoG,EAAOpG,EAAK,GACZqG,EAAc,EACdC,EAAc,EAAE,EAAG,GACnB,MACJ,KAAK,EACDF,EAAOpG,EAAK,GACZqG,EAAc,EACdC,EAAc,EAAE,EAAG,GACnB,MACJ,QACI,MAAM,IAAIjP,MAAM,0CAIxB,IAAItE,EAAIoC,EAAKmR,EAAY,GAAKzW,EAC1BmD,EAAIoC,EAAKkR,EAAY,GAAKzW,EAE9B,IAAK,IAAIsE,EAAI,EAAGA,EAAIiS,EAAKnW,OAAQkE,IAC7B,IAAK,IAAIoS,EAAI,EAAGA,EAAI1W,EAAIwW,EAAaE,IACjCrW,EAAOM,KAAK,CAACuC,EAAGC,IAChBD,GAAKqT,EAAKjS,GAAG,GACbnB,GAAKoT,EAAKjS,GAAG,GAGrB,OAAOjE,GCzDf,MCCA,ECEe,cAAmC8V,EAC9C,QAAQjT,EAAGC,EAAGwT,EAAGC,GAIb,GAFAA,EAAS1T,EAAGC,EAAG,EAAG,IAEbtE,KAAKwX,aAAanT,EAAGC,GACtB,OAGJ,IACImC,EAAIC,EAAIsR,EAAQC,EAAIC,EAAIC,EADxBC,EAAU,GAGd,IAAK,IAAIjX,EAAI,EAAGA,GAAK2W,EAAG3W,IAAK,CACzB,IAAIkX,EAAYrY,KAAKsY,WAAWjU,EAAGC,EAAGnD,GAClCoX,EAAgBF,EAAU9W,OAC9B,IAAK,IAAIkE,EAAI,EAAGA,EAAI8S,EAAe9S,IAW/B,GAVAgB,EAAK4R,EAAU5S,GAAG,GAClBiB,EAAK2R,EAAU5S,GAAG,GAElBwS,EAAK,CAACxS,EAAI,EAAIA,EAAI,EAAI,EAAI8S,EAAgB,EAAG,EAAIA,GACjDL,EAAK,CAAC,EAAIzS,EAAI,EAAG,EAAI8S,GACrBP,GAAUhY,KAAKwX,aAAa/Q,EAAIC,GAChCyR,EAAanY,KAAKwY,iBAAiBP,EAAIC,EAAIF,EAAQI,GAC/CD,GACAJ,EAAStR,EAAIC,EAAIvF,EAAGgX,GAEF,GAAlBC,EAAQ7W,QAAgC,GAAjB6W,EAAQ,GAAG,IAAWA,EAAQ,GAAG,IAAMA,EAAQ,GAAG,GACzE,QAWhB,iBAAiBH,EAAIC,EAAIF,EAAQI,GAC7B,GAAIH,EAAG,GAAKC,EAAG,GAGX,OAFSlY,KAAKwY,iBAAiBP,EAAI,CAACA,EAAG,GAAIA,EAAG,IAAKD,EAAQI,GAClDpY,KAAKwY,iBAAiB,CAAC,EAAG,GAAIN,EAAIF,EAAQI,IAChC,EAGvB,IAAIK,EAAS,EAAGC,GAAQ,EACxB,KAAOD,EAASL,EAAQ7W,QAAQ,CAC5B,IAAIoX,EAAMP,EAAQK,GACdG,EAAOD,EAAI,GAAKV,EAAG,GAAKA,EAAG,GAAKU,EAAI,GACxC,GAAIC,GAAQ,EAAG,CACC,GAARA,GAAeH,EAAS,IACxBC,GAAQ,GAEZ,MAEJD,IAGJ,IAAII,EAAST,EAAQ7W,OAAQuX,GAAQ,EACrC,KAAOD,KAAU,CACb,IAAIF,EAAMP,EAAQS,GACdD,EAAOV,EAAG,GAAKS,EAAI,GAAKA,EAAI,GAAKT,EAAG,GACxC,GAAIU,GAAQ,EAAG,CACC,GAARA,GAAcC,EAAS,IACvBC,GAAQ,GAEZ,OAGR,IAaIC,EAbAC,GAAU,EAUd,IATIP,GAAUI,IAAWH,GAASI,IAGzBJ,GAASI,GAASL,EAAS,GAAKI,GAAWA,EAAS,GAGpDJ,EAASI,GAAWJ,EAAS,KALlCO,GAAU,IAQTA,EACD,OAAO,EAIX,IAAItC,EAASmC,EAASJ,EAAS,EAC/B,GAAI/B,EAAS,EACT,GAAI+B,EAAS,EAAG,CACZ,IAAIQ,EAAIb,EAAQK,GAChBM,GAAiBb,EAAG,GAAKe,EAAE,GAAKA,EAAE,GAAKf,EAAG,KAAOe,EAAE,GAAKf,EAAG,IACvDF,GACAI,EAAQrW,OAAO0W,EAAQ/B,EAAQwB,OAGlC,CACD,IAAIe,EAAIb,EAAQS,GAChBE,GAAiBE,EAAE,GAAKhB,EAAG,GAAKA,EAAG,GAAKgB,EAAE,KAAOhB,EAAG,GAAKgB,EAAE,IACvDjB,GACAI,EAAQrW,OAAO0W,EAAQ/B,EAAQuB,OAItC,CACD,KAAIQ,EAAS,GAYT,OAHIT,GACAI,EAAQrW,OAAO0W,EAAQ/B,EAAQuB,EAAIC,GAEhC,EAZK,CACZ,IAAIgB,EAAKd,EAAQK,GACbU,EAAKf,EAAQS,GACjBE,GAAiBI,EAAG,GAAKD,EAAG,GAAKA,EAAG,GAAKC,EAAG,KAAOD,EAAG,GAAKC,EAAG,IAC1DnB,GACAI,EAAQrW,OAAO0W,EAAQ/B,IAWnC,OAAOqC,IADUb,EAAG,GAAKD,EAAG,GAAKA,EAAG,GAAKC,EAAG,KAAOD,EAAG,GAAKC,EAAG,OCvHpDvX,KAAKS,KAAK,GACZT,KAAKS,KAAK,GCKX,MAAMgY,EACjB,YAAYC,EAAKC,EAAKC,EAAkB3W,EAAU,IAC9C5C,KAAKwZ,KAAOH,EACZrZ,KAAKyZ,KAAOH,EACZtZ,KAAK0Z,kBAAoBH,EACzBvZ,KAAK6C,SAAWmP,OAAOC,OAAO,CAC1BwF,SAAU,GACX7U,GACH5C,KAAK2Z,MAAQrI,EAAKtR,KAAK6C,SAAS4U,UACF,GAA1BzX,KAAK6C,SAAS4U,WACdzX,KAAK2Z,MAAQ,CACT3Z,KAAK2Z,MAAM,GACX3Z,KAAK2Z,MAAM,GACX3Z,KAAK2Z,MAAM,GACX3Z,KAAK2Z,MAAM,GACX3Z,KAAK2Z,MAAM,GACX3Z,KAAK2Z,MAAM,GACX3Z,KAAK2Z,MAAM,GACX3Z,KAAK2Z,MAAM,KAIvB,cAAclT,EAAIC,GACd,IAAIlF,EAAS,GACb,IAAK,IAAIiE,EAAI,EAAGA,EAAIzF,KAAK2Z,MAAMpY,OAAQkE,IAAK,CACxC,IAAImU,EAAM5Z,KAAK2Z,MAAMlU,GACjBpB,EAAIoC,EAAKmT,EAAI,GACbtV,EAAIoC,EAAKkT,EAAI,GACZ5Z,KAAK0Z,kBAAkBrV,EAAGC,IAG/B9C,EAAOM,KAAK,CAACuC,EAAGC,IAEpB,OAAO9C,GCxCf,QCIe,cAAuB4X,EAClC,YAAYC,EAAKC,EAAKC,EAAkB3W,GACpCG,MAAMsW,EAAKC,EAAKC,EAAkB3W,GAClC5C,KAAK6Z,UAAY,GACjB7Z,KAAK8Z,MAAQ,GACb9Z,KAAK+Z,KAAKV,EAAKC,EAAK,MAMxB,QAAQU,EAAOC,EAAOlC,GAClB,IAAI9E,EAAM+G,EAAQ,IAAMC,EAIxB,GAHMhH,KAAOjT,KAAK6Z,WACd7Z,KAAKka,SAASF,EAAOC,KAEnBhH,KAAOjT,KAAK6Z,WACd,OAEJ,IAAI7C,EAAOhX,KAAK6Z,UAAU5G,GAC1B,KAAO+D,GACHe,EAASf,EAAK3S,EAAG2S,EAAK1S,GACtB0S,EAAOA,EAAKmD,KAMpB,SAASH,EAAOC,GACZ,KAAOja,KAAK8Z,MAAMvY,QAAQ,CACtB,IAAIyV,EAAOhX,KAAK8Z,MAAM5F,QACtB,GAAI8C,EAAK3S,GAAK2V,GAAShD,EAAK1S,GAAK2V,EAC7B,OAEJ,IAAI5B,EAAYrY,KAAKoa,cAAcpD,EAAK3S,EAAG2S,EAAK1S,GAChD,IAAK,IAAImB,EAAI,EAAGA,EAAI4S,EAAU9W,OAAQkE,IAAK,CACvC,IAAI4U,EAAWhC,EAAU5S,GACrBpB,EAAIgW,EAAS,GACb/V,EAAI+V,EAAS,GACRhW,EAAI,IAAMC,KACTtE,KAAK6Z,WAGf7Z,KAAK+Z,KAAK1V,EAAGC,EAAG0S,KAI5B,KAAK3S,EAAGC,EAAG6V,GACP,IAAIG,EAAM,CACNjW,EAAGA,EACHC,EAAGA,EACH6V,KAAMA,GAEVna,KAAK6Z,UAAUxV,EAAI,IAAMC,GAAKgW,EAC9Bta,KAAK8Z,MAAMhY,KAAKwY,KCzDXC,EAAQ,QAMRC,EAAW,UACXC,EAAYF,ECPlB,MAAMG,EAKZ,YAAYC,EAAcC,EAAiBC,GAC1C7a,KAAK2a,KAAOA,EACZ3a,KAAK4a,QAAUA,EACf5a,KAAK6a,QAAUA,GAIV,MAAMC,EAMZ,YAAYC,EAAmBC,EAAsBC,EAAyBC,GAC7Elb,KAAK+a,SAAWA,EAChB/a,KAAKgb,YAAcA,EACnBhb,KAAKib,SAAWA,EAChBjb,KAAKkb,UAAYA,GAIZ,MAAMC,EAAiB,IAAIT,EAAc,IAAU,UAAW,SAEhD,IAAII,GAAQ,GAAM,EACtC,IAAIJ,EAAc,IAAK,EDzBC,WC0BxB,IAAIA,EAAc,IAAK,EDzBE,YC4BN,IAAII,GAAQ,GAAO,EACtC,IAAIJ,EAAc,IAAK,EAAiB,GACxC,IAAIA,EAAc,IAAK,EAAkB,ICtCnC,MAAMU,EAIZ,cACCpb,KAAKqb,WAAa,GAClBrb,KAAKsb,UAAY,GAGV,OACPtb,KAAKsb,UAAUxZ,KAAK,IAAIyZ,SAAQC,IAC/Bxb,KAAKqb,WAAWvZ,KAAK0Z,OAIvB,QAAQjb,GACFP,KAAKqb,WAAW9Z,QACpBvB,KAAK+Z,OAEU/Z,KAAKqb,WAAWnH,OAChCsH,CAAQjb,GAGT,UAKC,OAJKP,KAAKsb,UAAU/Z,QACnBvB,KAAK+Z,OAEU/Z,KAAKsb,UAAUpH,QAIhC,UACC,OAAQlU,KAAKsb,UAAU/Z,OAGxB,YACC,QAASvB,KAAKqb,WAAW9Z,OAG1B,aACC,OAAOvB,KAAKsb,UAAU/Z,OAASvB,KAAKqb,WAAW9Z,QAW1C,MAAMka,GAsBN,SAASC,EAAa9a,EAAY,EAAGF,GAC3C,OAAOC,KAAKE,MAAMF,KAAKwB,UAAYzB,EAAME,EAAM,GAAKA,GChE9C,MAAM,EAYZ,YAAY0M,EAAcqO,EAAexX,EAAeC,EAAgBwX,GANxE,KAAAC,SAAwB,IAAIC,IAO3B9b,KAAKsN,KAAOA,EACZtN,KAAK2b,MAAQA,EACb3b,KAAKmE,MAAQA,EACbnE,KAAKoE,OAASA,EACdpE,KAAK4b,MAAQA,EAEb5b,KAAKgZ,QAAU,GACfhZ,KAAK+b,SAAW,GAChB,IAAK,IAAI1X,EAAI,EAAGA,EAAIF,EAAOE,IAAK,CAC/BrE,KAAKgZ,QAAQlX,KAAK,IAClB9B,KAAK+b,SAASja,KAAK,IACnB,IAAK,IAAIwC,EAAE,EAAGA,EAAIF,EAAQE,IACzBtE,KAAKgZ,QAAQ3U,GAAGvC,MAAK,GAEpB9B,KAAK+b,SAAS1X,GAAGvC,MAAK,IAO1B,cACC,OAAOnB,KAAKE,OC7Ca,GD6CQb,KAAKmE,OAAS,GAEhD,cACC,OAAOxD,KAAKE,OC/Cc,GD+CQb,KAAKoE,QAAU,GAIlD,eACC,IAAK,IAAIC,EAAI,EAAGA,EAAIrE,KAAKmE,MAAOE,IAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAItE,KAAKoE,OAAQE,IAChCtE,KAAKgZ,QAAQ3U,GAAGC,IAAK,EAMxB,MAAMuF,EAAWxF,EAAWC,GAC3BuF,EAAExF,EAAIA,EACNwF,EAAEvF,EAAIA,EAGNtE,KAAK6b,SAASzE,IAAIvN,GAGnB,SAASxF,EAAWC,GACnB,OAAQ,GAAKD,GAAKA,EAAIrE,KAAKmE,OAAS,GAAKG,GAAKA,EAAItE,KAAKoE,OAIxD,WAAWC,EAAWC,GACrB,IAAK,IAAIuF,KAAK7J,KAAK6b,SAClB,GAAIhS,EAAExF,GAAKA,GAAKwF,EAAEvF,GAAKA,GAAMuF,aAAamS,IAAWnS,EAAO,MAC3D,OAAOA,EAGT,OAAO,KAGR,UAAUxF,EAAWC,GACpB,IAAK,IAAIuF,KAAK7J,KAAK6b,SAClB,GAAIhS,EAAExF,GAAKA,GAAKwF,EAAEvF,GAAKA,GAAMuF,aAAaoS,GACzC,OAAOpS,EAGT,OAAO,KAGR,oBAAoBxF,EAAWC,GAC9B,IAAK,IAAIuF,KAAK7J,KAAK6b,SAClB,GAAIhS,EAAExF,GAAKA,GAAKwF,EAAEvF,GAAKA,GAAKuF,EAAEqS,WAC7B,OAAOrS,EAGT,OAAO,KAIR,cAAcxF,EAAWC,GACxB,IAAI9C,EAAmB,GAEvB,IAAK,IAAIqI,KAAK7J,KAAK6b,SACdhS,EAAExF,GAAKA,GAAKwF,EAAEvF,GAAKA,GACtB9C,EAAOM,KAAK+H,GAGd,OAAOrI,EAGR,YAAY2a,GACX,IAAI9X,EACAC,EAEJ,KACCD,EAAIqX,EAAa,EAAG1b,KAAKmE,MAAQ,GACjCG,EAAIoX,EAAa,EAAG1b,KAAKoE,OAAS,IAE9BpE,KAAK4b,MAAMvX,GAAGC,GAAGyW,UAAc/a,KAAKoc,oBAAoB/X,EAAGC,KAIhEtE,KAAKqc,MAAMF,EAAQ9X,EAAGC,I,IEtHbgY,EAINC,EAoFAC,E,sSAvFMC,EAAW,IAAIhB,EAqBnB,SAAeiB,EAASC,EAAkBC,G,yCAGhD,IAAIC,EACJ,OAHA1G,QAAQ9U,IAAI,YAAYsb,MAGhBC,GACP,KAAKL,EAASO,WACbD,EAAgBE,EAChB,MACD,KAAKR,EAASS,IACbH,EAAgBI,EAChB,MACD,QACCJ,EAAgB,KAGlB,aAAaK,MAAM,UAAcP,KAAYQ,MAAKC,GAC1CA,EAAIlK,OAAOiK,MAAKjK,GAAQ2J,EAAc3J,UAM/C,SAAS6J,EAAgB7J,GACxB,IAAImK,EAAW,IAAI5B,EACfrI,EAAkBF,EAAK1J,MAAM,MAEjC,IAAK,IAAI8T,KAAQlK,EAChB,IAAKkK,EAAKC,WAAW,MAAwB,IAAfD,EAAKrO,OAI5B,CACN,IAAI6B,EAASwM,EAAK9T,MAAM,KACxB,GAAqB,GAAjBsH,EAAOvP,OAAa,CACvB4U,QAAQ9U,IAAI,wCACZ8U,QAAQ9U,IAAI,IAAIic,MAChB,SAGD,IAAIhQ,EAAOwD,EAAO,GACdiK,EAAuC,QAA3BjK,EAAO,GAAG0M,cACtBxC,EAA0C,QAA3BlK,EAAO,GAAG0M,cACzBC,EAAW3M,EAAO,GAClB4M,EAAc5M,EAAO,GACrB6M,EAAc7M,EAAO,GACrB8M,EAAY9M,EAAO,GACnB+M,EAAe/M,EAAO,GACtBgN,EAAehN,EAAO,GAItBiN,EAAa,IAAIjD,EACpBC,EACAC,EACA,IAAIN,EAAc+C,EAAUC,EAAaC,GACzC,IAAIjD,EAAckD,EAAWC,EAAcC,IAG5CT,EAAS/P,GAAQyQ,EAInB,OAAOV,EAYR,SAASJ,EAAU/J,GAClB,IACIpC,EACAkN,EAEAC,EACArC,EACAsC,EANA9K,EAAkBF,EAAK1J,MAAM,MAG7B2U,EAAe,IAAI1C,EAMvB,IAAK,IAAI6B,KAAQlK,EAChB,IAAKkK,EAAKC,WAAW,MAAwB,IAAfD,EAAKrO,OAI5B,GAAiC,SAA7BqO,EAAKrO,OAAOuO,cAA0B,CAEhD,GAAIS,EAAU,CACb,IAAI3U,EAAM8U,EAAQH,EAAUrC,EAAOsC,GAC/B5U,IACHmT,EAASnT,EAAIgE,MAAQhE,GAGvB2U,EAAW,IAAIxC,EACfG,EAAQ,GACRsC,EAAQ,QAEF,GAAIZ,EAAKC,WAAW,KAAM,CAChC,IAAIc,EAAcf,EAAKjM,UAAU,GAAGpC,OAAOuO,cACvB,aAAhBa,EACHL,EAAcxB,EAAW8B,SACD,kBAAhBD,EACRL,EAAcxB,EAAW+B,aACD,cAAhBF,EACRL,EAAcxB,EAAWgC,SACD,cAAhBH,EACRL,EAAcxB,EAAWiC,SACD,cAAhBJ,EACRL,EAAcxB,EAAWkC,SAEzBvI,QAAQ9U,IAAI,4BAA4Bgd,UAGzC,OAAQL,GACP,KAAK,KACJ7H,QAAQ9U,IAAI,yCACZ8U,QAAQ9U,IAAIic,GACZ,MAED,KAAKd,EAAW8B,SACf,GAAKhB,EAAKqB,SAAS,KAGZ,CACN,IAAI7N,EAASwM,EAAK9T,MAAM,KACxByU,EAASnN,EAAO,IAAMA,EAAO,QAJ7BqF,QAAQ9U,IAAI,wBACZ8U,QAAQ9U,IAAIic,GAKb,MAED,KAAKd,EAAW+B,aACf,GAAKjB,EAAKqB,SAAS,KAGZ,CACN,IAAI7N,EAASwM,EAAK9T,MAAM,KACpBoV,EAAQ9N,EAAO,GACf+N,EAAQ/N,EAAO,GACb+N,KAASvC,EAId6B,EAAaS,GAAStC,EAAYuC,IAHlC1I,QAAQ9U,IAAI,wBAAwBwd,MACpC1I,QAAQ9U,IAAIic,SARbnH,QAAQ9U,IAAI,4BACZ8U,QAAQ9U,IAAIic,GAYb,MAED,KAAKd,EAAWgC,SACf1N,EAASwM,EAAK9T,MAAM,KACpB,IAAIsV,EAAqB,GACrBC,GAAQ,EAEZ,IAAK,IAAIxe,KAAKuQ,EAAQ,CACrB,KAAMvQ,KAAK4d,GAAe,CACzBhI,QAAQ9U,IAAI,6BAA6Bd,MACzCwe,GAAQ,EACR,MAEAD,EAAQhd,KAAKqc,EAAa5d,IAIxBwe,GACHnD,EAAM9Z,KAAKgd,GAGZ,MAED,KAAKtC,EAAWiC,SAEf,MAED,KAAKjC,EAAWkC,SAGf,GADA5N,EAASwM,EAAK9T,MAAM,KACC,GAAjBsH,EAAOvP,OACV4U,QAAQ9U,IAAI,8BAA8Bic,UACpC,CACN,IAAIhQ,EAAQwD,EAAO,GACfkO,GAASlO,EAAO,GAChBmO,GAASnO,EAAO,GAChB6J,EAAQ7J,EAAO,GACf3B,EAAQ2B,EAAO,GACfoO,EAAYpO,EAAO,GACnBqO,EAAUrO,EAAO,GAET,IAAR6J,IACHA,EAAO,MACK,IAATxL,IACHA,EAAQ,MACQ,IAAb+P,IACHA,EAAY,MAEb,IAAIE,EAAO,IAAInD,GAAK3O,EAAMqN,EAAMxL,EAAO+P,EAAWC,GAClDC,EAAK/a,EAAI2a,EACTI,EAAK9a,EAAI2a,EACTf,EAAMpc,KAAKsd,IAWhB,IAAI9V,EAAM8U,EAAQH,EAAUrC,EAAOsC,GAC/B5U,IACHmT,EAASnT,EAAIgE,MAAQhE,GAIvB,SAAS8U,EAAQH,EAA8BrC,EAAoBsC,GAElE,IAAImB,EAA8B,CAAC,OAAQ,QAAS,UACpD,IAAK,IAAIC,KAAMD,EACd,KAAMC,KAAMrB,GAEX,OADA9H,QAAQ9U,IAAI,kCAAkCie,MACvC,KAIT,IAAIH,EAAUlB,EAAe,KACzBsB,EAAWtB,EAAgB,MAC1BsB,IACJA,EAAWJ,GACZ,IAAIK,GAAKvB,EAAgB,MACrBwB,GAAKxB,EAAiB,OAE1B,GAAIrC,EAAMra,QAAUke,EAEnB,OADAtJ,QAAQ9U,IAAI,4CAA4Cua,EAAMra,qBAAqBke,KAC5E,KAGR,IAAK,IAAIX,KAAWlD,EACnB,GAAIkD,EAAQvd,QAAUie,EAErB,OADArJ,QAAQ9U,IAAI,4CAA4Cyd,EAAQvd,qBAAqBie,KAC9E,KAIT,IAAIlW,EAAM,IAAI,EAAQ6V,EAASI,EAAUC,EAAGC,EAc7C,SAAsBC,GACrB,IAAItC,EAAa,GAEjB,IAAK,IAAI/Y,EAAI,EAAGA,EAAIqb,EAAK,GAAGne,OAAQ8C,IAAK,CACxC+Y,EAAItb,KAAK,IACT,IAAK,IAAIwC,EAAI,EAAGA,EAAIob,EAAKne,OAAQ+C,IAChC8Y,EAAI/Y,GAAGvC,KAAK4d,EAAKpb,GAAGD,IAItB,OAAO+Y,EAxBwChY,CAAmBwW,IAElE,IAAK,IAAIwD,KAAQlB,EAChBkB,EAAK1J,OAASpM,EACdA,EAAIuS,SAASzE,IAAIgI,GAMlB,MAHI,cAAenB,GAAY,cAAeA,IAC7C3U,EAAIqW,YAAc,EAAE1B,EAAoB,WAAIA,EAAoB,YAE1D3U,GAjRR,SAAKiT,GACJ,+BACA,iBAFD,CAAKA,MAAQ,KAoFb,SAAKC,GACJ,2BACA,mCACA,2BACA,2BACA,2BALD,CAAKA,MAAU,KCrFR,MAAe,EAIrB,YAAYoD,EAAgBC,GAC3B7f,KAAK4f,OAASA,EACd5f,KAAK6f,MAAQA,GAMR,MAAMC,UAAmB,EAC/B,UAKC,OAHI9f,KAAK4f,OAAOtW,IAAI0P,QAAQhZ,KAAK6f,MAAMxb,GAAGrE,KAAK6f,MAAMxb,IACpDrE,KAAK4f,OAAOG,WAAWC,WAAWhgB,KAAK6f,MAAMvS,KAAO,mBAE9C,CAAE2S,SAAS,IAKb,MAAMC,UAAqB,EACjC,UACC,IAAIC,EAASngB,KAAK6f,MAAMxb,EACpB+b,EAASpgB,KAAK6f,MAAMvb,EACpB+b,EAAYrgB,KAAK6f,MAAMQ,UAE3B,IAAK,IAAIxW,KAAK7J,KAAK4f,OAAOtW,IAAIuS,SAAU,CACvC,KAAMhS,aAAa,IAClB,SAED,IAAImN,EAAanN,EACjB,GAAIsW,GAAUnJ,EAAK3S,GAAK+b,GAAUpJ,EAAK1S,EAGvC,OAAI+b,EAAUC,MAAMha,MAAQ+Z,EAAUE,SAC9B,CAAEN,SAAS,EAAOO,OAAQ,GAAGxgB,KAAK6f,MAAMvS,2BAEhDtN,KAAK4f,OAAOtW,IAAIuS,SAAS4E,OAAOzJ,GAEhCA,EAAKtB,OAAS1V,KAAK6f,MAAMQ,UACzBA,EAAUC,MAAMlJ,IAAIJ,GAEpBhX,KAAK4f,OAAOG,WAAWC,WAAW,GAAGhgB,KAAK6f,MAAMvS,qBAAqB0J,EAAK1J,QACnE,CAAE2S,SAAS,IAInB,MAAO,CAAEA,SAAS,EAAOO,OAAQ,qCAQnC,MAAeE,UAAwB,EAItC,YAAYd,EAAgBC,EAAcxP,EAAYC,GACrDvN,MAAM6c,EAAQC,GACd7f,KAAKqQ,GAAKA,EACVrQ,KAAKsQ,GAAKA,EAIX,aACC,MAAO,CAACtQ,KAAK6f,MAAMxb,EAAIrE,KAAKqQ,GAAIrQ,KAAK6f,MAAMvb,EAAItE,KAAKsQ,IAKrD,kBACC,OAAOtQ,KAAK4f,OAAOtW,IAAIqX,WAAW3gB,KAAK4gB,OAAO,GAAI5gB,KAAK4gB,OAAO,IAI/D,iBACC,OAAO5gB,KAAK4f,OAAOtW,IAAIuX,UAAU7gB,KAAK4gB,OAAO,GAAI5gB,KAAK4gB,OAAO,KAMxD,MAAME,WAAmBJ,EAC/B,UACC,OAAI1gB,KAAK+gB,YACD,IAAKC,GAAYhhB,KAAK4f,OAAQ5f,KAAK6f,MAAO7f,KAAKqQ,GAAIrQ,KAAKsQ,IAAK2Q,UAC5DjhB,KAAKkhB,WACN,IAAKC,GAAenhB,KAAK4f,OAAQ5f,KAAK6f,MAAO7f,KAAKqQ,GAAIrQ,KAAKsQ,IAAK2Q,UAGhE,IAAKG,GAAephB,KAAK4f,OAAQ5f,KAAK6f,MAAO7f,KAAKqQ,GAAIrQ,KAAKsQ,IAAK2Q,WAKnE,MAAMD,WAAoBN,EAChC,UACC,IAAIW,EAASrhB,KAAK+gB,YAClB,IAAKM,EACJ,MAAO,CAAEpB,SAAS,EAAOO,OAAQ,qBAElC,IAGIc,EAHAC,EAASvhB,KAAK6f,MAAM2B,MAAMC,IAAMJ,EAAOG,MAAME,IAC7CC,EAAa,GAAG3hB,KAAK6f,MAAMvS,gBAAgB+T,EAAO/T,OAetD,OAXCgU,EADGthB,KAAK6f,QAAU7f,KAAK4f,OAAOgC,OACnB,gBAEA,eAERL,EAAS,GACZvhB,KAAK4f,OAAOG,WAAWC,WAAW,KAAU2B,SAAkBJ,eAAqBD,GACnFD,EAAOG,MAAMK,IAAMN,GAEnBvhB,KAAK4f,OAAOG,WAAWC,WAAW,KAAU2B,uBAAiCL,GAGvE,CAAErB,SAAS,IAIb,MAAMmB,WAAuBV,EACnC,UACC,IAAKoB,EAAOC,GAAS/hB,KAAK4gB,OAE1B,OAAK5gB,KAAK4f,OAAOtW,IAAI0Y,SAASF,EAAOC,GAGhC/hB,KAAK4f,OAAOtW,IAAIsS,MAAMkG,GAAOC,GAAOhH,SAGrC/a,KAAK4f,OAAOtW,IAAI8S,oBAAoB0F,EAAOC,GACvC,CAAE9B,SAAS,EAAOO,OAAQ,wBAElCxgB,KAAK6f,MAAMoC,KAAKjiB,KAAKqQ,GAAIrQ,KAAKsQ,IACvB,CAAE2P,SAAS,IANV,CAAEA,SAAS,EAAOO,OAAQ,uBAH1B,IAAK0B,GAAcliB,KAAK4f,OAAQ5f,KAAK6f,MAAO7f,KAAKqQ,GAAIrQ,KAAKsQ,IAAK2Q,WAclE,MAAME,WAAuBT,EACnC,UACC,IAAIW,EAASrhB,KAAKkhB,WAClB,OAAKG,GAGLrhB,KAAK4f,OAAOG,WAAWC,WAAW,YAAYqB,EAAO/T,QACrDtN,KAAK6f,MAAMoC,KAAKjiB,KAAKqQ,GAAIrQ,KAAKsQ,IAExB+Q,EAAOlC,WAAW1C,GAExBzc,KAAK4f,OAAOuC,MAAMC,QAAQ3F,EAAS4E,EAAOlC,UAEnC,CAAEc,SAAS,IAHV,CAAEA,SAAS,EAAOO,OAAQ,iBAAiBa,EAAOlC,aANlD,CAAEc,SAAS,EAAOO,OAAQ,qBAa7B,MAAM0B,WAAsBxB,EAClC,UACC,OAAI1gB,KAAK4f,OAAOuC,MAAME,SAAS9gB,OAAS,GACvCvB,KAAK4f,OAAOuC,MAAMG,SAClBtiB,KAAK4f,OAAOG,WAAWC,WAAW,gBAAgBhgB,KAAK4f,OAAOuC,MAAMI,QAAQjV,QACrE,CAAE2S,SAAS,IAEX,CAAEA,SAAS,EAAOO,OAAQ,wBAS7B,MAAegC,WAAmB,EAIxC,YAAYC,EAAc5C,EAAc7I,EAAY0L,GACnD3f,MAAM0f,EAAM5C,GACZ7f,KAAKgX,KAAOA,EAEXhX,KAAK0iB,SADFA,GAGa,CAAC7C,EAAMxb,EAAGwb,EAAMvb,GAIlC,kBACC,OAAOtE,KAAK4f,OAAOtW,IAAIqX,WAAW3gB,KAAK0iB,SAAS,GAAI1iB,KAAK0iB,SAAS,KAO7D,MAAMC,WAAmBH,GAC/B,UACC,OAAIxiB,KAAK6f,MAAMQ,UAAUC,MAAMsC,IAAI5iB,KAAKgX,OACvChX,KAAK6f,MAAMQ,UAAUwC,KAAK7iB,KAAKgX,MAE/BhX,KAAK4f,OAAOG,WAAWC,WAAW,GAAGhgB,KAAK6f,MAAMvS,kBAAkBtN,KAAKgX,KAAK1J,QAErE,CAAE2S,SAAS,IAGX,CAAEA,SAAS,EAAOO,OAAQ,GAAGxgB,KAAK6f,MAAMvS,gCAK3C,MAAMwV,WAAkBN,GAC9B,UACC,GAAIxiB,KAAKgX,KAAK+L,WACb,OAAO/iB,KAAKgX,KAAK+L,WAAWC,IAAIhjB,OAK5B,MAAMijB,WAAoBT,GAChC,UACC,OAAIxiB,KAAKgX,KAAKkM,YACbljB,KAAK6f,MAAMsD,UAAUC,OAAOpjB,KAAKgX,MAC1B,CAAEiJ,SAAS,IAEX,CAAEA,SAAS,EAAOO,OAAQ,gCAM7B,MAAM6C,WAAsB,EAIlC,YAAYzD,EAAgBC,EAAcyD,EAAaC,GACtDxgB,MAAM6c,EAAQC,GACd7f,KAAKsjB,MAAQA,EACbtjB,KAAKujB,MAAQA,EAGd,UACC,OAAIvjB,KAAKsjB,MAAME,YAAcxjB,KAAKujB,MAAMC,WAChCxjB,KAAKsjB,MAAME,WAAWC,QAAQzjB,KAAKujB,MAAMC,YAEzC,CAAEvD,SAAS,EAAOO,OAAQ,qC,2SC5P7B,MAAekD,GAIrB,YAAY9D,EAAgBlK,GAC3B1V,KAAK4f,OAASA,EACd5f,KAAK0V,OAASA,EAOf,UAAUoM,EAAeC,GACxB,IAAIzY,EAAMtJ,KAAK4f,OAAOtW,IAClBqa,EAAyB,GAE7B,IAAK,IAAItf,EAAE,EAAGA,EAAIiF,EAAInF,MAAOE,IAAK,CACjCsf,EAAU7hB,KAAK,IACf,IAAK,IAAIwC,EAAI,EAAGA,EAAIgF,EAAIlF,OAAQE,IAC/Bqf,EAAUtf,GAAGvC,KAAKwH,EAAIsS,MAAMvX,GAAGC,GAAGyW,UAIpC,IAAK,IAAIlR,KAAKP,EAAIuS,UACbhS,EAAEqS,YAAgBrS,IAAM7J,KAAK0V,QAAa7L,EAAExF,GAAKyd,GAASjY,EAAEvF,GAAKyd,IACpE4B,EAAU9Z,EAAExF,GAAGwF,EAAEvF,IAAK,GAGxB,IAIIsf,EAAiC,GAWrC,OANe,IAAI,EAAc9B,EAAOC,GATjB,SAAU1d,EAAWC,GAC3C,OAAOqf,EAAUtf,GAAGC,KAQ4C,MACxDuf,QAAQ7jB,KAAK0V,OAAOrR,EAAGrE,KAAK0V,OAAOpR,GALvB,SAAUD,EAAWC,GACzCsf,EAAW9hB,KAAK,CAACuC,EAAGC,OAOrBsf,EAAW1P,QAEJ0P,GAOF,MAAME,WAAgBJ,GAA7B,c,oBACC,KAAAK,KAA2B,GAErB,e,0CACL5N,QAAQ9U,IAAI,wBACZ,IAAIggB,EAASrhB,KAAK4f,OAAOgC,OAErBvR,EAAKgR,EAAOhd,EAAIrE,KAAK0V,OAAOrR,EAC5BiM,EAAK+Q,EAAO/c,EAAItE,KAAK0V,OAAOpR,EAC5B0f,EAAWrjB,KAAKD,IAAIC,KAAKsjB,IAAI5T,GAAK1P,KAAKsjB,IAAI3T,IAE/C,GAAItQ,KAAK4f,OAAOtW,IAAI0P,QAAQhZ,KAAK0V,OAAOrR,GAAGrE,KAAK0V,OAAOpR,GAAI,CAG1D,GAAI0f,GAAY,EACf,OAAO,IAAIhD,GAAYhhB,KAAK4f,OAAQ5f,KAAK0V,OAAQrF,EAAIC,GAEtDtQ,KAAK+jB,KAAO/jB,KAAKkkB,UAAU7C,EAAOhd,EAAGgd,EAAO/c,GAG7C,GAAItE,KAAK+jB,KAAKxiB,OAAQ,CACrB,IAAKugB,EAAOC,GAAS/hB,KAAK+jB,KAAK7P,QAG/B,OAFAiC,QAAQ9U,IAAI,gCAEL,IAAI+f,GAAephB,KAAK4f,OAAQ5f,KAAK0V,OAC3CoM,EAAQ9hB,KAAK0V,OAAOrR,EAAG0d,EAAQ/hB,KAAK0V,OAAOpR,GAG7C,OAAO,IAAIwb,EAAW9f,KAAK4f,OAAQ5f,KAAK0V,YAKnC,MAAMyO,WAAiBT,GACvB,e,0CACL,OAAO1jB,KAAK4f,OAAOwE,kBAAkBC,c,ICjF3BC,GCRA,GAAAC,GCQAC,GAMA,GAAAC,IFNZ,SAAYH,GACX,mBACA,uBACA,mBACA,qBAJD,CAAYA,QAAW,KAQhB,MAAMI,GAUZ,YAAYpX,EAAcqN,EAAO,IAAKxL,EAAQ,WAAY+M,GAAa,EAAOyI,EAAcL,GAAYM,MACvG5kB,KAAKsN,KAAOA,EACZtN,KAAK2a,KAAOA,EACZ3a,KAAKmP,MAAQA,EACbnP,KAAKkc,WAAaA,EAClBlc,KAAK2kB,YAAcA,EACnB3kB,KAAKqE,EAAI,EACTrE,KAAKsE,EAAI,EAGV,KAAK+L,EAAYC,GAChBtQ,KAAKqE,GAAKgM,EACVrQ,KAAKsE,GAAKgM,GAKL,MAAM0L,WAAc0I,GAO1B,YAAY9E,EAAgBtS,EAAcqN,EAAO,IAAKxL,EAAQ,SAC7DpM,MAAMuK,EAAMqN,EAAMxL,GAAO,EAAMmV,GAAYtI,OAC3Chc,KAAK4f,OAASA,EAGT,M,qCACL,GAAI5f,KAAK6kB,GACR,OAAa,CACZ,IAAIle,QAAU3G,KAAK6kB,GAAGC,eACtB3O,QAAQ9U,IAAI,cAAcsF,EAAEoe,YAAYzX,QAGxC,IAAI0X,EAAere,EAAEsa,UAOrB,GANK+D,EAAa/E,UACjBjgB,KAAK4f,OAAOG,WAAWC,WAAWgF,EAAaxE,OAAS,WACxDxgB,KAAK4f,OAAOqF,SAASC,eAAellB,KAAK4f,OAAOG,aAI7CiF,EAAa/E,WAAajgB,KAAK6kB,cAAcV,IAChD,Q,gSAQE,MAAM,WAAaO,GAMzB,YAAYpX,EAAcqN,EAAO,IAAKxL,EAAQ,SAC7CpM,MAAMuK,EAAMqN,EAAMxL,GAAO,EAAOmV,GAAYM,MAG7C,QAMM,MAAM3I,WAAayI,GAKzB,YAAYpX,EAAcqN,EAAO,IAAKxL,EAAQ,QAAS+P,EAAY,WAAYC,GAC9Epc,MAAMuK,EAAMqN,EAAMxL,GAAO,EAAOmV,GAAYrI,MAC5Cjc,KAAKkf,UAAYA,EACjBlf,KAAKmf,QAAUA,GGtGV,MAAMgG,GASZ,YAAYvF,EAAgBlK,EAAemM,EAAYuD,EAAiBC,GACvErlB,KAAK4f,OAASA,EACd5f,KAAK0V,OAASA,EAEd1V,KAAKslB,MAAQzD,EACb7hB,KAAKulB,IAAM1D,EACX7hB,KAAKolB,QAAUA,EACfplB,KAAKqlB,QAAUA,EAGhB,SACC,OAAOrlB,KAAKulB,IAGb,OAAOC,GACNxlB,KAAKulB,IAAM5kB,KAAKD,IAAI,EAAGC,KAAKC,IAAI4kB,EAAQxlB,KAAKslB,QAC7B,GAAZtlB,KAAKulB,KAAYvlB,KAAK0V,OAAOmP,IAChC7kB,KAAKylB,MAGP,UACC,OAAOzlB,KAAKolB,QAAUplB,KAAK0lB,SAG5B,UACC,OAAO1lB,KAAKqlB,QAAUrlB,KAAK2lB,SAG5B,eACC,OAAI3lB,KAAK0V,OAAOyN,UACRnjB,KAAK0V,OAAOyN,UAAUwC,SAEvB,EAGR,eACC,OAAI3lB,KAAK0V,OAAOyN,UACRnjB,KAAK0V,OAAOyN,UAAUuC,SAEvB,EAGR,KAAKE,GACJ,GAAI5lB,KAAK6hB,IAAM7hB,KAAKslB,MACnB,OAAO,EAER,IAAIO,EAAa7lB,KAAK6hB,GAAK+D,EACvBC,EAAa7lB,KAAKslB,QACrBO,EAAa7lB,KAAKslB,OAEnB,IAAIQ,EAAkBD,EAAa7lB,KAAK6hB,GAIxC,OAFA7hB,KAAK6hB,GAAKgE,EAEHC,EAGR,WAAWF,GACV5lB,KAAK6hB,IAAM+D,EAIZ,MACC,IAAIG,EACAC,EAEAhmB,KAAK4f,OAAOgC,QAAU5hB,KAAK0V,QAC9BqQ,EAAe,aACfC,EAAoB,iBAEpBD,EAAe,KAAU/lB,KAAK0V,OAAOpI,eACrC0Y,EAAoB,eAGrBhmB,KAAK0V,OAAOpI,KAAO,cAActN,KAAK0V,OAAOpI,OAC7CtN,KAAK0V,OAAOiF,KAAO,IACnB3a,KAAK0V,OAAOvG,MX3Ea,UW4EzBnP,KAAK0V,OAAOwG,YAAa,EACzBlc,KAAK0V,OAAOiP,YAAcL,GAAY2B,OACtCjmB,KAAK0V,OAAO8L,MAAQ,KACpBxhB,KAAK0V,OAAOmP,GAAK,KAEjB7kB,KAAK4f,OAAOG,WAAWC,WAAW+F,EAAcC,IC1F3C,MAAM,GAMZ,YAAYpG,EAAgBlK,EAAe6K,GAF3C,KAAAD,MAAQ,IAAIxE,IAGX9b,KAAK4f,OAASA,EACd5f,KAAK0V,OAASA,EACd1V,KAAKugB,SAAWA,EAKjB,KAAKvJ,GACJhX,KAAKsgB,MAAMG,OAAOzJ,GAClBhX,KAAK4f,OAAOtW,IAAI+S,MAAMrF,EAAMhX,KAAK0V,OAAOrR,EAAGrE,KAAK0V,OAAOpR,KHjB7CigB,GAAA,QAAa,KACxB,sBACA,uBAGM,MAAM2B,GAKZ,YAAYtG,EAAgBlK,EAAeyQ,EAAeC,GAF1D,KAAA9F,MAAQ,IAAI7E,EAGXzb,KAAK4f,OAASA,EACd5f,KAAK0V,OAASA,EACVyQ,IACHnmB,KAAKsgB,MAAM,GAAc+F,QAAUF,GAChCC,IACHpmB,KAAKsgB,MAAM,GAAcgG,OAASF,GAGpC,eACC,IAAIG,EAAQ,EAEZ,IAAK,IAAIC,KAAKxmB,KAAKsgB,MAAO,CACzB,IAAIzW,EAAI7J,KAAKsgB,MAAMkG,GACf3c,EAAEqZ,aACLqD,GAAS1c,EAAEqZ,WAAWwC,UAGxB,OAAOa,EAIR,eACC,IAAIA,EAAQ,EAEZ,IAAK,IAAIC,KAAKxmB,KAAKsgB,MAAO,CACzB,IAAIzW,EAAI7J,KAAKsgB,MAAMkG,GACf3c,EAAEqZ,aACLqD,GAAS1c,EAAEqZ,WAAWyC,UAGxB,OAAOY,EAIR,WAAWvP,GACV,IAAK,IAAIwP,KAAKxmB,KAAKsgB,MAElB,GADQtgB,KAAKsgB,MAAMkG,KACTxP,EACT,OAAO,EAGT,OAAO,EAGR,eAAeyP,GACdzmB,KAAK0V,OAAOkK,OAAOG,WAAWC,WAAW,GAAGhgB,KAAK0V,sBAAsB+Q,KAGxE,aAAaA,GACZzmB,KAAK0V,OAAOkK,OAAOG,WAAWC,WAAW,GAAGhgB,KAAK0V,qBAAqB+Q,KAIvE,MAAMC,EAAeC,EAA0B3G,GAC5BhgB,KAAKsgB,MAAMqG,IAG5B3mB,KAAK4mB,QAAQD,EAAW3G,GAEzBhgB,KAAKsgB,MAAMqG,GAAaD,EAEpB1G,GACHhgB,KAAK6mB,aAAaH,EAAQpZ,MAG5B,QAAQqZ,EAA0B3G,GACjC,IAAI8G,EAAc9mB,KAAKsgB,MAAMqG,GAEzBG,GAAe9G,GAClBhgB,KAAK+mB,eAAeD,EAAYxZ,aAE1BtN,KAAKsgB,MAAMqG,GAGnB,OAAO3P,EAAYgJ,GAAsB,GACnChJ,EAAKkM,aAGNljB,KAAKsgB,MAAMtJ,EAAKkM,WAAW8D,iBAAmBhQ,EACjDhX,KAAK4mB,QAAQ5P,EAAKkM,WAAW8D,cAAehH,GAE5ChgB,KAAKinB,MAAMjQ,EAAMA,EAAKkM,WAAW8D,cAAehH,KI5FpC,IAAIvE,EAGA,IAAIA,EHKvB,SAAY+I,GACX,uBACA,iBACA,qBAHD,CAAYA,QAAS,MAMTC,GAAA,QAAQ,KACnB,kCACA,qCACA,mCACA,yCACA,yBACA,qCIpBM,MAAMyC,GAIZ,YAAYtH,GAFZ,KAAAyC,SAAqD,GAGpDriB,KAAK4f,OAASA,EAGf,cACC,OAAK5f,KAAKqiB,SAAS9gB,OAGZvB,KAAKqiB,SAASriB,KAAKqiB,SAAS9gB,OAAO,GAAG+H,IAFrC,KAKT,QAAQ6d,GACHnnB,KAAKqiB,SAAS9gB,SACjBvB,KAAKqiB,SAASriB,KAAKqiB,SAAS9gB,OAAO,GAAQ,IAAI,CAACvB,KAAK4f,OAAOgC,OAAOvd,EAAGrE,KAAK4f,OAAOgC,OAAOtd,IAE1FtE,KAAKqiB,SAASvgB,KAAK,CAAE,IAAOqlB,EAAQ,IAAO,OAC3CnnB,KAAK4f,OAAOtW,IAAM6d,EACdA,EAAOxH,YACVwH,EAAO9K,MAAMrc,KAAK4f,OAAOgC,OAAQuF,EAAOxH,YAAY,GAAIwH,EAAOxH,YAAY,IAE3EwH,EAAOC,YAAYpnB,KAAK4f,OAAOgC,QAGjC,SAEC,GADA5hB,KAAKqiB,SAASzO,OACT5T,KAAKuiB,QACT,KAAM,CACLxY,QAAS,6BACTsd,SAAU,wBACVC,OAAQ,wBAGV,IAAIC,EAAUvnB,KAAKqiB,SAASriB,KAAKqiB,SAAS9gB,OAAO,GAAQ,IACzDvB,KAAKuiB,QAAQlG,MAAMrc,KAAK4f,OAAOgC,OAAQ2F,EAAQ,GAAIA,EAAQ,IAC3DvnB,KAAK4f,OAAOtW,IAAMtJ,KAAKuiB,SCxClB,MAAMiF,GAKZ,YAAYtU,EAAcuU,GACzBznB,KAAK0nB,UAAYxU,EACjBlT,KAAKynB,SAAWA,EAChBznB,KAAK2nB,MAAQ,EAId,eACC,OAAI3nB,KAAK2nB,MAAQ,EACT,GAAG3nB,KAAK0nB,eAAe1nB,KAAK2nB,SAE7B3nB,KAAK0nB,WAKP,MAAME,GAAb,cACC,KAAAC,SAAsB,GAGtB,WAAW3U,EAAcuU,EAAmBK,GAAM,GAC7CA,GAAS9nB,KAAK6nB,SAAStmB,QAAU2R,GAAQlT,KAAK6nB,SAAS7nB,KAAK6nB,SAAStmB,OAAO,GAAGmmB,UAClF1nB,KAAK6nB,SAAS7nB,KAAK6nB,SAAStmB,OAAO,GAAGomB,OAAS,EAE/C3nB,KAAK6nB,SAAS/lB,KAAK,IAAI0lB,GAAQtU,EAAMuU,KCvBjC,MAAeM,GAIrB,YAAYnI,GACX5f,KAAK4f,OAASA,EACd5f,KAAKgoB,cAAgBhoB,KAAKioB,YAAY9V,KAAKnS,OAOtC,MAAMkoB,WAAyBH,GAKrC,YAAYle,GACX,IAAI+V,EAAS5f,KAAK4f,OAEduI,EAAY,KACZC,EAAUve,EAAEwe,KAEhB,GAAIroB,KAAKsoB,iBACR,GAAIC,GAAU3F,IAAIwF,GAAU,CAC3B,IAAII,EAAY,EAEZ3e,EAAE4e,iBAAiB,WACtBD,GAAa,GACV3e,EAAE4e,iBAAiB,aACtBD,GAAa,IACV3e,EAAE4e,iBAAiB,SACtBD,GAAa,IAEd,IAAIvG,EAAOsG,GAAUpR,IAAIiR,IAEpB/jB,EAAGC,GAAKtE,KAAK0oB,eACbrY,EAAIC,GAAM2R,EACf5d,GAAKgM,EAAKmY,EACVlkB,GAAKgM,EAAKkY,EACVnkB,EAAI1D,KAAKD,IAAI,EAAGC,KAAKC,IAAIyD,EAAGrE,KAAK4f,OAAOtW,IAAInF,MAAQ,IACpDG,EAAI3D,KAAKD,IAAI,EAAGC,KAAKC,IAAI0D,EAAGtE,KAAK4f,OAAOtW,IAAIlF,OAAS,IACrDpE,KAAK0oB,cAAgB,CAACrkB,EAAGC,GACzBtE,KAAK4f,OAAOqF,SAAS0D,UAAU3oB,KAAK4f,OAAOtW,IAAKtJ,KAAK0oB,oBAE3CN,KAAWQ,KACjB5oB,KAAK4f,OAAOtW,IAAI0P,QAAQhZ,KAAK0oB,cAAc,IAAI1oB,KAAK0oB,cAAc,KACrE1oB,KAAK4f,OAAOqF,SAAS4D,cACpB7oB,KAAK4f,OAAOtW,IAAIwf,cAAc9oB,KAAK0oB,cAAc,GAAI1oB,KAAK0oB,cAAc,KAE1E1oB,KAAKsoB,iBAAmB,KACxBtoB,KAAK0oB,cAAgB,KACrB1oB,KAAK4f,OAAOqF,SAAS0D,UAAU3oB,KAAK4f,OAAOtW,WAI5C,GAAIif,GAAU3F,IAAIwF,GAAU,CAC3B,IAAInG,EAAOsG,GAAUpR,IAAIiR,GAEzBD,EAAY,IAAIrH,GAAWlB,EAAQA,EAAOgC,OAAQK,EAAK,GAAIA,EAAK,SAE1D,GAAImG,KAAWW,GACrBZ,EAAY,IAAIrI,EAAWF,EAAQA,EAAOgC,aAEpC,GAAe,QAAXwG,EACVD,EAAY,IAAIjI,EAAaN,EAAQA,EAAOgC,aAEtC,GAAe,QAAXwG,EACVpoB,KAAKsoB,iBAAmBF,EACxBpoB,KAAK0oB,cAAgB,CAAC1oB,KAAK4f,OAAOgC,OAAOvd,EAAGrE,KAAK4f,OAAOgC,OAAOtd,GAC/DtE,KAAK4f,OAAOqF,SAAS0D,UAAU3oB,KAAK4f,OAAOtW,IAAKtJ,KAAK0oB,oBAE/C,GAAe,QAAXN,EAAmB,CAC7B,IAAIY,EAAUpJ,EAAOqJ,cAAcC,OAAOtJ,EAAOgC,OAAOvB,UAAWT,EAAOgC,OAAOuB,WAC7EgG,EAAwB,IAAIC,GAAsBxJ,EAAQoJ,GAC9DpJ,EAAOyJ,gBAAgBF,GAEvBlmB,SAASqmB,eAAe,mBAAmBC,MAAMC,QAAU,QAC3DvmB,SAASqmB,eAAe,mBAAmBC,MAAMC,QAAU,QASzDrB,GACHvI,EAAOwE,kBAAkBqF,QAAQtB,IAI7B,MAAMiB,WAA8BrB,GAY1C,YAAYnI,EAAgBoJ,GAC3BjmB,MAAM6c,GAEN5f,KAAKgpB,QAAUA,EAVhB,mBACC,OAAIhpB,KAAK0pB,gBACD1pB,KAAKgpB,QAAQhpB,KAAK0pB,iBAElB,KAST,YAAY7f,GACX,IAEIse,EAFAvI,EAAS5f,KAAK4f,OAGdwI,EAAUve,EAAEwe,KAEhB,GAAe,UAAXD,EACHpoB,KAAK0pB,gBAAkB,KACvB1pB,KAAKsoB,iBAAmB,KACxBtoB,KAAK2pB,kBAEC,GAAK3pB,KAAK0pB,gBAMV,GAAI1pB,KAAKsoB,kBACf,GAAIze,EAAEoJ,OAAOjT,KAAKgpB,QAAS,CAC1B,IAAIY,EAAa5pB,KAAKgpB,QAAQnf,EAAEoJ,KAEH,QAAzBjT,KAAKsoB,mBACRH,EAAY,IAAI9E,GAAczD,EAAQA,EAAOgC,OAC5C5hB,KAAK6pB,aAAcD,SAKP,QAAXxB,EACHD,EAAY,IAAIxF,GAAW/C,EAAQA,EAAOgC,OAAQ5hB,KAAK6pB,cAClC,QAAXzB,EACVD,EAAY,IAAIrF,GAAUlD,EAAQA,EAAOgC,OAAQ5hB,KAAK6pB,cACjC,QAAXzB,GAAgC,QAAXA,EAC/BD,EAAY,IAAIlF,GAAYrD,EAAQA,EAAOgC,OAAQ5hB,KAAK6pB,cACnC,QAAXzB,IACVpoB,KAAKsoB,iBAAmBF,EACxBpoB,KAAK8pB,eAAe,YAvBjBjgB,EAAEoJ,OAAOjT,KAAKgpB,UACjBhpB,KAAK0pB,gBAAkB7f,EAAEoJ,IACzBjT,KAAK8pB,kBAyBH3B,IAEHnoB,KAAK0pB,gBAAkB,KACvB1pB,KAAKsoB,iBAAmB,KACxBtoB,KAAK8pB,iBAELlK,EAAOwE,kBAAkBqF,QAAQtB,GACjCnoB,KAAK2pB,cAKP,eAAe1W,EAAIjT,KAAK0pB,iBACvBvT,QAAQ9U,IAAI,kBAEZ,IAAIsP,EAAO1N,SAAS8mB,iBAAiB,kBACrC,IAAK,IAAIC,KAAOrZ,EACfwF,QAAQ9U,IAAI2oB,EAAIC,cAAc,0BAA0BC,aACxD/T,QAAQ9U,IAAIrB,KAAK0pB,iBAEb1pB,KAAK6pB,cACRG,EAAIC,cAAc,0BAA0BC,aAAe,IAAMjX,EAAM,IACvE+W,EAAIG,UAAU/S,IAAI,aAGlB4S,EAAIG,UAAUzT,OAAO,YACrBsT,EAAIC,cAAc,2BAA2BC,YAAc,IAK9D,aACC,IAAItK,EAAS5f,KAAK4f,OAElBA,EAAOyJ,gBAAgB,IAAInB,GAAiBtI,IAE5CA,EAAOqF,SAAS0D,UAAU/I,EAAOtW,KACjCsW,EAAOqF,SAASmF,YAAYxK,EAAOgC,OAAOJ,OAC1C5B,EAAOqF,SAASC,eAAetF,EAAOG,YACtC9c,SAASqmB,eAAe,mBAAmBC,MAAMC,QAAU,OAC3DvmB,SAASqmB,eAAe,mBAAmBC,MAAMC,QAAU,QAK7D,IAAIjB,GAAY,IAAIvL,IAgCpB,IAAK+L,GAMAH,GCpOL,IAAI,GDgMJL,GAAU8B,IAAI,UAAW,CAAC,GAAI,IAC9B9B,GAAU8B,IAAI,YAAa,CAAC,EAAG,IAC/B9B,GAAU8B,IAAI,YAAa,EAAE,EAAG,IAChC9B,GAAU8B,IAAI,aAAc,CAAC,EAAG,IAChC9B,GAAU8B,IAAI,OAAQ,EAAE,GAAI,IAC5B9B,GAAU8B,IAAI,MAAO,EAAE,EAAG,IAC1B9B,GAAU8B,IAAI,SAAU,CAAC,GAAI,IAC7B9B,GAAU8B,IAAI,WAAY,CAAC,EAAG,IAG9B9B,GAAU8B,IAAI,UAAW,EAAE,EAAG,IAC9B9B,GAAU8B,IAAI,UAAW,CAAC,EAAG,IAC7B9B,GAAU8B,IAAI,UAAW,CAAC,EAAG,IAC7B9B,GAAU8B,IAAI,UAAW,EAAE,EAAG,IAC9B9B,GAAU8B,IAAI,UAAW,CAAC,EAAG,IAC7B9B,GAAU8B,IAAI,UAAW,EAAE,GAAI,IAC/B9B,GAAU8B,IAAI,UAAW,CAAC,GAAI,IAC9B9B,GAAU8B,IAAI,UAAW,CAAC,GAAI,IAa9B,SAAKtB,GACJ,uBACA,yBACA,uBAHD,CAAKA,QAAS,KAMd,SAAKH,GACJ,qBACA,iCAFD,CAAKA,QAAY,KCjOV,MAAM0B,GAEZ,cACM,KA0HN,GAAU,IAAI,EAAY,CACzBnmB,Mb/IyB,GagJzBC,Ob/I0B,GagJ1BR,WAAY,QACZD,SAAU,GACVqE,kBAAkB,EAClB9C,GjBpJ0B,eiBqJ1BjB,GAAI,UAGLhB,SAASqmB,eAAe,WAAWiB,YAAY,GAAQ5X,gBAnIrD,GAqIK,IAlIP,UAAUrJ,EAAckhB,GAEvBvnB,SAASqmB,eAAe,YAAYY,YAAc5gB,EAAIqS,MAEtD,IAAI8O,EAkIN,SAAwBjL,EAAWC,EAAW5D,GAC7C,IAAIuB,EAAkB,GAEtB,IAAK,IAAI/Y,EAAI,EAAGA,EAAImb,EAAGnb,IAAK,CAC3B+Y,EAAI/Y,GAAK,GACT,IAAK,IAAIC,EAAI,EAAGA,EAAImb,EAAGnb,IACtB8Y,EAAItb,KAAK,MASX,OALA+Z,EAASxO,SAAQ,CAACxD,EAAGpE,OACd2X,EAAIvT,EAAExF,GAAGwF,EAAEvF,IAAO8Y,EAAIvT,EAAExF,GAAGwF,EAAEvF,GAAGqgB,YAAc9a,EAAE8a,eACrDvH,EAAIvT,EAAExF,GAAGwF,EAAEvF,GAAKuF,MAGXuT,EAjJYsN,CAAephB,EAAInF,MAAOmF,EAAIlF,OAAQkF,EAAIuS,UAC5D,GAAQpR,QAER,IAAK,IAAIpG,EAAI,EAAGA,EAAIiF,EAAInF,MAAOE,IAC9B,IAAK,IAAIC,EAAI,EAAGA,EAAIgF,EAAIlF,OAAQE,IAAK,CACpC,IAAIqmB,EAGHA,EADGrhB,EAAI0P,QAAQ3U,GAAGC,GACPgF,EAAIsS,MAAMvX,GAAGC,GAAG4W,UACnB5R,EAAIyS,SAAS1X,GAAGC,GACbgF,EAAIsS,MAAMvX,GAAGC,GAAG2W,SAEhBE,EAEZ,IAAIR,EAAOgQ,EAAShQ,KAChBC,EAAU+P,EAAS/P,QACnBC,EAAU8P,EAAS9P,QACnB2P,GAAmBA,EAAgB,IAAMnmB,GAAKmmB,EAAgB,IAAMlmB,IACvEuW,EjBzCwB,UiB2CzB,IAAIhR,EAAI4gB,EAAYpmB,GAAGC,GACvB,GAAIgF,EAAI0P,QAAQ3U,GAAGC,IAAMuF,EACxB8Q,EAAO9Q,EAAE8Q,KACTC,EAAU/Q,EAAEsF,WACN,GAAI7F,EAAIyS,SAAS1X,GAAGC,GAAI,CAC9B,IAAI8a,EAAO9V,EAAIuX,UAAUxc,EAAGC,GACxB8a,IACHzE,EAAOyE,EAAKzE,KACZC,EAAUwE,EAAKF,WAIjB,GAAQzM,KAAKpO,EAAIiF,EAAIshB,QAAStmB,EAAIgF,EAAIuhB,QAASlQ,EAAMC,EAASC,IAKjE,cAAcgB,GACb,IAAIgE,EACAT,EAEA0L,EADAxK,EAAgB,GAGhByK,EAAY9nB,SAASqmB,eAAe,WAGxC,GAFAyB,EAAUb,YAAc,IAEnBrO,EACJ,OAED,IAAK,IAAIhS,KAAKgS,EACThS,aAAamS,GAChB6D,EAAQhW,EACEA,aAAaoS,GACvBmD,EAAOvV,EACGA,aAAa,IACvByW,EAAMxe,KAAK+H,GAITuV,IACH0L,EAAS7nB,SAASC,cAAc,OAChC4nB,EAAOE,UAAY,IAAI5L,EAAK9R,QAC5Byd,EAAUR,YAAYO,IAGnBjL,IACHiL,EAAS7nB,SAASC,cAAc,OAChC4nB,EAAOE,UAAY,GAAGnL,EAAMvS,OAC5Byd,EAAUR,YAAYO,IAGvB,IAAIG,EAAW,GACXC,GAAY,EAChB,IAAK,IAAIlU,KAAQsJ,EACX4K,IACJD,GAAY,MACbA,GAAY,GAAGjU,EAAK1J,OACpB4d,GAAY,EAGbJ,EAAS7nB,SAASC,cAAc,OAChC4nB,EAAOE,UAAYC,EACnBF,EAAUR,YAAYO,GAGvB,eAAe/K,GAEd,IAAIgL,EAAY9nB,SAASqmB,eAAe,gBAGxCyB,EAAUb,YAAc,GAExB,IAAK,IAAIjU,KAAK8J,EAAW8H,SAASnmB,QAAQ2D,UAAW,CACpD,IAAIylB,EAAS7nB,SAASC,cAAc,OAChC+S,EAAEwR,UACLqD,EAAOX,UAAU/S,IAAInB,EAAEwR,UACxBqD,EAAOP,YAAYtnB,SAASkoB,eAAelV,EAAEmV,WAC7CL,EAAUR,YAAYO,IAIxB,YAAYtJ,GAGAve,SAASqmB,eAAe,UAC9BY,YAAc,OAAO1I,EAAMK,QAAQL,EAAM8D,SA4CzC,MAAM+F,GACZ,OAAOhL,EAAsB8C,GAC5B,IAAI6F,EAA4B,GAE5B+B,EAAY9nB,SAASqmB,eAAe,oBAExC,GAA4B,GAAxBjJ,EAAUC,MAAMha,KACnBykB,EAAUC,UAAY,sBAEhB,CACND,EAAUb,YAAc,GAExB,IAAIoB,EAAa,IACbC,EAAYD,EAAW9W,WAAW,GACtC,IAAK,IAAIwC,KAAQqJ,EAAUC,MAAO,CACjC0I,EAAQsC,GAActU,EACtB,IACIwU,EADAC,EAAUzU,EAAK1J,KAGf0J,EAAKkM,WACJC,GAAaA,EAAUuI,WAAW1U,IACrCwU,EAAa,qBACbC,GAAW,eAEXD,EAAa,mBAGdA,EADUxU,EAAKwM,WACF,6BACHxM,EAAK+L,WACF,iBAEA,SAGd,IAAI+H,EAAS7nB,SAASC,cAAc,OACpC4nB,EAAOE,UACL,kEAAuCM,4CACHG,8CACGD,gBAEzCT,EAAUR,YAAYO,GAEtBQ,EAAaK,OAAOC,aAAaL,EAAY,GAC7CA,EAAYD,EAAW9W,WAAW,IAIpC,OAAOwU,GCjNF,MAAM6C,GAeZ,cAXA,KAAAC,OAAkB,GAElB,KAAA/L,WAAa,IAAI6H,GACjB,KAAAmE,UAAY,IAAI,EAChB,KAAA3H,kBAAoB,IAAIhJ,EACxB,KAAA4Q,IAAM,IAAI,EAA6BhsB,KAAKisB,aAAa9Z,KAAKnS,OAC9D,KAAAilB,SAAW,IAAIqF,GACf,KAAArB,cAAgB,IAAIoC,GAKnBlV,QAAQ9U,IAAI,mBACZrB,KAAKqpB,gBAAgB,IAAInB,GAAiBloB,OAC1CA,KAAKksB,kBAELlsB,KAAKmiB,MAAQ,IAAI+E,GAAUlnB,MAE3BA,KAAK4hB,ORTA,SAAmBhC,EAAgBuM,GACzC,IAAIxR,EACAxL,EACA7B,EAEAuU,EACAuD,EACAC,EAEA+G,EAEJ,OAAQD,GACP,KAAK3H,GAAU6H,OACd1R,EAAO,IACPxL,EAAQ,OACR7B,EAAO,SAEPuU,EAAK,GACLuD,EAAU,EACVC,EAAU,EAEV+G,EAAgB,GAEhB,MAED,KAAK5H,GAAU8H,IACd3R,EAAO,IACPxL,EAAQ,UACR7B,EAAO,MAEPuU,EAAK,GACLuD,EAAU,EACVC,EAAU,EAEV+G,EAAgB,EAEhB,MAED,KAAK5H,GAAU+H,MACd5R,EAAO,IACPxL,EAAQ,UACR7B,EAAO,QAEPuU,EAAK,GACLuD,EAAU,EACVC,EAAU,EAEV+G,EAAgB,EAKlB,IAAIvM,EAAQ,IAAI7D,GAAM4D,EAAQtS,EAAMqN,EAAMxL,GAa1C,OAZA0Q,EAAM2B,MAAQ,IAAI2D,GAAMvF,EAAQC,EAAOgC,EAAIuD,EAASC,GAEhD+G,IACHvM,EAAMQ,UAAY,IAAI,GAAUT,EAAQC,EAAOuM,GAC/CvM,EAAMsD,UAAY,IAAI+C,GAAUtG,EAAQC,IAGrCsM,IAAc3H,GAAU6H,OAC3BxM,EAAMgF,GAAK,IAAIV,GAASvE,EAAQC,GAEhCA,EAAMgF,GAAK,IAAIf,GAAQlE,EAAQC,GAEzBA,EQxDQ2M,CAAUxsB,KAAMwkB,GAAU6H,QACxCrsB,KAAKysB,SAASzsB,KAAK4hB,QAEnB5hB,KAAKmiB,MAAMC,QAAQ3F,EAAA,gBAmCnBzc,KAAKgsB,IAAInI,QAAQ7jB,KAAK4hB,OAAOvd,EAAGrE,KAAK4hB,OAAOtd,EdxEnB,EcwEmCtE,KAAK0sB,OAAOva,KAAKnS,OAE7EA,KAAKilB,SAAS0D,UAAU3oB,KAAKsJ,KAC7BtJ,KAAKilB,SAAS4D,gBACd7oB,KAAKilB,SAASmF,YAAYpqB,KAAK4hB,OAAOJ,OAEtCxhB,KAAK+f,WAAWC,WAAW,wBAE3BhgB,KAAKilB,SAASC,eAAellB,KAAK+f,YAInC,SAASF,GACR7f,KAAK8rB,OAAOhqB,KAAK+d,GACjB7f,KAAK+rB,UAAU3U,IAAIyI,GAAO,GAGrB,c,qCAGL,IAAI8M,EAAmB3sB,KAAK+rB,UAAU1U,aACbsV,EAAUC,MAEnC5sB,KAAKsJ,IAAIujB,eACT7sB,KAAKgsB,IAAInI,QAAQ7jB,KAAK4hB,OAAOvd,EAAGrE,KAAK4hB,OAAOtd,EdhGnB,EcgGmCtE,KAAK0sB,OAAOva,KAAKnS,OAE7EA,KAAKilB,SAAS0D,UAAU3oB,KAAKsJ,KAC7BtJ,KAAKilB,SAAS4D,gBACd7oB,KAAKilB,SAASmF,YAAYpqB,KAAK4hB,OAAOJ,OACtCxhB,KAAKilB,SAASC,eAAellB,KAAK+f,a,+RAInC,gBAAgB+M,GACX9sB,KAAK+sB,mBACR9pB,SAAS+pB,KAAKC,oBAAoB,UAAWjtB,KAAK+sB,mBAEnD/sB,KAAK+sB,kBAAoBD,EAAgB9E,cACzC/kB,SAAS+pB,KAAK9iB,iBAAiB,UAAWlK,KAAK+sB,mBAGhD,kBACC9pB,SAAS+pB,KAAK9iB,iBAAiB,YAAalK,KAAKktB,mBAAmB/a,KAAKnS,OAG1E,mBAAmB6J,GAGlB,IACIsjB,EADUlqB,SAASqmB,eAAe,WAClB9kB,wBAGhB4oB,EAAUvjB,EAAEiJ,QAAUqa,EAAM1oB,KAC5B4oB,EAAUxjB,EAAEkJ,QAAUoa,EAAMzoB,IAI5B4oB,EAAS3sB,KAAKE,MAAMusB,EADP,IAC6BptB,KAAKsJ,IAAIshB,QACnD2C,EAAS5sB,KAAKE,MAAMwsB,EAFP,IAE6BrtB,KAAKsJ,IAAIuhB,QAClDyC,GAAU,GAAKA,EdtIK,IcsImBC,GAAU,GAAKA,EdrIjC,IcsIxBvtB,KAAKsJ,IAAI0P,QAAQsU,GAAQC,IAC1BvtB,KAAKilB,SAAS4D,cAAc7oB,KAAKsJ,IAAIwf,cAAcwE,EAAQC,IAK7D,aAAalpB,EAAWC,GACvB,QAAID,EAAI,GAAKA,GAAKrE,KAAKsJ,IAAInF,OAASG,EAAI,GAAKA,GAAKtE,KAAKsJ,IAAIlF,SAGnDpE,KAAKsJ,IAAIsS,MAAMvX,GAAGC,GAAG0W,YAG9B,OAAO3W,EAAWC,EAAWnD,EAAWgX,GACnC9T,EAAI,GAAKA,GAAKrE,KAAKsJ,IAAInF,OAASG,EAAI,GAAKA,GAAKtE,KAAKsJ,IAAIlF,SAG3DpE,KAAKsJ,IAAI0P,QAAQ3U,GAAGC,KAAO6T,EACvBnY,KAAKsJ,IAAI0P,QAAQ3U,GAAGC,KACvBtE,KAAKsJ,IAAIyS,SAAS1X,GAAGC,IAAK,KCzIpB,iBAAkBrB,SAASuqB,gBAcnC1jB,MAAM,qDARP,WACC,IAAI2jB,EAAOziB,OAAO0iB,OAAOvpB,MAAQ6G,OAAO2iB,iBACpCC,EAAO5iB,OAAO0iB,OAAOtpB,OAAS4G,OAAO2iB,iBAEzC,OAAQF,EAPO,MAOWG,EANX,IAWLC,GACV/jB,MAAM,iEAGNkB,OAAO8E,YA9BR,W,2CdUO,W,yCACNwM,QAAoBI,EAAS,eAAgBH,EAASO,YAEtD,MAAMgR,EAAW,CAAE,qBAAsB,uBACzC,IAAIC,EAA4B,GAEhC,IAAK,IAAIC,KAAKF,EACbC,EAASjsB,KAAK4a,EAASsR,EAAGzR,EAASS,MAEpC,OAAOzB,QAAQ0S,IAAIF,MclBbG,GACN,IAAItO,EAAS,IAAIiM,GAEjB,aACOjM,EAAOuO,e,iSAyBc,M","file":"main.js","sourcesContent":["/**\n * This code is an implementation of Alea algorithm; (C) 2010 Johannes Baagøe.\n * Alea is licensed according to the http://en.wikipedia.org/wiki/MIT_License.\n */\nconst FRAC = 2.3283064365386963e-10; /* 2^-32 */\nclass RNG {\n    constructor() {\n        this._seed = 0;\n        this._s0 = 0;\n        this._s1 = 0;\n        this._s2 = 0;\n        this._c = 0;\n    }\n    getSeed() { return this._seed; }\n    /**\n     * Seed the number generator\n     */\n    setSeed(seed) {\n        seed = (seed < 1 ? 1 / seed : seed);\n        this._seed = seed;\n        this._s0 = (seed >>> 0) * FRAC;\n        seed = (seed * 69069 + 1) >>> 0;\n        this._s1 = seed * FRAC;\n        seed = (seed * 69069 + 1) >>> 0;\n        this._s2 = seed * FRAC;\n        this._c = 1;\n        return this;\n    }\n    /**\n     * @returns Pseudorandom value [0,1), uniformly distributed\n     */\n    getUniform() {\n        let t = 2091639 * this._s0 + this._c * FRAC;\n        this._s0 = this._s1;\n        this._s1 = this._s2;\n        this._c = t | 0;\n        this._s2 = t - this._c;\n        return this._s2;\n    }\n    /**\n     * @param lowerBound The lower end of the range to return a value from, inclusive\n     * @param upperBound The upper end of the range to return a value from, inclusive\n     * @returns Pseudorandom value [lowerBound, upperBound], using ROT.RNG.getUniform() to distribute the value\n     */\n    getUniformInt(lowerBound, upperBound) {\n        let max = Math.max(lowerBound, upperBound);\n        let min = Math.min(lowerBound, upperBound);\n        return Math.floor(this.getUniform() * (max - min + 1)) + min;\n    }\n    /**\n     * @param mean Mean value\n     * @param stddev Standard deviation. ~95% of the absolute values will be lower than 2*stddev.\n     * @returns A normally distributed pseudorandom value\n     */\n    getNormal(mean = 0, stddev = 1) {\n        let u, v, r;\n        do {\n            u = 2 * this.getUniform() - 1;\n            v = 2 * this.getUniform() - 1;\n            r = u * u + v * v;\n        } while (r > 1 || r == 0);\n        let gauss = u * Math.sqrt(-2 * Math.log(r) / r);\n        return mean + gauss * stddev;\n    }\n    /**\n     * @returns Pseudorandom value [1,100] inclusive, uniformly distributed\n     */\n    getPercentage() {\n        return 1 + Math.floor(this.getUniform() * 100);\n    }\n    /**\n     * @returns Randomly picked item, null when length=0\n     */\n    getItem(array) {\n        if (!array.length) {\n            return null;\n        }\n        return array[Math.floor(this.getUniform() * array.length)];\n    }\n    /**\n     * @returns New array with randomized items\n     */\n    shuffle(array) {\n        let result = [];\n        let clone = array.slice();\n        while (clone.length) {\n            let index = clone.indexOf(this.getItem(clone));\n            result.push(clone.splice(index, 1)[0]);\n        }\n        return result;\n    }\n    /**\n     * @param data key=whatever, value=weight (relative probability)\n     * @returns whatever\n     */\n    getWeightedValue(data) {\n        let total = 0;\n        for (let id in data) {\n            total += data[id];\n        }\n        let random = this.getUniform() * total;\n        let id, part = 0;\n        for (id in data) {\n            part += data[id];\n            if (random < part) {\n                return id;\n            }\n        }\n        // If by some floating-point annoyance we have\n        // random >= total, just return the last id.\n        return id;\n    }\n    /**\n     * Get RNG state. Useful for storing the state and re-setting it via setState.\n     * @returns Internal state\n     */\n    getState() { return [this._s0, this._s1, this._s2, this._c]; }\n    /**\n     * Set a previously retrieved state.\n     */\n    setState(state) {\n        this._s0 = state[0];\n        this._s1 = state[1];\n        this._s2 = state[2];\n        this._c = state[3];\n        return this;\n    }\n    /**\n     * Returns a cloned RNG\n     */\n    clone() {\n        let clone = new RNG();\n        return clone.setState(this.getState());\n    }\n}\nexport default new RNG().setSeed(Date.now());\n","/**\n * @class Abstract display backend module\n * @private\n */\nexport default class Backend {\n    getContainer() { return null; }\n    setOptions(options) { this._options = options; }\n}\n","import Backend from \"./backend.js\";\nexport default class Canvas extends Backend {\n    constructor() {\n        super();\n        this._ctx = document.createElement(\"canvas\").getContext(\"2d\");\n    }\n    schedule(cb) { requestAnimationFrame(cb); }\n    getContainer() { return this._ctx.canvas; }\n    setOptions(opts) {\n        super.setOptions(opts);\n        const style = (opts.fontStyle ? `${opts.fontStyle} ` : ``);\n        const font = `${style} ${opts.fontSize}px ${opts.fontFamily}`;\n        this._ctx.font = font;\n        this._updateSize();\n        this._ctx.font = font;\n        this._ctx.textAlign = \"center\";\n        this._ctx.textBaseline = \"middle\";\n    }\n    clear() {\n        this._ctx.fillStyle = this._options.bg;\n        this._ctx.fillRect(0, 0, this._ctx.canvas.width, this._ctx.canvas.height);\n    }\n    eventToPosition(x, y) {\n        let canvas = this._ctx.canvas;\n        let rect = canvas.getBoundingClientRect();\n        x -= rect.left;\n        y -= rect.top;\n        x *= canvas.width / rect.width;\n        y *= canvas.height / rect.height;\n        if (x < 0 || y < 0 || x >= canvas.width || y >= canvas.height) {\n            return [-1, -1];\n        }\n        return this._normalizedEventToPosition(x, y);\n    }\n}\n","import Canvas from \"./canvas.js\";\nimport { mod } from \"../util.js\";\n/**\n * @class Hexagonal backend\n * @private\n */\nexport default class Hex extends Canvas {\n    constructor() {\n        super();\n        this._spacingX = 0;\n        this._spacingY = 0;\n        this._hexSize = 0;\n    }\n    draw(data, clearBefore) {\n        let [x, y, ch, fg, bg] = data;\n        let px = [\n            (x + 1) * this._spacingX,\n            y * this._spacingY + this._hexSize\n        ];\n        if (this._options.transpose) {\n            px.reverse();\n        }\n        if (clearBefore) {\n            this._ctx.fillStyle = bg;\n            this._fill(px[0], px[1]);\n        }\n        if (!ch) {\n            return;\n        }\n        this._ctx.fillStyle = fg;\n        let chars = [].concat(ch);\n        for (let i = 0; i < chars.length; i++) {\n            this._ctx.fillText(chars[i], px[0], Math.ceil(px[1]));\n        }\n    }\n    computeSize(availWidth, availHeight) {\n        if (this._options.transpose) {\n            availWidth += availHeight;\n            availHeight = availWidth - availHeight;\n            availWidth -= availHeight;\n        }\n        let width = Math.floor(availWidth / this._spacingX) - 1;\n        let height = Math.floor((availHeight - 2 * this._hexSize) / this._spacingY + 1);\n        return [width, height];\n    }\n    computeFontSize(availWidth, availHeight) {\n        if (this._options.transpose) {\n            availWidth += availHeight;\n            availHeight = availWidth - availHeight;\n            availWidth -= availHeight;\n        }\n        let hexSizeWidth = 2 * availWidth / ((this._options.width + 1) * Math.sqrt(3)) - 1;\n        let hexSizeHeight = availHeight / (2 + 1.5 * (this._options.height - 1));\n        let hexSize = Math.min(hexSizeWidth, hexSizeHeight);\n        // compute char ratio\n        let oldFont = this._ctx.font;\n        this._ctx.font = \"100px \" + this._options.fontFamily;\n        let width = Math.ceil(this._ctx.measureText(\"W\").width);\n        this._ctx.font = oldFont;\n        let ratio = width / 100;\n        hexSize = Math.floor(hexSize) + 1; // closest larger hexSize\n        // FIXME char size computation does not respect transposed hexes\n        let fontSize = 2 * hexSize / (this._options.spacing * (1 + ratio / Math.sqrt(3)));\n        // closest smaller fontSize\n        return Math.ceil(fontSize) - 1;\n    }\n    _normalizedEventToPosition(x, y) {\n        let nodeSize;\n        if (this._options.transpose) {\n            x += y;\n            y = x - y;\n            x -= y;\n            nodeSize = this._ctx.canvas.width;\n        }\n        else {\n            nodeSize = this._ctx.canvas.height;\n        }\n        let size = nodeSize / this._options.height;\n        y = Math.floor(y / size);\n        if (mod(y, 2)) { /* odd row */\n            x -= this._spacingX;\n            x = 1 + 2 * Math.floor(x / (2 * this._spacingX));\n        }\n        else {\n            x = 2 * Math.floor(x / (2 * this._spacingX));\n        }\n        return [x, y];\n    }\n    /**\n     * Arguments are pixel values. If \"transposed\" mode is enabled, then these two are already swapped.\n     */\n    _fill(cx, cy) {\n        let a = this._hexSize;\n        let b = this._options.border;\n        const ctx = this._ctx;\n        ctx.beginPath();\n        if (this._options.transpose) {\n            ctx.moveTo(cx - a + b, cy);\n            ctx.lineTo(cx - a / 2 + b, cy + this._spacingX - b);\n            ctx.lineTo(cx + a / 2 - b, cy + this._spacingX - b);\n            ctx.lineTo(cx + a - b, cy);\n            ctx.lineTo(cx + a / 2 - b, cy - this._spacingX + b);\n            ctx.lineTo(cx - a / 2 + b, cy - this._spacingX + b);\n            ctx.lineTo(cx - a + b, cy);\n        }\n        else {\n            ctx.moveTo(cx, cy - a + b);\n            ctx.lineTo(cx + this._spacingX - b, cy - a / 2 + b);\n            ctx.lineTo(cx + this._spacingX - b, cy + a / 2 - b);\n            ctx.lineTo(cx, cy + a - b);\n            ctx.lineTo(cx - this._spacingX + b, cy + a / 2 - b);\n            ctx.lineTo(cx - this._spacingX + b, cy - a / 2 + b);\n            ctx.lineTo(cx, cy - a + b);\n        }\n        ctx.fill();\n    }\n    _updateSize() {\n        const opts = this._options;\n        const charWidth = Math.ceil(this._ctx.measureText(\"W\").width);\n        this._hexSize = Math.floor(opts.spacing * (opts.fontSize + charWidth / Math.sqrt(3)) / 2);\n        this._spacingX = this._hexSize * Math.sqrt(3) / 2;\n        this._spacingY = this._hexSize * 1.5;\n        let xprop;\n        let yprop;\n        if (opts.transpose) {\n            xprop = \"height\";\n            yprop = \"width\";\n        }\n        else {\n            xprop = \"width\";\n            yprop = \"height\";\n        }\n        this._ctx.canvas[xprop] = Math.ceil((opts.width + 1) * this._spacingX);\n        this._ctx.canvas[yprop] = Math.ceil((opts.height - 1) * this._spacingY + 2 * this._hexSize);\n    }\n}\n","/**\n * Always positive modulus\n * @param x Operand\n * @param n Modulus\n * @returns x modulo n\n */\nexport function mod(x, n) {\n    return (x % n + n) % n;\n}\nexport function clamp(val, min = 0, max = 1) {\n    if (val < min)\n        return min;\n    if (val > max)\n        return max;\n    return val;\n}\nexport function capitalize(string) {\n    return string.charAt(0).toUpperCase() + string.substring(1);\n}\n/**\n * Format a string in a flexible way. Scans for %s strings and replaces them with arguments. List of patterns is modifiable via String.format.map.\n * @param {string} template\n * @param {any} [argv]\n */\nexport function format(template, ...args) {\n    let map = format.map;\n    let replacer = function (match, group1, group2, index) {\n        if (template.charAt(index - 1) == \"%\") {\n            return match.substring(1);\n        }\n        if (!args.length) {\n            return match;\n        }\n        let obj = args[0];\n        let group = group1 || group2;\n        let parts = group.split(\",\");\n        let name = parts.shift() || \"\";\n        let method = map[name.toLowerCase()];\n        if (!method) {\n            return match;\n        }\n        obj = args.shift();\n        let replaced = obj[method].apply(obj, parts);\n        let first = name.charAt(0);\n        if (first != first.toLowerCase()) {\n            replaced = capitalize(replaced);\n        }\n        return replaced;\n    };\n    return template.replace(/%(?:([a-z]+)|(?:{([^}]+)}))/gi, replacer);\n}\nformat.map = {\n    \"s\": \"toString\"\n};\n","import Canvas from \"./canvas.js\";\n/**\n * @class Rectangular backend\n * @private\n */\nlet Rect = /** @class */ (() => {\n    class Rect extends Canvas {\n        constructor() {\n            super();\n            this._spacingX = 0;\n            this._spacingY = 0;\n            this._canvasCache = {};\n        }\n        setOptions(options) {\n            super.setOptions(options);\n            this._canvasCache = {};\n        }\n        draw(data, clearBefore) {\n            if (Rect.cache) {\n                this._drawWithCache(data);\n            }\n            else {\n                this._drawNoCache(data, clearBefore);\n            }\n        }\n        _drawWithCache(data) {\n            let [x, y, ch, fg, bg] = data;\n            let hash = \"\" + ch + fg + bg;\n            let canvas;\n            if (hash in this._canvasCache) {\n                canvas = this._canvasCache[hash];\n            }\n            else {\n                let b = this._options.border;\n                canvas = document.createElement(\"canvas\");\n                let ctx = canvas.getContext(\"2d\");\n                canvas.width = this._spacingX;\n                canvas.height = this._spacingY;\n                ctx.fillStyle = bg;\n                ctx.fillRect(b, b, canvas.width - b, canvas.height - b);\n                if (ch) {\n                    ctx.fillStyle = fg;\n                    ctx.font = this._ctx.font;\n                    ctx.textAlign = \"center\";\n                    ctx.textBaseline = \"middle\";\n                    let chars = [].concat(ch);\n                    for (let i = 0; i < chars.length; i++) {\n                        ctx.fillText(chars[i], this._spacingX / 2, Math.ceil(this._spacingY / 2));\n                    }\n                }\n                this._canvasCache[hash] = canvas;\n            }\n            this._ctx.drawImage(canvas, x * this._spacingX, y * this._spacingY);\n        }\n        _drawNoCache(data, clearBefore) {\n            let [x, y, ch, fg, bg] = data;\n            if (clearBefore) {\n                let b = this._options.border;\n                this._ctx.fillStyle = bg;\n                this._ctx.fillRect(x * this._spacingX + b, y * this._spacingY + b, this._spacingX - b, this._spacingY - b);\n            }\n            if (!ch) {\n                return;\n            }\n            this._ctx.fillStyle = fg;\n            let chars = [].concat(ch);\n            for (let i = 0; i < chars.length; i++) {\n                this._ctx.fillText(chars[i], (x + 0.5) * this._spacingX, Math.ceil((y + 0.5) * this._spacingY));\n            }\n        }\n        computeSize(availWidth, availHeight) {\n            let width = Math.floor(availWidth / this._spacingX);\n            let height = Math.floor(availHeight / this._spacingY);\n            return [width, height];\n        }\n        computeFontSize(availWidth, availHeight) {\n            let boxWidth = Math.floor(availWidth / this._options.width);\n            let boxHeight = Math.floor(availHeight / this._options.height);\n            /* compute char ratio */\n            let oldFont = this._ctx.font;\n            this._ctx.font = \"100px \" + this._options.fontFamily;\n            let width = Math.ceil(this._ctx.measureText(\"W\").width);\n            this._ctx.font = oldFont;\n            let ratio = width / 100;\n            let widthFraction = ratio * boxHeight / boxWidth;\n            if (widthFraction > 1) { /* too wide with current aspect ratio */\n                boxHeight = Math.floor(boxHeight / widthFraction);\n            }\n            return Math.floor(boxHeight / this._options.spacing);\n        }\n        _normalizedEventToPosition(x, y) {\n            return [Math.floor(x / this._spacingX), Math.floor(y / this._spacingY)];\n        }\n        _updateSize() {\n            const opts = this._options;\n            const charWidth = Math.ceil(this._ctx.measureText(\"W\").width);\n            this._spacingX = Math.ceil(opts.spacing * charWidth);\n            this._spacingY = Math.ceil(opts.spacing * opts.fontSize);\n            if (opts.forceSquareRatio) {\n                this._spacingX = this._spacingY = Math.max(this._spacingX, this._spacingY);\n            }\n            this._ctx.canvas.width = opts.width * this._spacingX;\n            this._ctx.canvas.height = opts.height * this._spacingY;\n        }\n    }\n    Rect.cache = false;\n    return Rect;\n})();\nexport default Rect;\n","import Canvas from \"./canvas.js\";\n/**\n * @class Tile backend\n * @private\n */\nexport default class Tile extends Canvas {\n    constructor() {\n        super();\n        this._colorCanvas = document.createElement(\"canvas\");\n    }\n    draw(data, clearBefore) {\n        let [x, y, ch, fg, bg] = data;\n        let tileWidth = this._options.tileWidth;\n        let tileHeight = this._options.tileHeight;\n        if (clearBefore) {\n            if (this._options.tileColorize) {\n                this._ctx.clearRect(x * tileWidth, y * tileHeight, tileWidth, tileHeight);\n            }\n            else {\n                this._ctx.fillStyle = bg;\n                this._ctx.fillRect(x * tileWidth, y * tileHeight, tileWidth, tileHeight);\n            }\n        }\n        if (!ch) {\n            return;\n        }\n        let chars = [].concat(ch);\n        let fgs = [].concat(fg);\n        let bgs = [].concat(bg);\n        for (let i = 0; i < chars.length; i++) {\n            let tile = this._options.tileMap[chars[i]];\n            if (!tile) {\n                throw new Error(`Char \"${chars[i]}\" not found in tileMap`);\n            }\n            if (this._options.tileColorize) { // apply colorization\n                let canvas = this._colorCanvas;\n                let context = canvas.getContext(\"2d\");\n                context.globalCompositeOperation = \"source-over\";\n                context.clearRect(0, 0, tileWidth, tileHeight);\n                let fg = fgs[i];\n                let bg = bgs[i];\n                context.drawImage(this._options.tileSet, tile[0], tile[1], tileWidth, tileHeight, 0, 0, tileWidth, tileHeight);\n                if (fg != \"transparent\") {\n                    context.fillStyle = fg;\n                    context.globalCompositeOperation = \"source-atop\";\n                    context.fillRect(0, 0, tileWidth, tileHeight);\n                }\n                if (bg != \"transparent\") {\n                    context.fillStyle = bg;\n                    context.globalCompositeOperation = \"destination-over\";\n                    context.fillRect(0, 0, tileWidth, tileHeight);\n                }\n                this._ctx.drawImage(canvas, x * tileWidth, y * tileHeight, tileWidth, tileHeight);\n            }\n            else { // no colorizing, easy\n                this._ctx.drawImage(this._options.tileSet, tile[0], tile[1], tileWidth, tileHeight, x * tileWidth, y * tileHeight, tileWidth, tileHeight);\n            }\n        }\n    }\n    computeSize(availWidth, availHeight) {\n        let width = Math.floor(availWidth / this._options.tileWidth);\n        let height = Math.floor(availHeight / this._options.tileHeight);\n        return [width, height];\n    }\n    computeFontSize() {\n        throw new Error(\"Tile backend does not understand font size\");\n    }\n    _normalizedEventToPosition(x, y) {\n        return [Math.floor(x / this._options.tileWidth), Math.floor(y / this._options.tileHeight)];\n    }\n    _updateSize() {\n        const opts = this._options;\n        this._ctx.canvas.width = opts.width * opts.tileWidth;\n        this._ctx.canvas.height = opts.height * opts.tileHeight;\n        this._colorCanvas.width = opts.tileWidth;\n        this._colorCanvas.height = opts.tileHeight;\n    }\n}\n","import { clamp } from \"./util.js\";\nimport RNG from \"./rng.js\";\nexport function fromString(str) {\n    let cached, r;\n    if (str in CACHE) {\n        cached = CACHE[str];\n    }\n    else {\n        if (str.charAt(0) == \"#\") { // hex rgb\n            let matched = str.match(/[0-9a-f]/gi) || [];\n            let values = matched.map((x) => parseInt(x, 16));\n            if (values.length == 3) {\n                cached = values.map((x) => x * 17);\n            }\n            else {\n                for (let i = 0; i < 3; i++) {\n                    values[i + 1] += 16 * values[i];\n                    values.splice(i, 1);\n                }\n                cached = values;\n            }\n        }\n        else if ((r = str.match(/rgb\\(([0-9, ]+)\\)/i))) { // decimal rgb\n            cached = r[1].split(/\\s*,\\s*/).map((x) => parseInt(x));\n        }\n        else { // html name\n            cached = [0, 0, 0];\n        }\n        CACHE[str] = cached;\n    }\n    return cached.slice();\n}\n/**\n * Add two or more colors\n */\nexport function add(color1, ...colors) {\n    let result = color1.slice();\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < colors.length; j++) {\n            result[i] += colors[j][i];\n        }\n    }\n    return result;\n}\n/**\n * Add two or more colors, MODIFIES FIRST ARGUMENT\n */\nexport function add_(color1, ...colors) {\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < colors.length; j++) {\n            color1[i] += colors[j][i];\n        }\n    }\n    return color1;\n}\n/**\n * Multiply (mix) two or more colors\n */\nexport function multiply(color1, ...colors) {\n    let result = color1.slice();\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < colors.length; j++) {\n            result[i] *= colors[j][i] / 255;\n        }\n        result[i] = Math.round(result[i]);\n    }\n    return result;\n}\n/**\n * Multiply (mix) two or more colors, MODIFIES FIRST ARGUMENT\n */\nexport function multiply_(color1, ...colors) {\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < colors.length; j++) {\n            color1[i] *= colors[j][i] / 255;\n        }\n        color1[i] = Math.round(color1[i]);\n    }\n    return color1;\n}\n/**\n * Interpolate (blend) two colors with a given factor\n */\nexport function interpolate(color1, color2, factor = 0.5) {\n    let result = color1.slice();\n    for (let i = 0; i < 3; i++) {\n        result[i] = Math.round(result[i] + factor * (color2[i] - color1[i]));\n    }\n    return result;\n}\nexport const lerp = interpolate;\n/**\n * Interpolate (blend) two colors with a given factor in HSL mode\n */\nexport function interpolateHSL(color1, color2, factor = 0.5) {\n    let hsl1 = rgb2hsl(color1);\n    let hsl2 = rgb2hsl(color2);\n    for (let i = 0; i < 3; i++) {\n        hsl1[i] += factor * (hsl2[i] - hsl1[i]);\n    }\n    return hsl2rgb(hsl1);\n}\nexport const lerpHSL = interpolateHSL;\n/**\n * Create a new random color based on this one\n * @param color\n * @param diff Set of standard deviations\n */\nexport function randomize(color, diff) {\n    if (!(diff instanceof Array)) {\n        diff = Math.round(RNG.getNormal(0, diff));\n    }\n    let result = color.slice();\n    for (let i = 0; i < 3; i++) {\n        result[i] += (diff instanceof Array ? Math.round(RNG.getNormal(0, diff[i])) : diff);\n    }\n    return result;\n}\n/**\n * Converts an RGB color value to HSL. Expects 0..255 inputs, produces 0..1 outputs.\n */\nexport function rgb2hsl(color) {\n    let r = color[0] / 255;\n    let g = color[1] / 255;\n    let b = color[2] / 255;\n    let max = Math.max(r, g, b), min = Math.min(r, g, b);\n    let h = 0, s, l = (max + min) / 2;\n    if (max == min) {\n        s = 0; // achromatic\n    }\n    else {\n        let d = max - min;\n        s = (l > 0.5 ? d / (2 - max - min) : d / (max + min));\n        switch (max) {\n            case r:\n                h = (g - b) / d + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = (b - r) / d + 2;\n                break;\n            case b:\n                h = (r - g) / d + 4;\n                break;\n        }\n        h /= 6;\n    }\n    return [h, s, l];\n}\nfunction hue2rgb(p, q, t) {\n    if (t < 0)\n        t += 1;\n    if (t > 1)\n        t -= 1;\n    if (t < 1 / 6)\n        return p + (q - p) * 6 * t;\n    if (t < 1 / 2)\n        return q;\n    if (t < 2 / 3)\n        return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n}\n/**\n * Converts an HSL color value to RGB. Expects 0..1 inputs, produces 0..255 outputs.\n */\nexport function hsl2rgb(color) {\n    let l = color[2];\n    if (color[1] == 0) {\n        l = Math.round(l * 255);\n        return [l, l, l];\n    }\n    else {\n        let s = color[1];\n        let q = (l < 0.5 ? l * (1 + s) : l + s - l * s);\n        let p = 2 * l - q;\n        let r = hue2rgb(p, q, color[0] + 1 / 3);\n        let g = hue2rgb(p, q, color[0]);\n        let b = hue2rgb(p, q, color[0] - 1 / 3);\n        return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n    }\n}\nexport function toRGB(color) {\n    let clamped = color.map(x => clamp(x, 0, 255));\n    return `rgb(${clamped.join(\",\")})`;\n}\nexport function toHex(color) {\n    let clamped = color.map(x => clamp(x, 0, 255).toString(16).padStart(2, \"0\"));\n    return `#${clamped.join(\"\")}`;\n}\nconst CACHE = {\n    \"black\": [0, 0, 0],\n    \"navy\": [0, 0, 128],\n    \"darkblue\": [0, 0, 139],\n    \"mediumblue\": [0, 0, 205],\n    \"blue\": [0, 0, 255],\n    \"darkgreen\": [0, 100, 0],\n    \"green\": [0, 128, 0],\n    \"teal\": [0, 128, 128],\n    \"darkcyan\": [0, 139, 139],\n    \"deepskyblue\": [0, 191, 255],\n    \"darkturquoise\": [0, 206, 209],\n    \"mediumspringgreen\": [0, 250, 154],\n    \"lime\": [0, 255, 0],\n    \"springgreen\": [0, 255, 127],\n    \"aqua\": [0, 255, 255],\n    \"cyan\": [0, 255, 255],\n    \"midnightblue\": [25, 25, 112],\n    \"dodgerblue\": [30, 144, 255],\n    \"forestgreen\": [34, 139, 34],\n    \"seagreen\": [46, 139, 87],\n    \"darkslategray\": [47, 79, 79],\n    \"darkslategrey\": [47, 79, 79],\n    \"limegreen\": [50, 205, 50],\n    \"mediumseagreen\": [60, 179, 113],\n    \"turquoise\": [64, 224, 208],\n    \"royalblue\": [65, 105, 225],\n    \"steelblue\": [70, 130, 180],\n    \"darkslateblue\": [72, 61, 139],\n    \"mediumturquoise\": [72, 209, 204],\n    \"indigo\": [75, 0, 130],\n    \"darkolivegreen\": [85, 107, 47],\n    \"cadetblue\": [95, 158, 160],\n    \"cornflowerblue\": [100, 149, 237],\n    \"mediumaquamarine\": [102, 205, 170],\n    \"dimgray\": [105, 105, 105],\n    \"dimgrey\": [105, 105, 105],\n    \"slateblue\": [106, 90, 205],\n    \"olivedrab\": [107, 142, 35],\n    \"slategray\": [112, 128, 144],\n    \"slategrey\": [112, 128, 144],\n    \"lightslategray\": [119, 136, 153],\n    \"lightslategrey\": [119, 136, 153],\n    \"mediumslateblue\": [123, 104, 238],\n    \"lawngreen\": [124, 252, 0],\n    \"chartreuse\": [127, 255, 0],\n    \"aquamarine\": [127, 255, 212],\n    \"maroon\": [128, 0, 0],\n    \"purple\": [128, 0, 128],\n    \"olive\": [128, 128, 0],\n    \"gray\": [128, 128, 128],\n    \"grey\": [128, 128, 128],\n    \"skyblue\": [135, 206, 235],\n    \"lightskyblue\": [135, 206, 250],\n    \"blueviolet\": [138, 43, 226],\n    \"darkred\": [139, 0, 0],\n    \"darkmagenta\": [139, 0, 139],\n    \"saddlebrown\": [139, 69, 19],\n    \"darkseagreen\": [143, 188, 143],\n    \"lightgreen\": [144, 238, 144],\n    \"mediumpurple\": [147, 112, 216],\n    \"darkviolet\": [148, 0, 211],\n    \"palegreen\": [152, 251, 152],\n    \"darkorchid\": [153, 50, 204],\n    \"yellowgreen\": [154, 205, 50],\n    \"sienna\": [160, 82, 45],\n    \"brown\": [165, 42, 42],\n    \"darkgray\": [169, 169, 169],\n    \"darkgrey\": [169, 169, 169],\n    \"lightblue\": [173, 216, 230],\n    \"greenyellow\": [173, 255, 47],\n    \"paleturquoise\": [175, 238, 238],\n    \"lightsteelblue\": [176, 196, 222],\n    \"powderblue\": [176, 224, 230],\n    \"firebrick\": [178, 34, 34],\n    \"darkgoldenrod\": [184, 134, 11],\n    \"mediumorchid\": [186, 85, 211],\n    \"rosybrown\": [188, 143, 143],\n    \"darkkhaki\": [189, 183, 107],\n    \"silver\": [192, 192, 192],\n    \"mediumvioletred\": [199, 21, 133],\n    \"indianred\": [205, 92, 92],\n    \"peru\": [205, 133, 63],\n    \"chocolate\": [210, 105, 30],\n    \"tan\": [210, 180, 140],\n    \"lightgray\": [211, 211, 211],\n    \"lightgrey\": [211, 211, 211],\n    \"palevioletred\": [216, 112, 147],\n    \"thistle\": [216, 191, 216],\n    \"orchid\": [218, 112, 214],\n    \"goldenrod\": [218, 165, 32],\n    \"crimson\": [220, 20, 60],\n    \"gainsboro\": [220, 220, 220],\n    \"plum\": [221, 160, 221],\n    \"burlywood\": [222, 184, 135],\n    \"lightcyan\": [224, 255, 255],\n    \"lavender\": [230, 230, 250],\n    \"darksalmon\": [233, 150, 122],\n    \"violet\": [238, 130, 238],\n    \"palegoldenrod\": [238, 232, 170],\n    \"lightcoral\": [240, 128, 128],\n    \"khaki\": [240, 230, 140],\n    \"aliceblue\": [240, 248, 255],\n    \"honeydew\": [240, 255, 240],\n    \"azure\": [240, 255, 255],\n    \"sandybrown\": [244, 164, 96],\n    \"wheat\": [245, 222, 179],\n    \"beige\": [245, 245, 220],\n    \"whitesmoke\": [245, 245, 245],\n    \"mintcream\": [245, 255, 250],\n    \"ghostwhite\": [248, 248, 255],\n    \"salmon\": [250, 128, 114],\n    \"antiquewhite\": [250, 235, 215],\n    \"linen\": [250, 240, 230],\n    \"lightgoldenrodyellow\": [250, 250, 210],\n    \"oldlace\": [253, 245, 230],\n    \"red\": [255, 0, 0],\n    \"fuchsia\": [255, 0, 255],\n    \"magenta\": [255, 0, 255],\n    \"deeppink\": [255, 20, 147],\n    \"orangered\": [255, 69, 0],\n    \"tomato\": [255, 99, 71],\n    \"hotpink\": [255, 105, 180],\n    \"coral\": [255, 127, 80],\n    \"darkorange\": [255, 140, 0],\n    \"lightsalmon\": [255, 160, 122],\n    \"orange\": [255, 165, 0],\n    \"lightpink\": [255, 182, 193],\n    \"pink\": [255, 192, 203],\n    \"gold\": [255, 215, 0],\n    \"peachpuff\": [255, 218, 185],\n    \"navajowhite\": [255, 222, 173],\n    \"moccasin\": [255, 228, 181],\n    \"bisque\": [255, 228, 196],\n    \"mistyrose\": [255, 228, 225],\n    \"blanchedalmond\": [255, 235, 205],\n    \"papayawhip\": [255, 239, 213],\n    \"lavenderblush\": [255, 240, 245],\n    \"seashell\": [255, 245, 238],\n    \"cornsilk\": [255, 248, 220],\n    \"lemonchiffon\": [255, 250, 205],\n    \"floralwhite\": [255, 250, 240],\n    \"snow\": [255, 250, 250],\n    \"yellow\": [255, 255, 0],\n    \"lightyellow\": [255, 255, 224],\n    \"ivory\": [255, 255, 240],\n    \"white\": [255, 255, 255]\n};\n","import Backend from \"./backend.js\";\nimport * as Color from \"../color.js\";\n/**\n * @class Tile backend\n * @private\n */\nexport default class TileGL extends Backend {\n    constructor() {\n        super();\n        this._uniforms = {};\n        try {\n            this._gl = this._initWebGL();\n        }\n        catch (e) {\n            alert(e.message);\n        }\n    }\n    static isSupported() {\n        return !!document.createElement(\"canvas\").getContext(\"webgl2\", { preserveDrawingBuffer: true });\n    }\n    schedule(cb) { requestAnimationFrame(cb); }\n    getContainer() { return this._gl.canvas; }\n    setOptions(opts) {\n        super.setOptions(opts);\n        this._updateSize();\n        let tileSet = this._options.tileSet;\n        if (tileSet && \"complete\" in tileSet && !tileSet.complete) {\n            tileSet.addEventListener(\"load\", () => this._updateTexture(tileSet));\n        }\n        else {\n            this._updateTexture(tileSet);\n        }\n    }\n    draw(data, clearBefore) {\n        const gl = this._gl;\n        const opts = this._options;\n        let [x, y, ch, fg, bg] = data;\n        let scissorY = gl.canvas.height - (y + 1) * opts.tileHeight;\n        gl.scissor(x * opts.tileWidth, scissorY, opts.tileWidth, opts.tileHeight);\n        if (clearBefore) {\n            if (opts.tileColorize) {\n                gl.clearColor(0, 0, 0, 0);\n            }\n            else {\n                gl.clearColor(...parseColor(bg));\n            }\n            gl.clear(gl.COLOR_BUFFER_BIT);\n        }\n        if (!ch) {\n            return;\n        }\n        let chars = [].concat(ch);\n        let bgs = [].concat(bg);\n        let fgs = [].concat(fg);\n        gl.uniform2fv(this._uniforms[\"targetPosRel\"], [x, y]);\n        for (let i = 0; i < chars.length; i++) {\n            let tile = this._options.tileMap[chars[i]];\n            if (!tile) {\n                throw new Error(`Char \"${chars[i]}\" not found in tileMap`);\n            }\n            gl.uniform1f(this._uniforms[\"colorize\"], opts.tileColorize ? 1 : 0);\n            gl.uniform2fv(this._uniforms[\"tilesetPosAbs\"], tile);\n            if (opts.tileColorize) {\n                gl.uniform4fv(this._uniforms[\"tint\"], parseColor(fgs[i]));\n                gl.uniform4fv(this._uniforms[\"bg\"], parseColor(bgs[i]));\n            }\n            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n        }\n        /*\n        \n        \n                for (let i=0;i<chars.length;i++) {\n        \n                    if (this._options.tileColorize) { // apply colorization\n                        let canvas = this._colorCanvas;\n                        let context = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n                        context.globalCompositeOperation = \"source-over\";\n                        context.clearRect(0, 0, tileWidth, tileHeight);\n        \n                        let fg = fgs[i];\n                        let bg = bgs[i];\n        \n                        context.drawImage(\n                            this._options.tileSet!,\n                            tile[0], tile[1], tileWidth, tileHeight,\n                            0, 0, tileWidth, tileHeight\n                        );\n        \n                        if (fg != \"transparent\") {\n                            context.fillStyle = fg;\n                            context.globalCompositeOperation = \"source-atop\";\n                            context.fillRect(0, 0, tileWidth, tileHeight);\n                        }\n        \n                        if (bg != \"transparent\") {\n                            context.fillStyle = bg;\n                            context.globalCompositeOperation = \"destination-over\";\n                            context.fillRect(0, 0, tileWidth, tileHeight);\n                        }\n        \n                        this._ctx.drawImage(canvas, x*tileWidth, y*tileHeight, tileWidth, tileHeight);\n                    } else { // no colorizing, easy\n                        this._ctx.drawImage(\n                            this._options.tileSet!,\n                            tile[0], tile[1], tileWidth, tileHeight,\n                            x*tileWidth, y*tileHeight, tileWidth, tileHeight\n                        );\n                    }\n                }\n        \n        */\n    }\n    clear() {\n        const gl = this._gl;\n        gl.clearColor(...parseColor(this._options.bg));\n        gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n    }\n    computeSize(availWidth, availHeight) {\n        let width = Math.floor(availWidth / this._options.tileWidth);\n        let height = Math.floor(availHeight / this._options.tileHeight);\n        return [width, height];\n    }\n    computeFontSize() {\n        throw new Error(\"Tile backend does not understand font size\");\n    }\n    eventToPosition(x, y) {\n        let canvas = this._gl.canvas;\n        let rect = canvas.getBoundingClientRect();\n        x -= rect.left;\n        y -= rect.top;\n        x *= canvas.width / rect.width;\n        y *= canvas.height / rect.height;\n        if (x < 0 || y < 0 || x >= canvas.width || y >= canvas.height) {\n            return [-1, -1];\n        }\n        return this._normalizedEventToPosition(x, y);\n    }\n    _initWebGL() {\n        let gl = document.createElement(\"canvas\").getContext(\"webgl2\", { preserveDrawingBuffer: true });\n        window.gl = gl;\n        let program = createProgram(gl, VS, FS);\n        gl.useProgram(program);\n        createQuad(gl);\n        UNIFORMS.forEach(name => this._uniforms[name] = gl.getUniformLocation(program, name));\n        this._program = program;\n        gl.enable(gl.BLEND);\n        gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n        gl.enable(gl.SCISSOR_TEST);\n        return gl;\n    }\n    _normalizedEventToPosition(x, y) {\n        return [Math.floor(x / this._options.tileWidth), Math.floor(y / this._options.tileHeight)];\n    }\n    _updateSize() {\n        const gl = this._gl;\n        const opts = this._options;\n        const canvasSize = [opts.width * opts.tileWidth, opts.height * opts.tileHeight];\n        gl.canvas.width = canvasSize[0];\n        gl.canvas.height = canvasSize[1];\n        gl.viewport(0, 0, canvasSize[0], canvasSize[1]);\n        gl.uniform2fv(this._uniforms[\"tileSize\"], [opts.tileWidth, opts.tileHeight]);\n        gl.uniform2fv(this._uniforms[\"targetSize\"], canvasSize);\n    }\n    _updateTexture(tileSet) {\n        createTexture(this._gl, tileSet);\n    }\n}\nconst UNIFORMS = [\"targetPosRel\", \"tilesetPosAbs\", \"tileSize\", \"targetSize\", \"colorize\", \"bg\", \"tint\"];\nconst VS = `\n#version 300 es\n\nin vec2 tilePosRel;\nout vec2 tilesetPosPx;\n\nuniform vec2 tilesetPosAbs;\nuniform vec2 tileSize;\nuniform vec2 targetSize;\nuniform vec2 targetPosRel;\n\nvoid main() {\n\tvec2 targetPosPx = (targetPosRel + tilePosRel) * tileSize;\n\tvec2 targetPosNdc = ((targetPosPx / targetSize)-0.5)*2.0;\n\ttargetPosNdc.y *= -1.0;\n\n\tgl_Position = vec4(targetPosNdc, 0.0, 1.0);\n\ttilesetPosPx = tilesetPosAbs + tilePosRel * tileSize;\n}`.trim();\nconst FS = `\n#version 300 es\nprecision highp float;\n\nin vec2 tilesetPosPx;\nout vec4 fragColor;\nuniform sampler2D image;\nuniform bool colorize;\nuniform vec4 bg;\nuniform vec4 tint;\n\nvoid main() {\n\tfragColor = vec4(0, 0, 0, 1);\n\n\tvec4 texel = texelFetch(image, ivec2(tilesetPosPx), 0);\n\n\tif (colorize) {\n\t\ttexel.rgb = tint.a * tint.rgb + (1.0-tint.a) * texel.rgb;\n\t\tfragColor.rgb = texel.a*texel.rgb + (1.0-texel.a)*bg.rgb;\n\t\tfragColor.a = texel.a + (1.0-texel.a)*bg.a;\n\t} else {\n\t\tfragColor = texel;\n\t}\n}`.trim();\nfunction createProgram(gl, vss, fss) {\n    const vs = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(vs, vss);\n    gl.compileShader(vs);\n    if (!gl.getShaderParameter(vs, gl.COMPILE_STATUS)) {\n        throw new Error(gl.getShaderInfoLog(vs) || \"\");\n    }\n    const fs = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fs, fss);\n    gl.compileShader(fs);\n    if (!gl.getShaderParameter(fs, gl.COMPILE_STATUS)) {\n        throw new Error(gl.getShaderInfoLog(fs) || \"\");\n    }\n    const p = gl.createProgram();\n    gl.attachShader(p, vs);\n    gl.attachShader(p, fs);\n    gl.linkProgram(p);\n    if (!gl.getProgramParameter(p, gl.LINK_STATUS)) {\n        throw new Error(gl.getProgramInfoLog(p) || \"\");\n    }\n    return p;\n}\nfunction createQuad(gl) {\n    const pos = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);\n    const buf = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buf);\n    gl.bufferData(gl.ARRAY_BUFFER, pos, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(0);\n    gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\n}\nfunction createTexture(gl, data) {\n    let t = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, t);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 0);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, data);\n    return t;\n}\nlet colorCache = {};\nfunction parseColor(color) {\n    if (!(color in colorCache)) {\n        let parsed;\n        if (color == \"transparent\") {\n            parsed = [0, 0, 0, 0];\n        }\n        else if (color.indexOf(\"rgba\") > -1) {\n            parsed = (color.match(/[\\d.]+/g) || []).map(Number);\n            for (let i = 0; i < 3; i++) {\n                parsed[i] = parsed[i] / 255;\n            }\n        }\n        else {\n            parsed = Color.fromString(color).map($ => $ / 255);\n            parsed.push(1);\n        }\n        colorCache[color] = parsed;\n    }\n    return colorCache[color];\n}\n","import Backend from \"./backend.js\";\nimport * as Color from \"../color.js\";\nfunction clearToAnsi(bg) {\n    return `\\x1b[0;48;5;${termcolor(bg)}m\\x1b[2J`;\n}\nfunction colorToAnsi(fg, bg) {\n    return `\\x1b[0;38;5;${termcolor(fg)};48;5;${termcolor(bg)}m`;\n}\nfunction positionToAnsi(x, y) {\n    return `\\x1b[${y + 1};${x + 1}H`;\n}\nfunction termcolor(color) {\n    const SRC_COLORS = 256.0;\n    const DST_COLORS = 6.0;\n    const COLOR_RATIO = DST_COLORS / SRC_COLORS;\n    let rgb = Color.fromString(color);\n    let r = Math.floor(rgb[0] * COLOR_RATIO);\n    let g = Math.floor(rgb[1] * COLOR_RATIO);\n    let b = Math.floor(rgb[2] * COLOR_RATIO);\n    return r * 36 + g * 6 + b * 1 + 16;\n}\nexport default class Term extends Backend {\n    constructor() {\n        super();\n        this._offset = [0, 0];\n        this._cursor = [-1, -1];\n        this._lastColor = \"\";\n    }\n    schedule(cb) { setTimeout(cb, 1000 / 60); }\n    setOptions(options) {\n        super.setOptions(options);\n        let size = [options.width, options.height];\n        let avail = this.computeSize();\n        this._offset = avail.map((val, index) => Math.floor((val - size[index]) / 2));\n    }\n    clear() {\n        process.stdout.write(clearToAnsi(this._options.bg));\n    }\n    draw(data, clearBefore) {\n        // determine where to draw what with what colors\n        let [x, y, ch, fg, bg] = data;\n        // determine if we need to move the terminal cursor\n        let dx = this._offset[0] + x;\n        let dy = this._offset[1] + y;\n        let size = this.computeSize();\n        if (dx < 0 || dx >= size[0]) {\n            return;\n        }\n        if (dy < 0 || dy >= size[1]) {\n            return;\n        }\n        if (dx !== this._cursor[0] || dy !== this._cursor[1]) {\n            process.stdout.write(positionToAnsi(dx, dy));\n            this._cursor[0] = dx;\n            this._cursor[1] = dy;\n        }\n        // terminals automatically clear, but if we're clearing when we're\n        // not otherwise provided with a character, just use a space instead\n        if (clearBefore) {\n            if (!ch) {\n                ch = \" \";\n            }\n        }\n        // if we're not clearing and not provided with a character, do nothing\n        if (!ch) {\n            return;\n        }\n        // determine if we need to change colors\n        let newColor = colorToAnsi(fg, bg);\n        if (newColor !== this._lastColor) {\n            process.stdout.write(newColor);\n            this._lastColor = newColor;\n        }\n        if (ch != '\\t') {\n            // write the provided symbol to the display\n            let chars = [].concat(ch);\n            process.stdout.write(chars[0]);\n        }\n        // update our position, given that we wrote a character\n        this._cursor[0]++;\n        if (this._cursor[0] >= size[0]) {\n            this._cursor[0] = 0;\n            this._cursor[1]++;\n        }\n    }\n    computeFontSize() { throw new Error(\"Terminal backend has no notion of font size\"); }\n    eventToPosition(x, y) { return [x, y]; }\n    computeSize() { return [process.stdout.columns, process.stdout.rows]; }\n}\n","/**\n * @namespace\n * Contains text tokenization and breaking routines\n */\nconst RE_COLORS = /%([bc]){([^}]*)}/g;\n// token types\nexport const TYPE_TEXT = 0;\nexport const TYPE_NEWLINE = 1;\nexport const TYPE_FG = 2;\nexport const TYPE_BG = 3;\n/**\n * Measure size of a resulting text block\n */\nexport function measure(str, maxWidth) {\n    let result = { width: 0, height: 1 };\n    let tokens = tokenize(str, maxWidth);\n    let lineWidth = 0;\n    for (let i = 0; i < tokens.length; i++) {\n        let token = tokens[i];\n        switch (token.type) {\n            case TYPE_TEXT:\n                lineWidth += token.value.length;\n                break;\n            case TYPE_NEWLINE:\n                result.height++;\n                result.width = Math.max(result.width, lineWidth);\n                lineWidth = 0;\n                break;\n        }\n    }\n    result.width = Math.max(result.width, lineWidth);\n    return result;\n}\n/**\n * Convert string to a series of a formatting commands\n */\nexport function tokenize(str, maxWidth) {\n    let result = [];\n    /* first tokenization pass - split texts and color formatting commands */\n    let offset = 0;\n    str.replace(RE_COLORS, function (match, type, name, index) {\n        /* string before */\n        let part = str.substring(offset, index);\n        if (part.length) {\n            result.push({\n                type: TYPE_TEXT,\n                value: part\n            });\n        }\n        /* color command */\n        result.push({\n            type: (type == \"c\" ? TYPE_FG : TYPE_BG),\n            value: name.trim()\n        });\n        offset = index + match.length;\n        return \"\";\n    });\n    /* last remaining part */\n    let part = str.substring(offset);\n    if (part.length) {\n        result.push({\n            type: TYPE_TEXT,\n            value: part\n        });\n    }\n    return breakLines(result, maxWidth);\n}\n/* insert line breaks into first-pass tokenized data */\nfunction breakLines(tokens, maxWidth) {\n    if (!maxWidth) {\n        maxWidth = Infinity;\n    }\n    let i = 0;\n    let lineLength = 0;\n    let lastTokenWithSpace = -1;\n    while (i < tokens.length) { /* take all text tokens, remove space, apply linebreaks */\n        let token = tokens[i];\n        if (token.type == TYPE_NEWLINE) { /* reset */\n            lineLength = 0;\n            lastTokenWithSpace = -1;\n        }\n        if (token.type != TYPE_TEXT) { /* skip non-text tokens */\n            i++;\n            continue;\n        }\n        /* remove spaces at the beginning of line */\n        while (lineLength == 0 && token.value.charAt(0) == \" \") {\n            token.value = token.value.substring(1);\n        }\n        /* forced newline? insert two new tokens after this one */\n        let index = token.value.indexOf(\"\\n\");\n        if (index != -1) {\n            token.value = breakInsideToken(tokens, i, index, true);\n            /* if there are spaces at the end, we must remove them (we do not want the line too long) */\n            let arr = token.value.split(\"\");\n            while (arr.length && arr[arr.length - 1] == \" \") {\n                arr.pop();\n            }\n            token.value = arr.join(\"\");\n        }\n        /* token degenerated? */\n        if (!token.value.length) {\n            tokens.splice(i, 1);\n            continue;\n        }\n        if (lineLength + token.value.length > maxWidth) { /* line too long, find a suitable breaking spot */\n            /* is it possible to break within this token? */\n            let index = -1;\n            while (1) {\n                let nextIndex = token.value.indexOf(\" \", index + 1);\n                if (nextIndex == -1) {\n                    break;\n                }\n                if (lineLength + nextIndex > maxWidth) {\n                    break;\n                }\n                index = nextIndex;\n            }\n            if (index != -1) { /* break at space within this one */\n                token.value = breakInsideToken(tokens, i, index, true);\n            }\n            else if (lastTokenWithSpace != -1) { /* is there a previous token where a break can occur? */\n                let token = tokens[lastTokenWithSpace];\n                let breakIndex = token.value.lastIndexOf(\" \");\n                token.value = breakInsideToken(tokens, lastTokenWithSpace, breakIndex, true);\n                i = lastTokenWithSpace;\n            }\n            else { /* force break in this token */\n                token.value = breakInsideToken(tokens, i, maxWidth - lineLength, false);\n            }\n        }\n        else { /* line not long, continue */\n            lineLength += token.value.length;\n            if (token.value.indexOf(\" \") != -1) {\n                lastTokenWithSpace = i;\n            }\n        }\n        i++; /* advance to next token */\n    }\n    tokens.push({ type: TYPE_NEWLINE }); /* insert fake newline to fix the last text line */\n    /* remove trailing space from text tokens before newlines */\n    let lastTextToken = null;\n    for (let i = 0; i < tokens.length; i++) {\n        let token = tokens[i];\n        switch (token.type) {\n            case TYPE_TEXT:\n                lastTextToken = token;\n                break;\n            case TYPE_NEWLINE:\n                if (lastTextToken) { /* remove trailing space */\n                    let arr = lastTextToken.value.split(\"\");\n                    while (arr.length && arr[arr.length - 1] == \" \") {\n                        arr.pop();\n                    }\n                    lastTextToken.value = arr.join(\"\");\n                }\n                lastTextToken = null;\n                break;\n        }\n    }\n    tokens.pop(); /* remove fake token */\n    return tokens;\n}\n/**\n * Create new tokens and insert them into the stream\n * @param {object[]} tokens\n * @param {int} tokenIndex Token being processed\n * @param {int} breakIndex Index within current token's value\n * @param {bool} removeBreakChar Do we want to remove the breaking character?\n * @returns {string} remaining unbroken token value\n */\nfunction breakInsideToken(tokens, tokenIndex, breakIndex, removeBreakChar) {\n    let newBreakToken = {\n        type: TYPE_NEWLINE\n    };\n    let newTextToken = {\n        type: TYPE_TEXT,\n        value: tokens[tokenIndex].value.substring(breakIndex + (removeBreakChar ? 1 : 0))\n    };\n    tokens.splice(tokenIndex + 1, 0, newBreakToken, newTextToken);\n    return tokens[tokenIndex].value.substring(0, breakIndex);\n}\n","/** Default with for display and map generators */\nexport let DEFAULT_WIDTH = 80;\n/** Default height for display and map generators */\nexport let DEFAULT_HEIGHT = 25;\nexport const DIRS = {\n    4: [[0, -1], [1, 0], [0, 1], [-1, 0]],\n    8: [[0, -1], [1, -1], [1, 0], [1, 1], [0, 1], [-1, 1], [-1, 0], [-1, -1]],\n    6: [[-1, -1], [1, -1], [2, 0], [1, 1], [-1, 1], [-2, 0]]\n};\nexport const KEYS = {\n    /** Cancel key. */\n    VK_CANCEL: 3,\n    /** Help key. */\n    VK_HELP: 6,\n    /** Backspace key. */\n    VK_BACK_SPACE: 8,\n    /** Tab key. */\n    VK_TAB: 9,\n    /** 5 key on Numpad when NumLock is unlocked. Or on Mac, clear key which is positioned at NumLock key. */\n    VK_CLEAR: 12,\n    /** Return/enter key on the main keyboard. */\n    VK_RETURN: 13,\n    /** Reserved, but not used. */\n    VK_ENTER: 14,\n    /** Shift key. */\n    VK_SHIFT: 16,\n    /** Control key. */\n    VK_CONTROL: 17,\n    /** Alt (Option on Mac) key. */\n    VK_ALT: 18,\n    /** Pause key. */\n    VK_PAUSE: 19,\n    /** Caps lock. */\n    VK_CAPS_LOCK: 20,\n    /** Escape key. */\n    VK_ESCAPE: 27,\n    /** Space bar. */\n    VK_SPACE: 32,\n    /** Page Up key. */\n    VK_PAGE_UP: 33,\n    /** Page Down key. */\n    VK_PAGE_DOWN: 34,\n    /** End key. */\n    VK_END: 35,\n    /** Home key. */\n    VK_HOME: 36,\n    /** Left arrow. */\n    VK_LEFT: 37,\n    /** Up arrow. */\n    VK_UP: 38,\n    /** Right arrow. */\n    VK_RIGHT: 39,\n    /** Down arrow. */\n    VK_DOWN: 40,\n    /** Print Screen key. */\n    VK_PRINTSCREEN: 44,\n    /** Ins(ert) key. */\n    VK_INSERT: 45,\n    /** Del(ete) key. */\n    VK_DELETE: 46,\n    /***/\n    VK_0: 48,\n    /***/\n    VK_1: 49,\n    /***/\n    VK_2: 50,\n    /***/\n    VK_3: 51,\n    /***/\n    VK_4: 52,\n    /***/\n    VK_5: 53,\n    /***/\n    VK_6: 54,\n    /***/\n    VK_7: 55,\n    /***/\n    VK_8: 56,\n    /***/\n    VK_9: 57,\n    /** Colon (:) key. Requires Gecko 15.0 */\n    VK_COLON: 58,\n    /** Semicolon (;) key. */\n    VK_SEMICOLON: 59,\n    /** Less-than (<) key. Requires Gecko 15.0 */\n    VK_LESS_THAN: 60,\n    /** Equals (=) key. */\n    VK_EQUALS: 61,\n    /** Greater-than (>) key. Requires Gecko 15.0 */\n    VK_GREATER_THAN: 62,\n    /** Question mark (?) key. Requires Gecko 15.0 */\n    VK_QUESTION_MARK: 63,\n    /** Atmark (@) key. Requires Gecko 15.0 */\n    VK_AT: 64,\n    /***/\n    VK_A: 65,\n    /***/\n    VK_B: 66,\n    /***/\n    VK_C: 67,\n    /***/\n    VK_D: 68,\n    /***/\n    VK_E: 69,\n    /***/\n    VK_F: 70,\n    /***/\n    VK_G: 71,\n    /***/\n    VK_H: 72,\n    /***/\n    VK_I: 73,\n    /***/\n    VK_J: 74,\n    /***/\n    VK_K: 75,\n    /***/\n    VK_L: 76,\n    /***/\n    VK_M: 77,\n    /***/\n    VK_N: 78,\n    /***/\n    VK_O: 79,\n    /***/\n    VK_P: 80,\n    /***/\n    VK_Q: 81,\n    /***/\n    VK_R: 82,\n    /***/\n    VK_S: 83,\n    /***/\n    VK_T: 84,\n    /***/\n    VK_U: 85,\n    /***/\n    VK_V: 86,\n    /***/\n    VK_W: 87,\n    /***/\n    VK_X: 88,\n    /***/\n    VK_Y: 89,\n    /***/\n    VK_Z: 90,\n    /***/\n    VK_CONTEXT_MENU: 93,\n    /** 0 on the numeric keypad. */\n    VK_NUMPAD0: 96,\n    /** 1 on the numeric keypad. */\n    VK_NUMPAD1: 97,\n    /** 2 on the numeric keypad. */\n    VK_NUMPAD2: 98,\n    /** 3 on the numeric keypad. */\n    VK_NUMPAD3: 99,\n    /** 4 on the numeric keypad. */\n    VK_NUMPAD4: 100,\n    /** 5 on the numeric keypad. */\n    VK_NUMPAD5: 101,\n    /** 6 on the numeric keypad. */\n    VK_NUMPAD6: 102,\n    /** 7 on the numeric keypad. */\n    VK_NUMPAD7: 103,\n    /** 8 on the numeric keypad. */\n    VK_NUMPAD8: 104,\n    /** 9 on the numeric keypad. */\n    VK_NUMPAD9: 105,\n    /** * on the numeric keypad. */\n    VK_MULTIPLY: 106,\n    /** + on the numeric keypad. */\n    VK_ADD: 107,\n    /***/\n    VK_SEPARATOR: 108,\n    /** - on the numeric keypad. */\n    VK_SUBTRACT: 109,\n    /** Decimal point on the numeric keypad. */\n    VK_DECIMAL: 110,\n    /** / on the numeric keypad. */\n    VK_DIVIDE: 111,\n    /** F1 key. */\n    VK_F1: 112,\n    /** F2 key. */\n    VK_F2: 113,\n    /** F3 key. */\n    VK_F3: 114,\n    /** F4 key. */\n    VK_F4: 115,\n    /** F5 key. */\n    VK_F5: 116,\n    /** F6 key. */\n    VK_F6: 117,\n    /** F7 key. */\n    VK_F7: 118,\n    /** F8 key. */\n    VK_F8: 119,\n    /** F9 key. */\n    VK_F9: 120,\n    /** F10 key. */\n    VK_F10: 121,\n    /** F11 key. */\n    VK_F11: 122,\n    /** F12 key. */\n    VK_F12: 123,\n    /** F13 key. */\n    VK_F13: 124,\n    /** F14 key. */\n    VK_F14: 125,\n    /** F15 key. */\n    VK_F15: 126,\n    /** F16 key. */\n    VK_F16: 127,\n    /** F17 key. */\n    VK_F17: 128,\n    /** F18 key. */\n    VK_F18: 129,\n    /** F19 key. */\n    VK_F19: 130,\n    /** F20 key. */\n    VK_F20: 131,\n    /** F21 key. */\n    VK_F21: 132,\n    /** F22 key. */\n    VK_F22: 133,\n    /** F23 key. */\n    VK_F23: 134,\n    /** F24 key. */\n    VK_F24: 135,\n    /** Num Lock key. */\n    VK_NUM_LOCK: 144,\n    /** Scroll Lock key. */\n    VK_SCROLL_LOCK: 145,\n    /** Circumflex (^) key. Requires Gecko 15.0 */\n    VK_CIRCUMFLEX: 160,\n    /** Exclamation (!) key. Requires Gecko 15.0 */\n    VK_EXCLAMATION: 161,\n    /** Double quote () key. Requires Gecko 15.0 */\n    VK_DOUBLE_QUOTE: 162,\n    /** Hash (#) key. Requires Gecko 15.0 */\n    VK_HASH: 163,\n    /** Dollar sign ($) key. Requires Gecko 15.0 */\n    VK_DOLLAR: 164,\n    /** Percent (%) key. Requires Gecko 15.0 */\n    VK_PERCENT: 165,\n    /** Ampersand (&) key. Requires Gecko 15.0 */\n    VK_AMPERSAND: 166,\n    /** Underscore (_) key. Requires Gecko 15.0 */\n    VK_UNDERSCORE: 167,\n    /** Open parenthesis (() key. Requires Gecko 15.0 */\n    VK_OPEN_PAREN: 168,\n    /** Close parenthesis ()) key. Requires Gecko 15.0 */\n    VK_CLOSE_PAREN: 169,\n    /* Asterisk (*) key. Requires Gecko 15.0 */\n    VK_ASTERISK: 170,\n    /** Plus (+) key. Requires Gecko 15.0 */\n    VK_PLUS: 171,\n    /** Pipe (|) key. Requires Gecko 15.0 */\n    VK_PIPE: 172,\n    /** Hyphen-US/docs/Minus (-) key. Requires Gecko 15.0 */\n    VK_HYPHEN_MINUS: 173,\n    /** Open curly bracket ({) key. Requires Gecko 15.0 */\n    VK_OPEN_CURLY_BRACKET: 174,\n    /** Close curly bracket (}) key. Requires Gecko 15.0 */\n    VK_CLOSE_CURLY_BRACKET: 175,\n    /** Tilde (~) key. Requires Gecko 15.0 */\n    VK_TILDE: 176,\n    /** Comma (,) key. */\n    VK_COMMA: 188,\n    /** Period (.) key. */\n    VK_PERIOD: 190,\n    /** Slash (/) key. */\n    VK_SLASH: 191,\n    /** Back tick (`) key. */\n    VK_BACK_QUOTE: 192,\n    /** Open square bracket ([) key. */\n    VK_OPEN_BRACKET: 219,\n    /** Back slash (\\) key. */\n    VK_BACK_SLASH: 220,\n    /** Close square bracket (]) key. */\n    VK_CLOSE_BRACKET: 221,\n    /** Quote (''') key. */\n    VK_QUOTE: 222,\n    /** Meta key on Linux, Command key on Mac. */\n    VK_META: 224,\n    /** AltGr key on Linux. Requires Gecko 15.0 */\n    VK_ALTGR: 225,\n    /** Windows logo key on Windows. Or Super or Hyper key on Linux. Requires Gecko 15.0 */\n    VK_WIN: 91,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_KANA: 21,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_HANGUL: 21,\n    /** 英数 key on Japanese Mac keyboard. Requires Gecko 15.0 */\n    VK_EISU: 22,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_JUNJA: 23,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_FINAL: 24,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_HANJA: 25,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_KANJI: 25,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_CONVERT: 28,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_NONCONVERT: 29,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_ACCEPT: 30,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_MODECHANGE: 31,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_SELECT: 41,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_PRINT: 42,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_EXECUTE: 43,\n    /** Linux support for this keycode was added in Gecko 4.0.\t */\n    VK_SLEEP: 95\n};\n","import Hex from \"./hex.js\";\nimport Rect from \"./rect.js\";\nimport Tile from \"./tile.js\";\nimport TileGL from \"./tile-gl.js\";\nimport Term from \"./term.js\";\nimport * as Text from \"../text.js\";\nimport { DEFAULT_WIDTH, DEFAULT_HEIGHT } from \"../constants.js\";\nconst BACKENDS = {\n    \"hex\": Hex,\n    \"rect\": Rect,\n    \"tile\": Tile,\n    \"tile-gl\": TileGL,\n    \"term\": Term\n};\nconst DEFAULT_OPTIONS = {\n    width: DEFAULT_WIDTH,\n    height: DEFAULT_HEIGHT,\n    transpose: false,\n    layout: \"rect\",\n    fontSize: 15,\n    spacing: 1,\n    border: 0,\n    forceSquareRatio: false,\n    fontFamily: \"monospace\",\n    fontStyle: \"\",\n    fg: \"#ccc\",\n    bg: \"#000\",\n    tileWidth: 32,\n    tileHeight: 32,\n    tileMap: {},\n    tileSet: null,\n    tileColorize: false\n};\n/**\n * @class Visual map display\n */\nlet Display = /** @class */ (() => {\n    class Display {\n        constructor(options = {}) {\n            this._data = {};\n            this._dirty = false; // false = nothing, true = all, object = dirty cells\n            this._options = {};\n            options = Object.assign({}, DEFAULT_OPTIONS, options);\n            this.setOptions(options);\n            this.DEBUG = this.DEBUG.bind(this);\n            this._tick = this._tick.bind(this);\n            this._backend.schedule(this._tick);\n        }\n        /**\n         * Debug helper, ideal as a map generator callback. Always bound to this.\n         * @param {int} x\n         * @param {int} y\n         * @param {int} what\n         */\n        DEBUG(x, y, what) {\n            let colors = [this._options.bg, this._options.fg];\n            this.draw(x, y, null, null, colors[what % colors.length]);\n        }\n        /**\n         * Clear the whole display (cover it with background color)\n         */\n        clear() {\n            this._data = {};\n            this._dirty = true;\n        }\n        /**\n         * @see ROT.Display\n         */\n        setOptions(options) {\n            Object.assign(this._options, options);\n            if (options.width || options.height || options.fontSize || options.fontFamily || options.spacing || options.layout) {\n                if (options.layout) {\n                    let ctor = BACKENDS[options.layout];\n                    this._backend = new ctor();\n                }\n                this._backend.setOptions(this._options);\n                this._dirty = true;\n            }\n            return this;\n        }\n        /**\n         * Returns currently set options\n         */\n        getOptions() { return this._options; }\n        /**\n         * Returns the DOM node of this display\n         */\n        getContainer() { return this._backend.getContainer(); }\n        /**\n         * Compute the maximum width/height to fit into a set of given constraints\n         * @param {int} availWidth Maximum allowed pixel width\n         * @param {int} availHeight Maximum allowed pixel height\n         * @returns {int[2]} cellWidth,cellHeight\n         */\n        computeSize(availWidth, availHeight) {\n            return this._backend.computeSize(availWidth, availHeight);\n        }\n        /**\n         * Compute the maximum font size to fit into a set of given constraints\n         * @param {int} availWidth Maximum allowed pixel width\n         * @param {int} availHeight Maximum allowed pixel height\n         * @returns {int} fontSize\n         */\n        computeFontSize(availWidth, availHeight) {\n            return this._backend.computeFontSize(availWidth, availHeight);\n        }\n        computeTileSize(availWidth, availHeight) {\n            let width = Math.floor(availWidth / this._options.width);\n            let height = Math.floor(availHeight / this._options.height);\n            return [width, height];\n        }\n        /**\n         * Convert a DOM event (mouse or touch) to map coordinates. Uses first touch for multi-touch.\n         * @param {Event} e event\n         * @returns {int[2]} -1 for values outside of the canvas\n         */\n        eventToPosition(e) {\n            let x, y;\n            if (\"touches\" in e) {\n                x = e.touches[0].clientX;\n                y = e.touches[0].clientY;\n            }\n            else {\n                x = e.clientX;\n                y = e.clientY;\n            }\n            return this._backend.eventToPosition(x, y);\n        }\n        /**\n         * @param {int} x\n         * @param {int} y\n         * @param {string || string[]} ch One or more chars (will be overlapping themselves)\n         * @param {string} [fg] foreground color\n         * @param {string} [bg] background color\n         */\n        draw(x, y, ch, fg, bg) {\n            if (!fg) {\n                fg = this._options.fg;\n            }\n            if (!bg) {\n                bg = this._options.bg;\n            }\n            let key = `${x},${y}`;\n            this._data[key] = [x, y, ch, fg, bg];\n            if (this._dirty === true) {\n                return;\n            } // will already redraw everything \n            if (!this._dirty) {\n                this._dirty = {};\n            } // first!\n            this._dirty[key] = true;\n        }\n        /**\n         * Draws a text at given position. Optionally wraps at a maximum length. Currently does not work with hex layout.\n         * @param {int} x\n         * @param {int} y\n         * @param {string} text May contain color/background format specifiers, %c{name}/%b{name}, both optional. %c{}/%b{} resets to default.\n         * @param {int} [maxWidth] wrap at what width?\n         * @returns {int} lines drawn\n         */\n        drawText(x, y, text, maxWidth) {\n            let fg = null;\n            let bg = null;\n            let cx = x;\n            let cy = y;\n            let lines = 1;\n            if (!maxWidth) {\n                maxWidth = this._options.width - x;\n            }\n            let tokens = Text.tokenize(text, maxWidth);\n            while (tokens.length) { // interpret tokenized opcode stream\n                let token = tokens.shift();\n                switch (token.type) {\n                    case Text.TYPE_TEXT:\n                        let isSpace = false, isPrevSpace = false, isFullWidth = false, isPrevFullWidth = false;\n                        for (let i = 0; i < token.value.length; i++) {\n                            let cc = token.value.charCodeAt(i);\n                            let c = token.value.charAt(i);\n                            if (this._options.layout === \"term\") {\n                                let cch = cc >> 8;\n                                let isCJK = cch === 0x11 || (cch >= 0x2e && cch <= 0x9f) || (cch >= 0xac && cch <= 0xd7) || (cc >= 0xA960 && cc <= 0xA97F);\n                                if (isCJK) {\n                                    this.draw(cx + 0, cy, c, fg, bg);\n                                    this.draw(cx + 1, cy, \"\\t\", fg, bg);\n                                    cx += 2;\n                                    continue;\n                                }\n                            }\n                            // Assign to `true` when the current char is full-width.\n                            isFullWidth = (cc > 0xff00 && cc < 0xff61) || (cc > 0xffdc && cc < 0xffe8) || cc > 0xffee;\n                            // Current char is space, whatever full-width or half-width both are OK.\n                            isSpace = (c.charCodeAt(0) == 0x20 || c.charCodeAt(0) == 0x3000);\n                            // The previous char is full-width and\n                            // current char is nether half-width nor a space.\n                            if (isPrevFullWidth && !isFullWidth && !isSpace) {\n                                cx++;\n                            } // add an extra position\n                            // The current char is full-width and\n                            // the previous char is not a space.\n                            if (isFullWidth && !isPrevSpace) {\n                                cx++;\n                            } // add an extra position\n                            this.draw(cx++, cy, c, fg, bg);\n                            isPrevSpace = isSpace;\n                            isPrevFullWidth = isFullWidth;\n                        }\n                        break;\n                    case Text.TYPE_FG:\n                        fg = token.value || null;\n                        break;\n                    case Text.TYPE_BG:\n                        bg = token.value || null;\n                        break;\n                    case Text.TYPE_NEWLINE:\n                        cx = x;\n                        cy++;\n                        lines++;\n                        break;\n                }\n            }\n            return lines;\n        }\n        /**\n         * Timer tick: update dirty parts\n         */\n        _tick() {\n            this._backend.schedule(this._tick);\n            if (!this._dirty) {\n                return;\n            }\n            if (this._dirty === true) { // draw all\n                this._backend.clear();\n                for (let id in this._data) {\n                    this._draw(id, false);\n                } // redraw cached data \n            }\n            else { // draw only dirty \n                for (let key in this._dirty) {\n                    this._draw(key, true);\n                }\n            }\n            this._dirty = false;\n        }\n        /**\n         * @param {string} key What to draw\n         * @param {bool} clearBefore Is it necessary to clean before?\n         */\n        _draw(key, clearBefore) {\n            let data = this._data[key];\n            if (data[4] != this._options.bg) {\n                clearBefore = true;\n            }\n            this._backend.draw(data, clearBefore);\n        }\n    }\n    Display.Rect = Rect;\n    Display.Hex = Hex;\n    Display.Tile = Tile;\n    Display.TileGL = TileGL;\n    Display.Term = Term;\n    return Display;\n})();\nexport default Display;\n","export class MinHeap {\n    constructor() {\n        this.heap = [];\n        this.timestamp = 0;\n    }\n    lessThan(a, b) {\n        return a.key == b.key ? a.timestamp < b.timestamp : a.key < b.key;\n    }\n    shift(v) {\n        this.heap = this.heap.map(({ key, value, timestamp }) => ({ key: key + v, value, timestamp }));\n    }\n    len() {\n        return this.heap.length;\n    }\n    push(value, key) {\n        this.timestamp += 1;\n        const loc = this.len();\n        this.heap.push({ value, timestamp: this.timestamp, key });\n        this.updateUp(loc);\n    }\n    pop() {\n        if (this.len() == 0) {\n            throw new Error(\"no element to pop\");\n        }\n        const top = this.heap[0];\n        if (this.len() > 1) {\n            this.heap[0] = this.heap.pop();\n            this.updateDown(0);\n        }\n        else {\n            this.heap.pop();\n        }\n        return top;\n    }\n    find(v) {\n        for (let i = 0; i < this.len(); i++) {\n            if (v == this.heap[i].value) {\n                return this.heap[i];\n            }\n        }\n        return null;\n    }\n    remove(v) {\n        let index = null;\n        for (let i = 0; i < this.len(); i++) {\n            if (v == this.heap[i].value) {\n                index = i;\n            }\n        }\n        if (index === null) {\n            return false;\n        }\n        if (this.len() > 1) {\n            let last = this.heap.pop();\n            if (last.value != v) { // if the last one is being removed, do nothing\n                this.heap[index] = last;\n                this.updateDown(index);\n            }\n            return true;\n        }\n        else {\n            this.heap.pop();\n        }\n        return true;\n    }\n    parentNode(x) {\n        return Math.floor((x - 1) / 2);\n    }\n    leftChildNode(x) {\n        return 2 * x + 1;\n    }\n    rightChildNode(x) {\n        return 2 * x + 2;\n    }\n    existNode(x) {\n        return x >= 0 && x < this.heap.length;\n    }\n    swap(x, y) {\n        const t = this.heap[x];\n        this.heap[x] = this.heap[y];\n        this.heap[y] = t;\n    }\n    minNode(numbers) {\n        const validnumbers = numbers.filter(this.existNode.bind(this));\n        let minimal = validnumbers[0];\n        for (const i of validnumbers) {\n            if (this.lessThan(this.heap[i], this.heap[minimal])) {\n                minimal = i;\n            }\n        }\n        return minimal;\n    }\n    updateUp(x) {\n        if (x == 0) {\n            return;\n        }\n        const parent = this.parentNode(x);\n        if (this.existNode(parent) && this.lessThan(this.heap[x], this.heap[parent])) {\n            this.swap(x, parent);\n            this.updateUp(parent);\n        }\n    }\n    updateDown(x) {\n        const leftChild = this.leftChildNode(x);\n        const rightChild = this.rightChildNode(x);\n        if (!this.existNode(leftChild)) {\n            return;\n        }\n        const m = this.minNode([x, leftChild, rightChild]);\n        if (m != x) {\n            this.swap(x, m);\n            this.updateDown(m);\n        }\n    }\n    debugPrint() {\n        console.log(this.heap);\n    }\n}\n","import { MinHeap } from \"./MinHeap\";\nexport default class EventQueue {\n    /**\n     * @class Generic event queue: stores events and retrieves them based on their time\n     */\n    constructor() {\n        this._time = 0;\n        this._events = new MinHeap();\n    }\n    /**\n     * @returns {number} Elapsed time\n     */\n    getTime() { return this._time; }\n    /**\n     * Clear all scheduled events\n     */\n    clear() {\n        this._events = new MinHeap();\n        return this;\n    }\n    /**\n     * @param {?} event\n     * @param {number} time\n     */\n    add(event, time) {\n        this._events.push(event, time);\n    }\n    /**\n     * Locates the nearest event, advances time if necessary. Returns that event and removes it from the queue.\n     * @returns {? || null} The event previously added by addEvent, null if no event available\n     */\n    get() {\n        if (!this._events.len()) {\n            return null;\n        }\n        let { key: time, value: event } = this._events.pop();\n        if (time > 0) { /* advance */\n            this._time += time;\n            this._events.shift(-time);\n        }\n        return event;\n    }\n    /**\n     * Get the time associated with the given event\n     * @param {?} event\n     * @returns {number} time\n     */\n    getEventTime(event) {\n        const r = this._events.find(event);\n        if (r) {\n            const { key } = r;\n            return key;\n        }\n        return undefined;\n    }\n    /**\n     * Remove an event from the queue\n     * @param {?} event\n     * @returns {bool} success?\n     */\n    remove(event) {\n        return this._events.remove(event);\n    }\n    ;\n}\n","import EventQueue from \"../eventqueue.js\";\nexport default class Scheduler {\n    /**\n     * @class Abstract scheduler\n     */\n    constructor() {\n        this._queue = new EventQueue();\n        this._repeat = [];\n        this._current = null;\n    }\n    /**\n     * @see ROT.EventQueue#getTime\n     */\n    getTime() { return this._queue.getTime(); }\n    /**\n     * @param {?} item\n     * @param {bool} repeat\n     */\n    add(item, repeat) {\n        if (repeat) {\n            this._repeat.push(item);\n        }\n        return this;\n    }\n    /**\n     * Get the time the given item is scheduled for\n     * @param {?} item\n     * @returns {number} time\n     */\n    getTimeOf(item) {\n        return this._queue.getEventTime(item);\n    }\n    /**\n     * Clear all items\n     */\n    clear() {\n        this._queue.clear();\n        this._repeat = [];\n        this._current = null;\n        return this;\n    }\n    /**\n     * Remove a previously added item\n     * @param {?} item\n     * @returns {bool} successful?\n     */\n    remove(item) {\n        let result = this._queue.remove(item);\n        let index = this._repeat.indexOf(item);\n        if (index != -1) {\n            this._repeat.splice(index, 1);\n        }\n        if (this._current == item) {\n            this._current = null;\n        }\n        return result;\n    }\n    /**\n     * Schedule next item\n     * @returns {?}\n     */\n    next() {\n        this._current = this._queue.get();\n        return this._current;\n    }\n}\n","import Simple from \"./simple.js\";\nimport Speed from \"./speed.js\";\nimport Action from \"./action.js\";\nexport default { Simple, Speed, Action };\n","import Scheduler from \"./scheduler.js\";\n/**\n * @class Simple fair scheduler (round-robin style)\n */\nexport default class Simple extends Scheduler {\n    add(item, repeat) {\n        this._queue.add(item, 0);\n        return super.add(item, repeat);\n    }\n    next() {\n        if (this._current !== null && this._repeat.indexOf(this._current) != -1) {\n            this._queue.add(this._current, 0);\n        }\n        return super.next();\n    }\n}\n","import { DIRS } from \"../constants.js\";\n;\n;\nexport default class FOV {\n    /**\n     * @class Abstract FOV algorithm\n     * @param {function} lightPassesCallback Does the light pass through x,y?\n     * @param {object} [options]\n     * @param {int} [options.topology=8] 4/6/8\n     */\n    constructor(lightPassesCallback, options = {}) {\n        this._lightPasses = lightPassesCallback;\n        this._options = Object.assign({ topology: 8 }, options);\n    }\n    /**\n     * Return all neighbors in a concentric ring\n     * @param {int} cx center-x\n     * @param {int} cy center-y\n     * @param {int} r range\n     */\n    _getCircle(cx, cy, r) {\n        let result = [];\n        let dirs, countFactor, startOffset;\n        switch (this._options.topology) {\n            case 4:\n                countFactor = 1;\n                startOffset = [0, 1];\n                dirs = [\n                    DIRS[8][7],\n                    DIRS[8][1],\n                    DIRS[8][3],\n                    DIRS[8][5]\n                ];\n                break;\n            case 6:\n                dirs = DIRS[6];\n                countFactor = 1;\n                startOffset = [-1, 1];\n                break;\n            case 8:\n                dirs = DIRS[4];\n                countFactor = 2;\n                startOffset = [-1, 1];\n                break;\n            default:\n                throw new Error(\"Incorrect topology for FOV computation\");\n                break;\n        }\n        /* starting neighbor */\n        let x = cx + startOffset[0] * r;\n        let y = cy + startOffset[1] * r;\n        /* circle */\n        for (let i = 0; i < dirs.length; i++) {\n            for (let j = 0; j < r * countFactor; j++) {\n                result.push([x, y]);\n                x += dirs[i][0];\n                y += dirs[i][1];\n            }\n        }\n        return result;\n    }\n}\n","import FOV from \"./fov.js\";\n/** Octants used for translating recursive shadowcasting offsets */\nconst OCTANTS = [\n    [-1, 0, 0, 1],\n    [0, -1, 1, 0],\n    [0, -1, -1, 0],\n    [-1, 0, 0, -1],\n    [1, 0, 0, -1],\n    [0, 1, -1, 0],\n    [0, 1, 1, 0],\n    [1, 0, 0, 1]\n];\n/**\n * @class Recursive shadowcasting algorithm\n * Currently only supports 4/8 topologies, not hexagonal.\n * Based on Peter Harkins' implementation of Björn Bergström's algorithm described here: http://www.roguebasin.com/index.php?title=FOV_using_recursive_shadowcasting\n * @augments ROT.FOV\n */\nexport default class RecursiveShadowcasting extends FOV {\n    /**\n     * Compute visibility for a 360-degree circle\n     * @param {int} x\n     * @param {int} y\n     * @param {int} R Maximum visibility radius\n     * @param {function} callback\n     */\n    compute(x, y, R, callback) {\n        //You can always see your own tile\n        callback(x, y, 0, 1);\n        for (let i = 0; i < OCTANTS.length; i++) {\n            this._renderOctant(x, y, OCTANTS[i], R, callback);\n        }\n    }\n    /**\n     * Compute visibility for a 180-degree arc\n     * @param {int} x\n     * @param {int} y\n     * @param {int} R Maximum visibility radius\n     * @param {int} dir Direction to look in (expressed in a ROT.DIRS value);\n     * @param {function} callback\n     */\n    compute180(x, y, R, dir, callback) {\n        //You can always see your own tile\n        callback(x, y, 0, 1);\n        let previousOctant = (dir - 1 + 8) % 8; //Need to retrieve the previous octant to render a full 180 degrees\n        let nextPreviousOctant = (dir - 2 + 8) % 8; //Need to retrieve the previous two octants to render a full 180 degrees\n        let nextOctant = (dir + 1 + 8) % 8; //Need to grab to next octant to render a full 180 degrees\n        this._renderOctant(x, y, OCTANTS[nextPreviousOctant], R, callback);\n        this._renderOctant(x, y, OCTANTS[previousOctant], R, callback);\n        this._renderOctant(x, y, OCTANTS[dir], R, callback);\n        this._renderOctant(x, y, OCTANTS[nextOctant], R, callback);\n    }\n    ;\n    /**\n     * Compute visibility for a 90-degree arc\n     * @param {int} x\n     * @param {int} y\n     * @param {int} R Maximum visibility radius\n     * @param {int} dir Direction to look in (expressed in a ROT.DIRS value);\n     * @param {function} callback\n     */\n    compute90(x, y, R, dir, callback) {\n        //You can always see your own tile\n        callback(x, y, 0, 1);\n        let previousOctant = (dir - 1 + 8) % 8; //Need to retrieve the previous octant to render a full 90 degrees\n        this._renderOctant(x, y, OCTANTS[dir], R, callback);\n        this._renderOctant(x, y, OCTANTS[previousOctant], R, callback);\n    }\n    /**\n     * Render one octant (45-degree arc) of the viewshed\n     * @param {int} x\n     * @param {int} y\n     * @param {int} octant Octant to be rendered\n     * @param {int} R Maximum visibility radius\n     * @param {function} callback\n     */\n    _renderOctant(x, y, octant, R, callback) {\n        //Radius incremented by 1 to provide same coverage area as other shadowcasting radiuses\n        this._castVisibility(x, y, 1, 1.0, 0.0, R + 1, octant[0], octant[1], octant[2], octant[3], callback);\n    }\n    /**\n     * Actually calculates the visibility\n     * @param {int} startX The starting X coordinate\n     * @param {int} startY The starting Y coordinate\n     * @param {int} row The row to render\n     * @param {float} visSlopeStart The slope to start at\n     * @param {float} visSlopeEnd The slope to end at\n     * @param {int} radius The radius to reach out to\n     * @param {int} xx\n     * @param {int} xy\n     * @param {int} yx\n     * @param {int} yy\n     * @param {function} callback The callback to use when we hit a block that is visible\n     */\n    _castVisibility(startX, startY, row, visSlopeStart, visSlopeEnd, radius, xx, xy, yx, yy, callback) {\n        if (visSlopeStart < visSlopeEnd) {\n            return;\n        }\n        for (let i = row; i <= radius; i++) {\n            let dx = -i - 1;\n            let dy = -i;\n            let blocked = false;\n            let newStart = 0;\n            //'Row' could be column, names here assume octant 0 and would be flipped for half the octants\n            while (dx <= 0) {\n                dx += 1;\n                //Translate from relative coordinates to map coordinates\n                let mapX = startX + dx * xx + dy * xy;\n                let mapY = startY + dx * yx + dy * yy;\n                //Range of the row\n                let slopeStart = (dx - 0.5) / (dy + 0.5);\n                let slopeEnd = (dx + 0.5) / (dy - 0.5);\n                //Ignore if not yet at left edge of Octant\n                if (slopeEnd > visSlopeStart) {\n                    continue;\n                }\n                //Done if past right edge\n                if (slopeStart < visSlopeEnd) {\n                    break;\n                }\n                //If it's in range, it's visible\n                if ((dx * dx + dy * dy) < (radius * radius)) {\n                    callback(mapX, mapY, i, 1);\n                }\n                if (!blocked) {\n                    //If tile is a blocking tile, cast around it\n                    if (!this._lightPasses(mapX, mapY) && i < radius) {\n                        blocked = true;\n                        this._castVisibility(startX, startY, i + 1, visSlopeStart, slopeStart, radius, xx, xy, yx, yy, callback);\n                        newStart = slopeEnd;\n                    }\n                }\n                else {\n                    //Keep narrowing if scanning across a block\n                    if (!this._lightPasses(mapX, mapY)) {\n                        newStart = slopeEnd;\n                        continue;\n                    }\n                    //Block has ended\n                    blocked = false;\n                    visSlopeStart = newStart;\n                }\n            }\n            if (blocked) {\n                break;\n            }\n        }\n    }\n}\n","import DiscreteShadowcasting from \"./discrete-shadowcasting.js\";\nimport PreciseShadowcasting from \"./precise-shadowcasting.js\";\nimport RecursiveShadowcasting from \"./recursive-shadowcasting.js\";\nexport default { DiscreteShadowcasting, PreciseShadowcasting, RecursiveShadowcasting };\n","import FOV from \"./fov.js\";\n/**\n * @class Precise shadowcasting algorithm\n * @augments ROT.FOV\n */\nexport default class PreciseShadowcasting extends FOV {\n    compute(x, y, R, callback) {\n        /* this place is always visible */\n        callback(x, y, 0, 1);\n        /* standing in a dark place. FIXME is this a good idea?  */\n        if (!this._lightPasses(x, y)) {\n            return;\n        }\n        /* list of all shadows */\n        let SHADOWS = [];\n        let cx, cy, blocks, A1, A2, visibility;\n        /* analyze surrounding cells in concentric rings, starting from the center */\n        for (let r = 1; r <= R; r++) {\n            let neighbors = this._getCircle(x, y, r);\n            let neighborCount = neighbors.length;\n            for (let i = 0; i < neighborCount; i++) {\n                cx = neighbors[i][0];\n                cy = neighbors[i][1];\n                /* shift half-an-angle backwards to maintain consistency of 0-th cells */\n                A1 = [i ? 2 * i - 1 : 2 * neighborCount - 1, 2 * neighborCount];\n                A2 = [2 * i + 1, 2 * neighborCount];\n                blocks = !this._lightPasses(cx, cy);\n                visibility = this._checkVisibility(A1, A2, blocks, SHADOWS);\n                if (visibility) {\n                    callback(cx, cy, r, visibility);\n                }\n                if (SHADOWS.length == 2 && SHADOWS[0][0] == 0 && SHADOWS[1][0] == SHADOWS[1][1]) {\n                    return;\n                } /* cutoff? */\n            } /* for all cells in this ring */\n        } /* for all rings */\n    }\n    /**\n     * @param {int[2]} A1 arc start\n     * @param {int[2]} A2 arc end\n     * @param {bool} blocks Does current arc block visibility?\n     * @param {int[][]} SHADOWS list of active shadows\n     */\n    _checkVisibility(A1, A2, blocks, SHADOWS) {\n        if (A1[0] > A2[0]) { /* split into two sub-arcs */\n            let v1 = this._checkVisibility(A1, [A1[1], A1[1]], blocks, SHADOWS);\n            let v2 = this._checkVisibility([0, 1], A2, blocks, SHADOWS);\n            return (v1 + v2) / 2;\n        }\n        /* index1: first shadow >= A1 */\n        let index1 = 0, edge1 = false;\n        while (index1 < SHADOWS.length) {\n            let old = SHADOWS[index1];\n            let diff = old[0] * A1[1] - A1[0] * old[1];\n            if (diff >= 0) { /* old >= A1 */\n                if (diff == 0 && !(index1 % 2)) {\n                    edge1 = true;\n                }\n                break;\n            }\n            index1++;\n        }\n        /* index2: last shadow <= A2 */\n        let index2 = SHADOWS.length, edge2 = false;\n        while (index2--) {\n            let old = SHADOWS[index2];\n            let diff = A2[0] * old[1] - old[0] * A2[1];\n            if (diff >= 0) { /* old <= A2 */\n                if (diff == 0 && (index2 % 2)) {\n                    edge2 = true;\n                }\n                break;\n            }\n        }\n        let visible = true;\n        if (index1 == index2 && (edge1 || edge2)) { /* subset of existing shadow, one of the edges match */\n            visible = false;\n        }\n        else if (edge1 && edge2 && index1 + 1 == index2 && (index2 % 2)) { /* completely equivalent with existing shadow */\n            visible = false;\n        }\n        else if (index1 > index2 && (index1 % 2)) { /* subset of existing shadow, not touching */\n            visible = false;\n        }\n        if (!visible) {\n            return 0;\n        } /* fast case: not visible */\n        let visibleLength;\n        /* compute the length of visible arc, adjust list of shadows (if blocking) */\n        let remove = index2 - index1 + 1;\n        if (remove % 2) {\n            if (index1 % 2) { /* first edge within existing shadow, second outside */\n                let P = SHADOWS[index1];\n                visibleLength = (A2[0] * P[1] - P[0] * A2[1]) / (P[1] * A2[1]);\n                if (blocks) {\n                    SHADOWS.splice(index1, remove, A2);\n                }\n            }\n            else { /* second edge within existing shadow, first outside */\n                let P = SHADOWS[index2];\n                visibleLength = (P[0] * A1[1] - A1[0] * P[1]) / (A1[1] * P[1]);\n                if (blocks) {\n                    SHADOWS.splice(index1, remove, A1);\n                }\n            }\n        }\n        else {\n            if (index1 % 2) { /* both edges within existing shadows */\n                let P1 = SHADOWS[index1];\n                let P2 = SHADOWS[index2];\n                visibleLength = (P2[0] * P1[1] - P1[0] * P2[1]) / (P1[1] * P2[1]);\n                if (blocks) {\n                    SHADOWS.splice(index1, remove);\n                }\n            }\n            else { /* both edges outside existing shadows */\n                if (blocks) {\n                    SHADOWS.splice(index1, remove, A1, A2);\n                }\n                return 1; /* whole arc visible! */\n            }\n        }\n        let arcLength = (A2[0] * A1[1] - A1[0] * A2[1]) / (A1[1] * A2[1]);\n        return visibleLength / arcLength;\n    }\n}\n","import Noise from \"./noise.js\";\nimport RNG from \"../rng.js\";\nimport { mod } from \"../util.js\";\nconst F2 = 0.5 * (Math.sqrt(3) - 1);\nconst G2 = (3 - Math.sqrt(3)) / 6;\n/**\n * A simple 2d implementation of simplex noise by Ondrej Zara\n *\n * Based on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\n * Which is based on example code by Stefan Gustavson (stegu@itn.liu.se).\n * With Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\n * Better rank ordering method by Stefan Gustavson in 2012.\n */\nexport default class Simplex extends Noise {\n    /**\n     * @param gradients Random gradients\n     */\n    constructor(gradients = 256) {\n        super();\n        this._gradients = [\n            [0, -1],\n            [1, -1],\n            [1, 0],\n            [1, 1],\n            [0, 1],\n            [-1, 1],\n            [-1, 0],\n            [-1, -1]\n        ];\n        let permutations = [];\n        for (let i = 0; i < gradients; i++) {\n            permutations.push(i);\n        }\n        permutations = RNG.shuffle(permutations);\n        this._perms = [];\n        this._indexes = [];\n        for (let i = 0; i < 2 * gradients; i++) {\n            this._perms.push(permutations[i % gradients]);\n            this._indexes.push(this._perms[i] % this._gradients.length);\n        }\n    }\n    get(xin, yin) {\n        let perms = this._perms;\n        let indexes = this._indexes;\n        let count = perms.length / 2;\n        let n0 = 0, n1 = 0, n2 = 0, gi; // Noise contributions from the three corners\n        // Skew the input space to determine which simplex cell we're in\n        let s = (xin + yin) * F2; // Hairy factor for 2D\n        let i = Math.floor(xin + s);\n        let j = Math.floor(yin + s);\n        let t = (i + j) * G2;\n        let X0 = i - t; // Unskew the cell origin back to (x,y) space\n        let Y0 = j - t;\n        let x0 = xin - X0; // The x,y distances from the cell origin\n        let y0 = yin - Y0;\n        // For the 2D case, the simplex shape is an equilateral triangle.\n        // Determine which simplex we are in.\n        let i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n        if (x0 > y0) {\n            i1 = 1;\n            j1 = 0;\n        }\n        else { // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n            i1 = 0;\n            j1 = 1;\n        } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n        // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n        // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n        // c = (3-sqrt(3))/6\n        let x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n        let y1 = y0 - j1 + G2;\n        let x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\n        let y2 = y0 - 1 + 2 * G2;\n        // Work out the hashed gradient indices of the three simplex corners\n        let ii = mod(i, count);\n        let jj = mod(j, count);\n        // Calculate the contribution from the three corners\n        let t0 = 0.5 - x0 * x0 - y0 * y0;\n        if (t0 >= 0) {\n            t0 *= t0;\n            gi = indexes[ii + perms[jj]];\n            let grad = this._gradients[gi];\n            n0 = t0 * t0 * (grad[0] * x0 + grad[1] * y0);\n        }\n        let t1 = 0.5 - x1 * x1 - y1 * y1;\n        if (t1 >= 0) {\n            t1 *= t1;\n            gi = indexes[ii + i1 + perms[jj + j1]];\n            let grad = this._gradients[gi];\n            n1 = t1 * t1 * (grad[0] * x1 + grad[1] * y1);\n        }\n        let t2 = 0.5 - x2 * x2 - y2 * y2;\n        if (t2 >= 0) {\n            t2 *= t2;\n            gi = indexes[ii + 1 + perms[jj + 1]];\n            let grad = this._gradients[gi];\n            n2 = t2 * t2 * (grad[0] * x2 + grad[1] * y2);\n        }\n        // Add contributions from each corner to get the final noise value.\n        // The result is scaled to return values in the interval [-1,1].\n        return 70 * (n0 + n1 + n2);\n    }\n}\n","import { DIRS } from \"../constants.js\";\n/**\n * @class Abstract pathfinder\n * @param {int} toX Target X coord\n * @param {int} toY Target Y coord\n * @param {function} passableCallback Callback to determine map passability\n * @param {object} [options]\n * @param {int} [options.topology=8]\n */\nexport default class Path {\n    constructor(toX, toY, passableCallback, options = {}) {\n        this._toX = toX;\n        this._toY = toY;\n        this._passableCallback = passableCallback;\n        this._options = Object.assign({\n            topology: 8\n        }, options);\n        this._dirs = DIRS[this._options.topology];\n        if (this._options.topology == 8) { /* reorder dirs for more aesthetic result (vertical/horizontal first) */\n            this._dirs = [\n                this._dirs[0],\n                this._dirs[2],\n                this._dirs[4],\n                this._dirs[6],\n                this._dirs[1],\n                this._dirs[3],\n                this._dirs[5],\n                this._dirs[7]\n            ];\n        }\n    }\n    _getNeighbors(cx, cy) {\n        let result = [];\n        for (let i = 0; i < this._dirs.length; i++) {\n            let dir = this._dirs[i];\n            let x = cx + dir[0];\n            let y = cy + dir[1];\n            if (!this._passableCallback(x, y)) {\n                continue;\n            }\n            result.push([x, y]);\n        }\n        return result;\n    }\n}\n","import Dijkstra from \"./dijkstra.js\";\nimport AStar from \"./astar.js\";\nexport default { Dijkstra, AStar };\n","import Path from \"./path.js\";\n/**\n * @class Simplified Dijkstra's algorithm: all edges have a value of 1\n * @augments ROT.Path\n * @see ROT.Path\n */\nexport default class Dijkstra extends Path {\n    constructor(toX, toY, passableCallback, options) {\n        super(toX, toY, passableCallback, options);\n        this._computed = {};\n        this._todo = [];\n        this._add(toX, toY, null);\n    }\n    /**\n     * Compute a path from a given point\n     * @see ROT.Path#compute\n     */\n    compute(fromX, fromY, callback) {\n        let key = fromX + \",\" + fromY;\n        if (!(key in this._computed)) {\n            this._compute(fromX, fromY);\n        }\n        if (!(key in this._computed)) {\n            return;\n        }\n        let item = this._computed[key];\n        while (item) {\n            callback(item.x, item.y);\n            item = item.prev;\n        }\n    }\n    /**\n     * Compute a non-cached value\n     */\n    _compute(fromX, fromY) {\n        while (this._todo.length) {\n            let item = this._todo.shift();\n            if (item.x == fromX && item.y == fromY) {\n                return;\n            }\n            let neighbors = this._getNeighbors(item.x, item.y);\n            for (let i = 0; i < neighbors.length; i++) {\n                let neighbor = neighbors[i];\n                let x = neighbor[0];\n                let y = neighbor[1];\n                let id = x + \",\" + y;\n                if (id in this._computed) {\n                    continue;\n                } /* already done */\n                this._add(x, y, item);\n            }\n        }\n    }\n    _add(x, y, prev) {\n        let obj = {\n            x: x,\n            y: y,\n            prev: prev\n        };\n        this._computed[x + \",\" + y] = obj;\n        this._todo.push(obj);\n    }\n}\n","export const defaultLight = \"antiquewhite\"\nexport const defaultDark = \"#4a1e06\"\n\nexport const black = \"black\"\n\nexport const highlightTile = \"yellow\"\n\nexport const floorDark = \"#909090\"\nexport const floorLight = \"#C8C8C8\"\nexport const wallDark = \"#404040\"\nexport const wallLight = black\n\n\n\nexport const playerDeath = \"#FF3030\"\nexport const enemyDeath = \"#FFA030\"\n","import * as colors from \"../ui/colors\"\n\n\nexport class TerrainAspect {\n\tchar: string\n\tfgColor: string\n\tbgColor: string\n\n\tconstructor(char: string, fgColor: string, bgColor: string) {\n\t\tthis.char = char\n\t\tthis.fgColor = fgColor\n\t\tthis.bgColor = bgColor\n\t}\n}\n\nexport class Terrain {\n\twalkable: boolean\n\ttransparent: boolean\n\tdarkTile: TerrainAspect\n\tlightTile: TerrainAspect\n\n\tconstructor(walkable: boolean, transparent: boolean, darkTile: TerrainAspect, lightTile: TerrainAspect) {\n\t\tthis.walkable = walkable\n\t\tthis.transparent = transparent\n\t\tthis.darkTile = darkTile\n\t\tthis.lightTile = lightTile\n\t}\n}\n\nexport const UnexploredTile = new TerrainAspect(\"\\u2591\", \"#909090\", \"black\")\n\nexport const Floor = new Terrain(true, true, \n\tnew TerrainAspect(\".\", colors.black, colors.floorDark),\n\tnew TerrainAspect(\".\", colors.black, colors.floorLight),\n)\n\nexport const Wall = new Terrain(false, false, \n\tnew TerrainAspect(\" \", colors.wallDark, colors.wallDark),\n\tnew TerrainAspect(\" \", colors.wallLight, colors.wallLight),\n)\n","export class BlockingQueue<T> {\n\tprivate _promises: Promise<T>[];\n\tprivate _resolvers: ((t: T) => void)[];\n\n\tconstructor() {\n\t\tthis._resolvers = [];\n\t\tthis._promises = [];\n\t}\n\n\tprivate _add() {\n\t\tthis._promises.push(new Promise(resolve => {\n\t\t\tthis._resolvers.push(resolve);\n\t\t}));\n\t}\n\n\tenqueue(t: T) {\n\t\tif (!this._resolvers.length)\n\t\t\tthis._add();\n\n\t\tconst resolve = this._resolvers.shift()!;\n\t\tresolve(t);\n\t}\n\n\tdequeue() {\n\t\tif (!this._promises.length)\n\t\t\tthis._add();\n\n\t\tconst promise = this._promises.shift()!;\n\t\treturn promise;\n\t}\n\n\tisEmpty() {\n\t\treturn !this._promises.length;\n\t}\n\n\tisBlocked() {\n\t\treturn !!this._resolvers.length;\n\t}\n\n\tget length() {\n\t\treturn this._promises.length - this._resolvers.length;\n\t}\n}\n\n\nexport function removeFromList<T>(items: T[], toRemove: T) {\n\treturn items.filter(x => (x !== toRemove))\n}\n\n\n\nexport class Dictionary<T> {\n\t[key: string]: T;\n}\n\nexport class TypedDictionary<TK, TV> {\n\tprivate values = new Dictionary<TV>()\n\n\tgetValue(k: TK): TV {\n\t\treturn <TV>this.values[k.toString()]\n\t}\n\n\tsetValue(k: TK, v: TV): void {\n\t\tthis.values[k.toString()] = v\n\t}\n\n\tdeleteValue(k: TK): void {\n\t\tdelete this.values[k.toString()]\n\t}\n}\n\n\n\nexport function getRandomInt(min: number=0, max: number) {\n\treturn Math.floor(Math.random() * (max - min + 1) + min)\n}","import * as ROT from \"rot-js\"\n\nimport { Terrain } from \"./terrain\"\nimport { Entity, Actor, Site } from \"./entities\"\nimport { getRandomInt } from \"../util\" \nimport { maxMapWidth, maxMapHeight } from \"../layout\"\n\n\nconst UI_DEBUGGING = true\n\nexport class GameMap {\n\tname: string\n\tlabel: string\n\twidth: number\n\theight: number\n\ttiles: Terrain[][]\n\tentities: Set<Entity> = new Set()\n\tvisible: boolean[][]\n\texplored: boolean[][]\n\tstartingPos?: [number, number]\n\t\n\n\tconstructor(name: string, label: string, width: number, height: number, tiles?: Terrain[][]) {\n\t\tthis.name = name\n\t\tthis.label = label\n\t\tthis.width = width\n\t\tthis.height = height\n\t\tthis.tiles = tiles\n\n\t\tthis.visible = []\n\t\tthis.explored = []\n\t\tfor (let x = 0; x < width; x++) {\n\t\t\tthis.visible.push([])\n\t\t\tthis.explored.push([])\n\t\t\tfor (let y=0; y < height; y++) {\n\t\t\t\tthis.visible[x].push(false)\n\t\t\t\tif (UI_DEBUGGING)\n\t\t\t\t\tthis.explored[x].push(true)\n\t\t\t\telse\n\t\t\t\t\tthis.explored[x].push(false)\n\t\t\t}\n\t\t}\n\t}\n\n\tget xOffset(): number {\n\t\treturn Math.floor((maxMapWidth - this.width) / 2)\n\t}\n\tget yOffset(): number {\n\t\treturn Math.floor((maxMapHeight - this.height) / 2)\n\t}\n\n\n\tresetVisible(): void {\n\t\tfor (let x = 0; x < this.width; x++) {\n\t\t\tfor (let y = 0; y < this.height; y++) {\n\t\t\t\tthis.visible[x][y] = false\n\t\t\t}\n\t\t}\n\n\t}\n\n\tplace(e: Entity, x: number, y: number): void {\n\t\te.x = x\n\t\te.y = y\n\n\t\t//TODO: remove e from old map entities\n\t\tthis.entities.add(e)\n\t}\n\n\tinBounds(x: number, y: number): boolean {\n\t\treturn (0 <= x && x < this.width && 0 <= y && y < this.height)\n\t}\n\n\n\tgetActorAt(x: number, y: number): Actor {\n\t\tfor (let e of this.entities) {\n\t\t\tif (e.x == x && e.y == y && (e instanceof Actor) && (e.stats))\n\t\t\t\treturn e\n\t\t}\n\n\t\treturn null\n\t}\n\n\tgetSiteAt(x: number, y: number): Site {\n\t\tfor (let e of this.entities) {\n\t\t\tif (e.x == x && e.y == y && (e instanceof Site))\n\t\t\t\treturn e\n\t\t}\n\n\t\treturn null\n\t}\n\n\tgetBlockingEntityAt(x: number, y: number): Entity {\n\t\tfor (let e of this.entities) {\n\t\t\tif (e.x == x && e.y == y && e.isBlocking)\n\t\t\t\treturn e\n\t\t}\n\n\t\treturn null\n\t}\n\n\n\tgetEntitiesAt(x: number, y: number): Entity[] {\n\t\tlet result: Entity[] = []\n\n\t\tfor (let e of this.entities) {\n\t\t\tif (e.x == x && e.y == y)\n\t\t\t\tresult.push(e)\n\t\t}\n\n\t\treturn result\n\t}\n\n\tplaceRandom(entity: Entity): void {\n\t\tlet x: number\n\t\tlet y: number\n\n\t\twhile (true) {\n\t\t\tx = getRandomInt(0, this.width - 1)\n\t\t\ty = getRandomInt(0, this.height - 1)\n\n\t\t\tif (this.tiles[x][y].walkable && (!this.getBlockingEntityAt(x, y)))\n\t\t\t\tbreak\n\t\t}\n\n\t\tthis.place(entity, x, y)\n\t}\n\n\n\n}\n","export const maxMapWidth = 60\nexport const maxMapHeight = 36\n\nexport const lightRadius = 8\n","import { Terrain, TerrainAspect } from \"../game/terrain\"\nimport { Site } from \"../game/entities\"\nimport { GameMap } from \"../game/map\"\nimport { Dictionary } from \"../util\"\n\nconst dataDir = \"./data\"\n\nexport var terrainDefs: Dictionary<Terrain>\nexport var gameMaps = new Dictionary<GameMap>()\n\n\nenum DataType {\n\tTerrainDef,\n\tMap,\n}\n\nexport async function loadAllData(): Promise<any> {\n\tterrainDefs = await loadData(\"terrains.txt\", DataType.TerrainDef)\n\t\n\tconst mapFiles = [ \"test_map_world.txt\", \"test_map_milano.txt\" ]\n\tlet promises: Promise<void>[] = []\n\n\tfor (let f of mapFiles)\n\t\tpromises.push(loadData(f, DataType.Map))\n\t\n\treturn Promise.all(promises)\n}\n\n\nexport async function loadData(filename: string, dataType: DataType): Promise<any> {\n\tconsole.log(`loadData(${filename})`)\n\n\tlet parseFunction: { (rawText: string): any }\n\tswitch (dataType) {\n\t\tcase DataType.TerrainDef:\n\t\t\tparseFunction = parseTerrainDef\n\t\t\tbreak\n\t\tcase DataType.Map:\n\t\t\tparseFunction = parseMaps\n\t\t\tbreak\n\t\tdefault:\n\t\t\tparseFunction = null\n\t}\n\n\treturn await fetch(`${dataDir}/${filename}`).then(res => {\n\t\treturn res.text().then(text => parseFunction(text))\n\t})\n}\n\n\n\nfunction parseTerrainDef(text: string): Dictionary<Terrain> {\n\tlet terrains = new Dictionary<Terrain>()\n\tlet lines: string[] = text.split(\"\\n\")\n\n\tfor (let line of lines) {\n\t\tif ((line.startsWith(\"#\")) || line.trim() == \"\") {\n\t\t\t//comment or blank line\n\t\t\tcontinue\n\n\t\t} else {\n\t\t\tlet tokens = line.split(\"|\")\n\t\t\tif (tokens.length != 9) {\n\t\t\t\tconsole.log(\"!! Malformed terrain definition line\")\n\t\t\t\tconsole.log(`[${line}]`)\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tlet name = tokens[0]\n\t\t\tlet walkable = (tokens[1].toLowerCase() == \"true\")\n\t\t\tlet transparent = (tokens[2].toLowerCase() == \"true\")\n\t\t\tlet darkChar = tokens[3]\n\t\t\tlet darkFgColor = tokens[4]\n\t\t\tlet darkBgColor = tokens[5]\n\t\t\tlet lightChar = tokens[6]\n\t\t\tlet lightFgColor = tokens[7]\n\t\t\tlet lightBgColor = tokens[8]\n\n\t\t\t//TODO: validate fields better\n\n\t\t\tlet newTerrain = new Terrain(\n\t\t\t\twalkable,\n\t\t\t\ttransparent,\n\t\t\t\tnew TerrainAspect(darkChar, darkFgColor, darkBgColor),\n\t\t\t\tnew TerrainAspect(lightChar, lightFgColor, lightBgColor),\n\t\t\t)\n\n\t\t\tterrains[name] = newTerrain\n\t\t}\n\t}\n\n\treturn terrains\n}\n\n\nenum MapSection {\n\tMetadata,\n\tTerrainCodes,\n\tTileList,\n\tItemList,\n\tSiteList,\n}\n\nfunction parseMaps(text: string): void {\n\tlet lines: string[] = text.split(\"\\n\")\n\tlet tokens: string[]\n\tlet currSection: MapSection\n\tlet terrainCodes = new Dictionary<Terrain>()\n\tlet metadata: Dictionary<string>\n\tlet tiles: Terrain[][]\n\tlet sites: Site[]\n\n\n\tfor (let line of lines) {\n\t\tif ((line.startsWith(\"#\")) || line.trim() == \"\") {\n\t\t\t//comment or blank line\n\t\t\tcontinue\n\n\t\t} else if (line.trim().toLowerCase() == \"%%map\") {\n\t\t\t//end old map, start new map\n\t\t\tif (metadata) {\n\t\t\t\tlet map = makeMap(metadata, tiles, sites)\n\t\t\t\tif (map)\n\t\t\t\t\tgameMaps[map.name] = map\n\t\t\t}\n\n\t\t\tmetadata = new Dictionary<string>()\n\t\t\ttiles = []\n\t\t\tsites = []\n\n\t\t} else if (line.startsWith(\"%\")) {\n\t\t\tlet sectionName = line.substring(1).trim().toLowerCase()\n\t\t\tif (sectionName === \"metadata\")\n\t\t\t\tcurrSection = MapSection.Metadata\n\t\t\telse if (sectionName === \"terrain_codes\")\n\t\t\t\tcurrSection = MapSection.TerrainCodes\n\t\t\telse if (sectionName === \"tile_list\")\n\t\t\t\tcurrSection = MapSection.TileList\n\t\t\telse if (sectionName === \"item_list\")\n\t\t\t\tcurrSection = MapSection.ItemList\n\t\t\telse if (sectionName === \"site_list\")\n\t\t\t\tcurrSection = MapSection.SiteList\n\t\t\telse\n\t\t\t\tconsole.log(`!! Invalid section name: ${sectionName}`)\n\t\t\t\n\t\t} else {\n\t\t\tswitch (currSection) {\n\t\t\t\tcase null:\n\t\t\t\t\tconsole.log(\"!! Invalid data before section start:\")\n\t\t\t\t\tconsole.log(line)\n\t\t\t\t\tbreak\n\n\t\t\t\tcase MapSection.Metadata:\n\t\t\t\t\tif (!line.includes(\":\")) {\n\t\t\t\t\t\tconsole.log(\"!! Invalid metadata:\")\n\t\t\t\t\t\tconsole.log(line)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlet tokens = line.split(\":\")\n\t\t\t\t\t\tmetadata[tokens[0]] = tokens[1]\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\n\t\t\t\tcase MapSection.TerrainCodes:\n\t\t\t\t\tif (!line.includes(\":\")) {\n\t\t\t\t\t\tconsole.log(\"!! Invalid terrain code:\")\n\t\t\t\t\t\tconsole.log(line)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlet tokens = line.split(\":\")\n\t\t\t\t\t\tlet tCode = tokens[0]\n\t\t\t\t\t\tlet tName = tokens[1]\n\t\t\t\t\t\tif (!(tName in terrainDefs)) {\n\t\t\t\t\t\t\tconsole.log(`!! Unknown terrain: [${tName}]`)\n\t\t\t\t\t\t\tconsole.log(line)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tterrainCodes[tCode] = terrainDefs[tName]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\n\t\t\t\tcase MapSection.TileList:\n\t\t\t\t\ttokens = line.split(\"|\")\n\t\t\t\t\tlet tileRow: Terrain[] = []\n\t\t\t\t\tlet rowOk = true\n\n\t\t\t\t\tfor (let t of tokens) {\n\t\t\t\t\t\tif (!(t in terrainCodes)) {\n\t\t\t\t\t\t\tconsole.log(`!! Unknown terrain code: [${t}]`)\n\t\t\t\t\t\t\trowOk = false\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttileRow.push(terrainCodes[t])\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (rowOk) {\n\t\t\t\t\t\ttiles.push(tileRow)\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak\n\n\t\t\t\tcase MapSection.ItemList:\n\t\t\t\t\t//TODO: MapSection.ItemList\n\t\t\t\t\tbreak\n\n\t\t\t\tcase MapSection.SiteList:\n\t\t\t\t\t//name | label | pos_x | pos_y | [char] | [map]\n\t\t\t\t\ttokens = line.split(\"|\")\n\t\t\t\t\tif (tokens.length != 7) {\n\t\t\t\t\t\tconsole.log(`!! Malformed site record: [${line}]`)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlet name  = tokens[0]\n\t\t\t\t\t\tlet xPos  = +tokens[1]\n\t\t\t\t\t\tlet yPos  = +tokens[2]\n\t\t\t\t\t\tlet char  = tokens[3]\n\t\t\t\t\t\tlet color = tokens[4]\n\t\t\t\t\t\tlet darkColor = tokens[5]\n\t\t\t\t\t\tlet mapName = tokens[6]\n\n\t\t\t\t\t\tif (char == \"\")\n\t\t\t\t\t\t\tchar = null\n\t\t\t\t\t\tif (color == \"\")\n\t\t\t\t\t\t\tcolor = null\n\t\t\t\t\t\tif (darkColor == \"\")\n\t\t\t\t\t\t\tdarkColor = null\n\t\t\t\t\t\t\n\t\t\t\t\t\tlet site = new Site(name, char, color, darkColor, mapName)\n\t\t\t\t\t\tsite.x = xPos\n\t\t\t\t\t\tsite.y = yPos\n\t\t\t\t\t\tsites.push(site)\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak\n\n\t\t\t\tdefault:\n\t\t\t\t\t//do nothing\n\t\t\t}\n\t\t}\n\t}\n\n\tlet map = makeMap(metadata, tiles, sites)\n\tif (map)\n\t\tgameMaps[map.name] = map\n}\n\n\nfunction makeMap(metadata: Dictionary<string>, tiles: Terrain[][], sites: Site[]): GameMap {\n\n\tlet mandatoryMetadata: string[] = [\"name\", \"width\", \"height\"]\n\tfor (let mm of mandatoryMetadata) {\n\t\tif (!(mm in metadata)) {\n\t\t\tconsole.log(`!! Missing mandatory metadata [${mm}]`)\n\t\t\treturn null\n\t\t}\n\t}\n\n\tlet mapName = metadata[\"name\"]\n\tlet mapLabel = metadata[\"label\"]\n\tif (!mapLabel)\n\t\tmapLabel = mapName\n\tlet w = +metadata[\"width\"]\n\tlet h = +metadata[\"height\"]\n\n\tif (tiles.length != h) {\n\t\tconsole.log(`!! Inconsistent map dimensions; found h: ${tiles.length}, expected: ${h}`)\n\t\treturn null\n\t}\n\n\tfor (let tileRow of tiles) {\n\t\tif (tileRow.length != w) {\n\t\t\tconsole.log(`!! Inconsistent map dimensions; found w: ${tileRow.length}, expected: ${w}`)\n\t\t\treturn null\n\t\t}\n\t}\n\n\tlet map = new GameMap(mapName, mapLabel, w, h, transpose<Terrain>(tiles))\n\n\tfor (let site of sites) {\n\t\tsite.parent = map\n\t\tmap.entities.add(site)\n\t}\n\n\tif (\"startingX\" in metadata && \"startingY\" in metadata)\n\t\tmap.startingPos = [+metadata[\"startingX\"], +metadata[\"startingY\"]]\n\t\t\n\treturn map\n}\n\n\nfunction transpose<T>(orig: T[][]) {\n\tlet res: T[][] = []\n\n\tfor (let x = 0; x < orig[0].length; x++) {\n\t\tres.push([])\n\t\tfor (let y = 0; y < orig.length; y++) {\n\t\t\tres[x].push(orig[y][x])\n\t\t}\n\t}\n\n\treturn res\n}","import { Entity, Actor, Item, Site } from \"./entities\"\nimport { Engine } from \"./engine\"\nimport { gameMaps } from \"../loaders/map_loader\"\n\n\nexport interface ActionResult {\n\tsuccess: boolean\n\treason?: string\n}\n\nexport abstract class Action {\n\tactor: Actor\n\tengine: Engine\n\n\tconstructor(engine: Engine, actor: Actor) {\n\t\tthis.engine = engine\n\t\tthis.actor = actor\n\t}\n\n\tabstract perform(): ActionResult\n}\n\nexport class WaitAction extends Action {\n\tperform(): ActionResult {\n\t\t//do nothing, spend a turn\n\t\tif (this.engine.map.visible[this.actor.x][this.actor.x])\n\t\t\tthis.engine.messageLog.addMessage(this.actor.name + \" is waiting... \")\n\n\t\treturn { success: true }\n\t}\n}\n\n/** Pickup an item and add it to the inventory, if there is room for it */\nexport class PickupAction extends Action {\n\tperform(): ActionResult {\n\t\tlet actorX = this.actor.x\n\t\tlet actorY = this.actor.y\n\t\tlet inventory = this.actor.inventory\n\n\t\tfor (let e of this.engine.map.entities) {\n\t\t\tif (!(e instanceof Item))\n\t\t\t\tcontinue\n\n\t\t\tlet item = <Item>e\n\t\t\tif (actorX != item.x || actorY != item.y)\n\t\t\t\tcontinue\n\n\t\t\tif (inventory.items.size >= inventory.capacity)\n\t\t\t\treturn { success: false, reason: `${this.actor.name} inventory is full` }\n\n\t\t\tthis.engine.map.entities.delete(item)\n\n\t\t\titem.parent = this.actor.inventory\n\t\t\tinventory.items.add(item)\n\n\t\t\tthis.engine.messageLog.addMessage(`${this.actor.name} picks up the ${item.name}`)\n\t\t\treturn { success: true }\n\n\t\t}\n\n\t\treturn { success: false, reason: \"There is nothing here to pick up\" }\n\t}\n}\n\n//-----------------------------------------------------\n// Direction Actions\n//-----------------------------------------------------\n\nabstract class DirectionAction extends Action {\n\tdx: number\n\tdy: number\n\n\tconstructor(engine: Engine, actor: Actor, dx: number, dy: number) {\n\t\tsuper(engine, actor)\n\t\tthis.dx = dx\n\t\tthis.dy = dy\n\t}\n\t\n\t/** Returns this actions destination */\n\tget destXY(): [number, number] {\n\t\treturn [this.actor.x + this.dx, this.actor.y + this.dy]\n\t}\n\n\n\t/** Return the actor at this actions destination */\n\tget targetActor(): Actor {\n\t\treturn this.engine.map.getActorAt(this.destXY[0], this.destXY[1])\n\t}\n\n\t/** Return the site at this actions destination */\n\tget targetSite(): Site {\n\t\treturn this.engine.map.getSiteAt(this.destXY[0], this.destXY[1])\n\t}\n\n\tabstract perform(): ActionResult\n}\n\nexport class BumpAction extends DirectionAction {\n\tperform(): ActionResult {\n\t\tif (this.targetActor)\n\t\t\treturn (new MeleeAction(this.engine, this.actor, this.dx, this.dy)).perform()\n\t\telse if (this.targetSite)\n\t\t\treturn (new EnterMapAction(this.engine, this.actor, this.dx, this.dy)).perform()\n\n\t\telse\n\t\t\treturn (new MovementAction(this.engine, this.actor, this.dx, this.dy)).perform()\n\t}\n}\n\n\nexport class MeleeAction extends DirectionAction {\n\tperform(): ActionResult {\n\t\tlet target = this.targetActor\n\t\tif (!target)\n\t\t\treturn { success: false, reason: \"Nothing to attack\" }\n\n\t\tlet damage = this.actor.stats.att - target.stats.def\n\t\tlet attackDesc = `${this.actor.name} attacks ${target.name}`\n\n\t\tlet msgClass\n\t\tif (this.actor === this.engine.player)\n\t\t\tmsgClass = \"player-attack\"\n\t\telse\n\t\t\tmsgClass = \"enemy-attack\"\n\n\t\tif (damage > 0) {\n\t\t\tthis.engine.messageLog.addMessage(`\\u2694 ${attackDesc} for ${damage} hit points`, msgClass)\n\t\t\ttarget.stats.hp -= damage\n\t\t} else {\n\t\t\tthis.engine.messageLog.addMessage(`\\u2694 ${attackDesc} but does no damage`, msgClass)\n\t\t}\n\t\t\n\t\treturn { success: true }\n\t}\n}\n\nexport class MovementAction extends DirectionAction {\n\tperform(): ActionResult {\n\t\tlet [destX, destY] = this.destXY\n\n\t\tif (!this.engine.map.inBounds(destX, destY))\n\t\t\treturn (new ExitMapAction(this.engine, this.actor, this.dx, this.dy)).perform()\n\n\t\tif (!this.engine.map.tiles[destX][destY].walkable)\n\t\t\treturn { success: false, reason: \"That way is blocked\" }\n\n\t\tif (this.engine.map.getBlockingEntityAt(destX, destY))\n\t\t\treturn { success: false, reason: \"That way is blocked\" }\n\n\t\tthis.actor.move(this.dx, this.dy)\n\t\treturn { success: true }\n\t}\n}\n\n\nexport class EnterMapAction extends DirectionAction {\n\tperform(): ActionResult {\n\t\tlet target = this.targetSite\n\t\tif (!target)\n\t\t\treturn { success: false, reason: \"No site to enter\" }\n\n\t\tthis.engine.messageLog.addMessage(`Entering ${target.name}`)\n\t\tthis.actor.move(this.dx, this.dy)\n\n\t\tif (!(target.mapName in gameMaps))\n\t\t\treturn { success: false, reason: `Unknown map: [${target.mapName}]` }\n\t\tthis.engine.world.pushMap(gameMaps[target.mapName])\n\t\t\n\t\treturn { success: true }\n\t}\n}\n\nexport class ExitMapAction extends DirectionAction {\n\tperform(): ActionResult {\n\t\tif (this.engine.world.mapStack.length > 1) {\n\t\t\tthis.engine.world.popMap()\n\t\t\tthis.engine.messageLog.addMessage(`Returning to ${this.engine.world.currMap.name}`)\n\t\t\treturn { success: true }\n\t\t} else {\n\t\t\treturn { success: false, reason: \"That way is blocked\" }\n\t\t}\n\t}\n}\n\n//-----------------------------------------------------\n// Item Actions\n//-----------------------------------------------------\n\nexport abstract class ItemAction extends Action {\n\titem: Item\n\ttargetXY: [number, number]\n\n\tconstructor(game: Engine, actor: Actor, item: Item, targetXY?: [number, number]) {\n\t\tsuper(game, actor)\n\t\tthis.item = item\n\t\tif (targetXY)\n\t\t\tthis.targetXY = targetXY\n\t\telse\n\t\t\tthis.targetXY = [actor.x, actor.y]\n\t}\n\n\t/** Return the actor at this actions destination */\n\tget targetActor(): Actor {\n\t\treturn this.engine.map.getActorAt(this.targetXY[0], this.targetXY[1])\n\t}\n\n\tabstract perform(): ActionResult\n}\n\n\nexport class DropAction extends ItemAction {\n\tperform(): ActionResult {\n\t\tif (this.actor.inventory.items.has(this.item)) {\n\t\t\tthis.actor.inventory.drop(this.item)\n\n\t\t\tthis.engine.messageLog.addMessage(`${this.actor.name} drops the ${this.item.name}`)\n\n\t\t\treturn { success: true }\n\n\t\t} else {\n\t\t\treturn { success: false, reason: `${this.actor.name} doesn't have that item` }\n\t\t}\n\t}\n}\n\nexport class UseAction extends ItemAction {\n\tperform(): ActionResult {\n\t\tif (this.item.consumable) {\n\t\t\treturn this.item.consumable.use(this)\n\t\t}\n\t}\n}\n\nexport class EquipAction extends ItemAction {\n\tperform(): ActionResult {\n\t\tif (this.item.equippable) {\n\t\t\tthis.actor.equipment.toggle(this.item)\n\t\t\treturn { success: true }\n\t\t} else {\n\t\t\treturn { success: false, reason: \"This item is not equippable\" }\n\t\t}\n\t}\n}\n\n\nexport class CombineAction extends Action {\n\titem1: Item\n\titem2: Item\n\n\tconstructor(engine: Engine, actor: Actor, item1: Item, item2: Item) {\n\t\tsuper(engine, actor)\n\t\tthis.item1 = item1\n\t\tthis.item2 = item2\n\t}\n\n\tperform(): ActionResult {\n\t\tif (this.item1.combinable && this.item2.combinable)\n\t\t\treturn this.item1.combinable.combine(this.item2.combinable)\n\t\telse\n\t\t\treturn { success: false, reason: \"Only ingredients can be combined\" }\n\t}\n\n}\n\n","import { Path } from \"rot-js\"\n\nimport { Engine } from \"../game/engine\"\nimport { Actor } from \"../game/entities\"\nimport { Action, MeleeAction, MovementAction, WaitAction } from \"../game/actions\"\n\n\nexport abstract class AI {\n\tengine: Engine\n\tparent: Actor\n\n\tconstructor(engine: Engine, parent: Actor) {\n\t\tthis.engine = engine\n\t\tthis.parent = parent\n\t}\n\n\t/** \n\t * Compute and return a path to the target position.\n\t * If there is no valid path then returns an empty list.\n\t */\n\tgetPathTo(destX: number, destY: number): [number, number][] {\n\t\tlet map = this.engine.map\n\t\tlet walkables: boolean[][] = []\n\n\t\tfor (let x=0; x < map.width; x++) {\n\t\t\twalkables.push([])\n\t\t\tfor (let y = 0; y < map.height; y++) {\n\t\t\t\twalkables[x].push(map.tiles[x][y].walkable)\n\t\t\t}\n\t\t}\n\n\t\tfor (let e of map.entities) {\n\t\t\tif (e.isBlocking && !(e === this.parent) && !(e.x == destX && e.y == destY))\n\t\t\t\twalkables[e.x][e.y] = false\n\t\t}\n\n\t\tlet passableCallback = function (x: number, y: number): boolean {\n\t\t\treturn walkables[x][y]\n\t\t}\n\n\t\tlet outputPath: [number, number][] = []\n\t\tlet outputCallback = function (x: number, y: number): void {\n\t\t\toutputPath.push([x, y])\n\t\t}\n\n\t\tlet dijkstra = new Path.Dijkstra(destX, destY, passableCallback, null)\n\t\tdijkstra.compute(this.parent.x, this.parent.y, outputCallback)\n\n\t\t//remove starting position from path\n\t\toutputPath.shift()\n\t\t\n\t\treturn outputPath\n\t}\n\n\tabstract chooseAction(): Promise<Action>\n}\n\n\nexport class EnemyAI extends AI {\n\tpath: [number, number][] = []\n\n\tasync chooseAction(): Promise<Action> {\n\t\tconsole.log(\"EnemyAI.chooseAction\")\n\t\tlet target = this.engine.player\n\n\t\tlet dx = target.x - this.parent.x\n\t\tlet dy = target.y - this.parent.y\n\t\tlet distance = Math.max(Math.abs(dx), Math.abs(dy))\n\n\t\tif (this.engine.map.visible[this.parent.x][this.parent.y]) {\n\t\t\t//if monster is visible to player, \n\t\t\t//then player is visible to monster\n\t\t\tif (distance <= 1)\n\t\t\t\treturn new MeleeAction(this.engine, this.parent, dx, dy)\n\n\t\t\tthis.path = this.getPathTo(target.x, target.y)\n\t\t}\n\n\t\tif (this.path.length) {\n\t\t\tlet [destX, destY] = this.path.shift()\n\t\t\tconsole.log(\"EnemyAI chose MovementAction\")\n\n\t\t\treturn new MovementAction(this.engine, this.parent, \n\t\t\t\tdestX - this.parent.x, destY - this.parent.y)\n\t\t}\n\n\t\treturn new WaitAction(this.engine, this.parent)\n\t}\n}\n\n\nexport class PlayerAI extends AI {\n\tasync chooseAction(): Promise<Action> {\n\t\treturn this.engine.playerActionQueue.dequeue()\n\t}\n}\n","\nimport { Engine } from \"./engine\"\nimport { GameMap } from \"./map\"\nimport { Stats } from \"../components/stats\"\nimport { Inventory } from \"../components/inventory\"\nimport { Equipment } from \"../components/equipment\"\nimport { AI, PlayerAI } from \"../components/ai\"\nimport { Consumable } from \"../components/consumable\"\nimport { Equippable } from \"../components/equippable\"\nimport { Combinable } from \"../components/combinable\"\n\n\nexport enum RenderOrder {\n\tSite,\n\tCorpse,\n\tItem,\n\tActor\n}\n\n\nexport class Entity {\n\tname: string\n\tchar: string\n\tcolor: string\n\tisBlocking: boolean\n\tx: number\n\ty: number\n\trenderOrder: RenderOrder\n\n\n\tconstructor(name: string, char = \"?\", color = \"darkgrey\", isBlocking = false, renderOrder = RenderOrder.Item) {\n\t\tthis.name = name\n\t\tthis.char = char\n\t\tthis.color = color\n\t\tthis.isBlocking = isBlocking\n\t\tthis.renderOrder = renderOrder\n\t\tthis.x = 0\n\t\tthis.y = 0\n\t}\n\n\tmove(dx: number, dy: number) {\n\t\tthis.x += dx\n\t\tthis.y += dy\n\t}\n}\n\n\nexport class Actor extends Entity {\n\tengine: Engine\n\tstats?: Stats\n\tinventory?: Inventory\n\tequipment?: Equipment\n\tai?: AI\n\n\tconstructor(engine: Engine, name: string, char = \"?\", color = \"black\") {\n\t\tsuper(name, char, color, true, RenderOrder.Actor)\n\t\tthis.engine = engine\n\t}\n\n\tasync act() {\n\t\tif (this.ai) {\n\t\t\twhile (true) {\n\t\t\t\tlet a = await this.ai.chooseAction()\n\t\t\t\tconsole.log(`Performing ${a.constructor.name}`)\n\t\t\t\t//console.log(a)\n\n\t\t\t\tlet actionResult = a.perform()\n\t\t\t\tif (!actionResult.success) {\n\t\t\t\t\tthis.engine.messageLog.addMessage(actionResult.reason!, \"warning\")\n\t\t\t\t\tthis.engine.gameView.renderMessages(this.engine.messageLog)\n\t\t\t\t}\n\n\t\t\t\t//only monsters waste a turn on failed actions\n\t\t\t\tif (actionResult.success || !(this.ai instanceof PlayerAI) )\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\nexport class Item extends Entity {\n\tparent?: Inventory | GameMap\n\tconsumable?: Consumable\n\tequippable?: Equippable\n\tcombinable?: Combinable\n\n\tconstructor(name: string, char = \"?\", color = \"black\") {\n\t\tsuper(name, char, color, false, RenderOrder.Item)\n\t}\n\n\tuse(): void {\n\n\t}\n}\n\n\nexport class Site extends Entity {\n\tparent?: GameMap\n\tdarkColor: string\n\tmapName: string\n\n\tconstructor(name: string, char = \"*\", color = \"black\", darkColor = \"darkgrey\", mapName: string) {\n\t\tsuper(name, char, color, false, RenderOrder.Site)\n\t\tthis.darkColor = darkColor\n\t\tthis.mapName = mapName\n\t}\n}\n","import { Engine } from \"../game/engine\"\nimport { Actor, Item } from \"../game/entities\"\nimport { Dictionary } from \"../util\"\n\nexport enum EquipmentType {\n\tWeapon,\n\tArmor\n}\n\nexport class Equipment {\n\tengine: Engine\n\tparent: Actor\n\titems = new Dictionary<Item>()\n\n\tconstructor(engine: Engine, parent: Actor, weapon?: Item, armor?: Item) {\n\t\tthis.engine = engine\n\t\tthis.parent = parent\n\t\tif (weapon)\n\t\t\tthis.items[EquipmentType.Weapon] = weapon\n\t\tif (armor)\n\t\t\tthis.items[EquipmentType.Armor] = armor\n\t}\n\n\tget bonusDef(): number {\n\t\tlet bonus = 0\n\n\t\tfor (let k in this.items) {\n\t\t\tlet e = this.items[k]\n\t\t\tif (e.equippable)\n\t\t\t\tbonus += e.equippable.bonusDef\n\t\t}\n\n\t\treturn bonus\n\t}\n\n\n\tget bonusAtt(): number {\n\t\tlet bonus = 0\n\n\t\tfor (let k in this.items) {\n\t\t\tlet e = this.items[k]\n\t\t\tif (e.equippable)\n\t\t\t\tbonus += e.equippable.bonusAtt\n\t\t}\n\n\t\treturn bonus\n\t}\n\n\n\tisEquipped(item: Item): boolean {\n\t\tfor (let k in this.items) {\n\t\t\tlet e = this.items[k]\n\t\t\tif (e === item)\n\t\t\t\treturn true\n\t\t}\n\n\t\treturn false\n\t}\n\n\tunequipMessage(itemName: string): void {\n\t\tthis.parent.engine.messageLog.addMessage(`${this.parent} removes the ${itemName}`)\n\t}\n\n\tequipMessage(itemName: string): void {\n\t\tthis.parent.engine.messageLog.addMessage(`${this.parent} equips the ${itemName}`)\n\t}\n\n\n\tequip(newItem: Item, equipType: EquipmentType, addMessage: boolean): void {\n\t\tlet currentItem = this.items[equipType]\n\n\t\tif (currentItem)\n\t\t\tthis.unequip(equipType, addMessage)\n\n\t\tthis.items[equipType] = newItem\n\n\t\tif (addMessage)\n\t\t\tthis.equipMessage(newItem.name)\n\t}\n\n\tunequip(equipType: EquipmentType, addMessage: boolean): void {\n\t\tlet currentItem = this.items[equipType]\n\n\t\tif (currentItem && addMessage)\n\t\t\tthis.unequipMessage(currentItem.name)\n\t\t\n\t\tdelete this.items[equipType]\n\t}\n\n\ttoggle(item: Item, addMessage: boolean = true): void {\n\t\tif (!item.equippable) \n\t\t\treturn\n\n\t\tif (this.items[item.equippable.equipmentType] === item)\n\t\t\tthis.unequip(item.equippable.equipmentType, addMessage)\n\t\telse\n\t\t\tthis.equip(item, item.equippable.equipmentType, addMessage)\n\t}\n}\n\n","import { Engine } from \"./engine\"\nimport { Actor, Item } from \"./entities\"\nimport { Stats } from \"../components/stats\"\nimport { PlayerAI, EnemyAI } from \"../components/ai\"\nimport { Inventory } from \"../components/inventory\"\nimport { Equipment } from \"../components/equipment\"\nimport { HealingConsumable } from \"../components/consumable\"\nimport { EquipmentType } from \"../components/equipment\"\nimport { Equippable } from \"../components/equippable\"\nimport { Combinable } from \"../components/combinable\"\n\n\nexport enum ActorType {\n\tPlayer,\n\tOrc,\n\tTroll\n}\n\nexport enum ItemType {\n\tPotionHealth,\n\tPotionPoison,\n\tHerbHenbane,\n\tHerbNightshade,\n\tDagger,\n\tLeatherArmor\n}\n\n\nexport function makeActor(engine: Engine, actorType: ActorType): Actor {\n\tlet char: string\n\tlet color: string\n\tlet name: string\n\n\tlet hp: number\n\tlet baseDef: number\n\tlet baseAtt: number\n\n\tlet inventorySize: number\n\n\tswitch (actorType) {\n\t\tcase ActorType.Player:\n\t\t\tchar = \"@\"\n\t\t\tcolor = \"blue\"\n\t\t\tname = \"player\"\n\n\t\t\thp = 30\n\t\t\tbaseDef = 2\n\t\t\tbaseAtt = 4\n\n\t\t\tinventorySize = 26\n\n\t\t\tbreak\n\n\t\tcase ActorType.Orc:\n\t\t\tchar = \"o\"\n\t\t\tcolor = \"#408040\"\n\t\t\tname = \"orc\"\n\n\t\t\thp = 10\n\t\t\tbaseDef = 0\n\t\t\tbaseAtt = 3\n\n\t\t\tinventorySize = 0\n\n\t\t\tbreak\n\n\t\tcase ActorType.Troll:\n\t\t\tchar = \"T\"\n\t\t\tcolor = \"#008000\"\n\t\t\tname = \"troll\"\n\n\t\t\thp = 16\n\t\t\tbaseDef = 1\n\t\t\tbaseAtt = 4\n\n\t\t\tinventorySize = 0\n\n\t\t\tbreak\n\t}\n\n\tlet actor = new Actor(engine, name, char, color)\n\tactor.stats = new Stats(engine, actor, hp, baseDef, baseAtt)\n\n\tif (inventorySize) {\n\t\tactor.inventory = new Inventory(engine, actor, inventorySize)\n\t\tactor.equipment = new Equipment(engine, actor)\n\t}\n\t\n\tif (actorType === ActorType.Player)\n\t\tactor.ai = new PlayerAI(engine, actor)\n\telse\n\t\tactor.ai = new EnemyAI(engine, actor)\n\n\treturn actor\n}\n\n\nexport function makeItem(engine: Engine, itemType: ItemType): Item {\n\tlet char: string\n\tlet color: string\n\tlet name: string\n\n\tswitch (itemType) {\n\t\tcase ItemType.PotionHealth:\n\t\t\tchar = \"!\"\n\t\t\tcolor = \"#8000FF\"\n\t\t\tname = \"health potion\"\n\t\t\tbreak\n\t\tcase ItemType.PotionPoison:\n\t\t\tchar = \"!\"\n\t\t\tcolor = \"purple\"\n\t\t\tname = \"poison potion\"\n\t\t\tbreak\n\n\t\tcase ItemType.HerbHenbane:\n\t\t\tchar = \",\"\n\t\t\tcolor = \"#55FF55\"\n\t\t\tname = \"henbane\"\n\t\t\tbreak\n\t\tcase ItemType.HerbNightshade:\n\t\t\tchar = \",\"\n\t\t\tcolor = \"#55FF55\"\n\t\t\tname = \"nightshade\"\n\t\t\tbreak\n\n\t\tcase ItemType.Dagger:\n\t\t\tchar = \"/\"\n\t\t\tcolor = \"#00BFFF\"\n\t\t\tname = \"dagger\"\n\t\t\tbreak\n\t\tcase ItemType.LeatherArmor:\n\t\t\tchar = \"[\"\n\t\t\tcolor = \"#00BFFF\"\n\t\t\tname = \"leather armor\"\n\t\t\tbreak\n\t}\n\n\tlet item = new Item(name, char, color)\n\n\tswitch (itemType) {\n\t\tcase ItemType.PotionHealth:\n\t\t\titem.consumable = new HealingConsumable(engine, item, 10)\n\t\t\tbreak\n\t\tcase ItemType.PotionPoison:\n\t\t\t//item.consumable = new PoisonConsumable(engine, item, 10)\n\t\t\tbreak\n\n\t\tcase ItemType.HerbHenbane:\n\t\t\titem.combinable = new Combinable(engine, item)\n\t\t\tbreak\n\t\tcase ItemType.HerbNightshade:\n\t\t\titem.combinable = new Combinable(engine, item)\n\t\t\tbreak\n\n\t\tcase ItemType.Dagger:\n\t\t\titem.equippable = new Equippable(engine, item, EquipmentType.Weapon, 2, 0)\n\t\t\tbreak\n\t\tcase ItemType.LeatherArmor:\n\t\t\titem.equippable = new Equippable(engine, item, EquipmentType.Armor, 0, 1)\n\t\t\tbreak\n\t}\n\n\treturn item\n}\n","import { Engine } from \"../game/engine\"\nimport { Actor, RenderOrder } from \"../game/entities\"\nimport * as colors from \"../ui/colors\"\n\nexport class Stats {\n\tengine: Engine\n\tparent: Actor\n\n\tmaxHp: number\n\tprivate _hp: number\n\tbaseDef: number\n\tbaseAtt: number\n\n\tconstructor(engine: Engine, parent: Actor, hp: number, baseDef: number, baseAtt: number) {\n\t\tthis.engine = engine\n\t\tthis.parent = parent\n\n\t\tthis.maxHp = hp\n\t\tthis._hp = hp\n\t\tthis.baseDef = baseDef\n\t\tthis.baseAtt = baseAtt\n\t}\n\t\n\tget hp(): number {\n\t\treturn this._hp\n\t}\n\n\tset hp(newVal: number) {\n\t\tthis._hp = Math.max(0, Math.min(newVal, this.maxHp))\n\t\tif (this._hp == 0 && this.parent.ai)\n\t\t\tthis.die()\n\t}\n\n\tget def(): number {\n\t\treturn this.baseDef + this.bonusDef\n\t}\n\n\tget att(): number {\n\t\treturn this.baseAtt + this.bonusAtt\n\t}\n\n\tget bonusAtt(): number {\n\t\tif (this.parent.equipment)\n\t\t\treturn this.parent.equipment.bonusAtt\n\n\t\treturn 0\n\t}\n\n\tget bonusDef(): number {\n\t\tif (this.parent.equipment)\n\t\t\treturn this.parent.equipment.bonusDef\n\n\t\treturn 0\n\t}\n\n\theal(amount: number): number {\n\t\tif (this.hp == this.maxHp)\n\t\t\treturn 0\n\n\t\tlet newHpValue = this.hp + amount\n\t\tif (newHpValue > this.maxHp)\n\t\t\tnewHpValue = this.maxHp\n\n\t\tlet amountRecovered = newHpValue - this.hp\n\n\t\tthis.hp = newHpValue\n\n\t\treturn amountRecovered\n\t}\n\n\ttakeDamage(amount: number): void {\n\t\tthis.hp -= amount\n\t}\n\n\n\tdie(): void {\n\t\tlet deathMessage: string\n\t\tlet deathMessageClass: string\n\n\t\tif (this.engine.player == this.parent) {\n\t\t\tdeathMessage = \"\\u271F you died\"\n\t\t\tdeathMessageClass = \"player-death\"\n\t\t} else {\n\t\t\tdeathMessage = `\\u271F ${this.parent.name} is dead`\n\t\t\tdeathMessageClass = \"enemy-death\"\n\t\t}\n\n\t\tthis.parent.name = `remains of ${this.parent.name}`\n\t\tthis.parent.char = \"%\"\n\t\tthis.parent.color = colors.playerDeath\n\t\tthis.parent.isBlocking = false\n\t\tthis.parent.renderOrder = RenderOrder.Corpse\n\t\tthis.parent.stats = null\n\t\tthis.parent.ai = null\n\n\t\tthis.engine.messageLog.addMessage(deathMessage, deathMessageClass)\n\n\t\t//this.game.player.level.add_xp(this.parent.level.xp_given)\n\t}\n}\n","import { Engine } from \"../game/engine\"\nimport { Actor, Item } from \"../game/entities\"\nimport { removeFromList } from \"../util\"\n\n\nexport class Inventory {\n\tengine: Engine\n\tparent: Actor\n\tcapacity: number\n\titems = new Set<Item>()\n\n\tconstructor(engine: Engine, parent: Actor, capacity: number) {\n\t\tthis.engine = engine\n\t\tthis.parent = parent\n\t\tthis.capacity = capacity\n\t}\n\t\t\n\n\t/** Removes an item from the inventory and restores it to the game map, at the player's current location */\n\tdrop(item: Item): void {\n\t\tthis.items.delete(item)\n\t\tthis.engine.map.place(item, this.parent.x, this.parent.y)\n\t}\n}\n","import { Dictionary } from \"../util\"\nimport { ItemType } from \"../game/entity_factory\"\n\n\nlet herbData = new Dictionary<Dictionary<any>>()\nlet herbNames: string[] = []\n\nlet combinations = new Dictionary<Dictionary<any>>()\n\n\nfunction loadHerbs(): void {\n\t/*\n\tlet herbFile = util.get_data_dir() + \"/herbs.json\"\n\twith open(herb_file) as f:\n\t\tjson_data = json.load(f)\n\n\tfor hd in json_data:\n\t\therb_data[hd[\"englishName\"]] = hd\n\t\t*/\n}\n\nfunction loadCombinations(): void {\n\t/*\n\tcomb_file = util.get_data_dir() + \"/ingredient_combinations.txt\"\n\twith open(comb_file) as f:\n\t\tfor line in f.readlines():\n\t\t\tif line[0] == \"#\" or line.strip() == \"\":\n\t\t\t\t#skip comments and empty lines\n\t\t\t\tcontinue\n\n\t\t\ttokens = line.strip().split(\"|\")\n\t\t\tingr1 = tokens[0]\n\t\t\tingr2 = tokens[1]\n\t\t\tprod = tokens[2]\n\n\t\t\tif ingr1 not in combinations:\n\t\t\t\tcombinations[ingr1] = {}\n\t\t\tcombinations[ingr1][ingr2] = prod\n\n\t\t\tif ingr2 not in combinations:\n\t\t\t\tcombinations[ingr2] = {}\n\t\t\tcombinations[ingr2][ingr1] = prod\n*/\n}\n\n\nfunction genHerb(): string {\n/*\n\therb_names = list(herb_data.keys())\n\therb_freqs: List[float] = []\n\n\tfor h_name in herb_names:\n\t\therb_freqs.append(herb_data[h_name][\"frequency\"])\n\n\treturn random.choices(herb_names, herb_freqs)[0]\n*/\n\treturn null\n}\n\nexport function getCombination(ingr1: string, ingr2: string): ItemType {\n/*\n\tif ingr1 not in combinations:\n\t\treturn None\n\t\n\tif ingr2 not in combinations[ingr1]:\n\t\treturn None\n\t\n\treturn combinations[ingr1][ingr2]\n*/\n\tif ((ingr1 == \"henbane\" && ingr2 == \"nightshade\") ||\n\t\t(ingr1 == \"nightshade\" && ingr2 == \"henbane\") )\n\t\treturn ItemType.PotionPoison\n\telse\t\n\t\treturn null\n}\n\t\n\nloadHerbs()\nloadCombinations()\n","import { Engine } from \"./engine\"\nimport { GameMap } from \"./map\"\n\n\nexport class GameWorld {\n\tengine: Engine\n\tmapStack: { map: GameMap, pos?: [number, number]}[] =[]\n\n\tconstructor(engine: Engine) {\n\t\tthis.engine = engine\n\t}\n\n\tget currMap(): GameMap {\n\t\tif (!this.mapStack.length)\n\t\t\treturn null\n\n\t\treturn this.mapStack[this.mapStack.length-1].map\n\t}\n\n\tpushMap(newMap: GameMap): void {\n\t\tif (this.mapStack.length)\n\t\t\tthis.mapStack[this.mapStack.length-1][\"pos\"] = [this.engine.player.x, this.engine.player.y]\n\n\t\tthis.mapStack.push({ \"map\": newMap, \"pos\": null })\n\t\tthis.engine.map = newMap\n\t\tif (newMap.startingPos)\n\t\t\tnewMap.place(this.engine.player, newMap.startingPos[0], newMap.startingPos[1])\n\t\telse\n\t\t\tnewMap.placeRandom(this.engine.player)\n\t}\n\n\tpopMap(): void {\n\t\tthis.mapStack.pop()\n\t\tif (!this.currMap)\n\t\t\tthrow {\n\t\t\t\tmessage: \"Inconsistency in GameWorld\",\n\t\t\t\texpected: \"this.currMap is valid\",\n\t\t\t\tactual: \"this.currMap is null\",\n\t\t\t}\n\n\t\tlet currPos = this.mapStack[this.mapStack.length-1][\"pos\"]\n\t\tthis.currMap.place(this.engine.player, currPos[0], currPos[1])\n\t\tthis.engine.map = this.currMap\n\t}\n}\n","import * as colors from \"../ui/colors\"\n\nexport class Message {\n\tplainText: string\n\tcssClass: string\n\tcount: number\n\n\tconstructor(text: string, cssClass: string) {\n\t\tthis.plainText = text\n\t\tthis.cssClass = cssClass\n\t\tthis.count = 1\n\t}\n\n\t/** The full text of this message, including the count if necessary */\n\tget fullText(): string {\n\t\tif (this.count > 1)\n\t\t\treturn `${this.plainText} (x${this.count})`\n\n\t\treturn this.plainText\n\t}\n}\n\n\nexport class MessageLog {\n\tmessages: Message[] = []\n\n\t/** If `stack` is true then the message can stack with a previous message of the same text. */\n\taddMessage(text: string, cssClass?: string, stack=true): void {\n\t\tif (stack && this.messages.length && text == this.messages[this.messages.length-1].plainText)\n\t\t\tthis.messages[this.messages.length-1].count += 1\n\t\telse\n\t\t\tthis.messages.push(new Message(text, cssClass))\n\t}\n}\n","\nimport { Action, BumpAction, WaitAction, PickupAction, DropAction, \n\tUseAction, EquipAction, CombineAction } from \"../game/actions\"\nimport { Engine } from \"../game/engine\"\nimport { Dictionary } from \"../util\"\nimport { Item } from \"../game/entities\"\n\n\nexport abstract class InputHandler {\n\tengine: Engine\n\teventListener: { (e: KeyboardEvent): void }\n\n\tconstructor(engine: Engine) {\n\t\tthis.engine = engine\n\t\tthis.eventListener = this.handleEvent.bind(this)\n\t}\n\n\tabstract handleEvent(e: KeyboardEvent): void \n}\n\n\nexport class GameInputHandler extends InputHandler {\n\tcompositeCommand?: string\n\ttileSelection?: [number, number]\n\n\n\thandleEvent(e: KeyboardEvent): void {\n\t\tlet engine = this.engine\n\n\t\tlet newAction = null\n\t\tlet keyCode = e.code\n\n\t\tif (this.compositeCommand) {\n\t\t\tif (MOVE_KEYS.has(keyCode)) {\n\t\t\t\tlet moveMulti = 1\n\n\t\t\t\tif (e.getModifierState(\"Shift\"))\n\t\t\t\t\tmoveMulti *= 5\n\t\t\t\tif (e.getModifierState(\"Control\"))\n\t\t\t\t\tmoveMulti *= 10\n\t\t\t\tif (e.getModifierState(\"Alt\"))\n\t\t\t\t\tmoveMulti *= 20\n\n\t\t\t\tlet move = MOVE_KEYS.get(keyCode)\n\n\t\t\t\tlet [x, y] = this.tileSelection\n\t\t\t\tlet [dx, dy] = move\n\t\t\t\tx += dx * moveMulti\n\t\t\t\ty += dy * moveMulti\n\t\t\t\tx = Math.max(0, Math.min(x, this.engine.map.width - 1))\n\t\t\t\ty = Math.max(0, Math.min(y, this.engine.map.height - 1))\n\t\t\t\tthis.tileSelection = [x, y]\n\t\t\t\tthis.engine.gameView.renderMap(this.engine.map, this.tileSelection)\n\n\t\t\t} else if (keyCode in CONFIRM_KEYS) {\n\t\t\t\tif (this.engine.map.visible[this.tileSelection[0]][this.tileSelection[1]])\n\t\t\t\t\tthis.engine.gameView.renderMapInfo(\n\t\t\t\t\t\tthis.engine.map.getEntitiesAt(this.tileSelection[0], this.tileSelection[1]))\n\n\t\t\t\tthis.compositeCommand = null\n\t\t\t\tthis.tileSelection = null\n\t\t\t\tthis.engine.gameView.renderMap(this.engine.map)\n\t\t\t}\n\n\t\t} else {\n\t\t\tif (MOVE_KEYS.has(keyCode)) {\n\t\t\t\tlet move = MOVE_KEYS.get(keyCode)\n\n\t\t\t\tnewAction = new BumpAction(engine, engine.player, move[0], move[1])\n\n\t\t\t} else if (keyCode in WAIT_KEYS) {\n\t\t\t\tnewAction = new WaitAction(engine, engine.player)\n\t\t\t\n\t\t\t} else if (keyCode == \"KeyG\") {\n\t\t\t\tnewAction = new PickupAction(engine, engine.player)\n\n\t\t\t} else if (keyCode == \"KeyL\") {\n\t\t\t\tthis.compositeCommand = keyCode\n\t\t\t\tthis.tileSelection = [this.engine.player.x, this.engine.player.y] \n\t\t\t\tthis.engine.gameView.renderMap(this.engine.map, this.tileSelection)\n\n\t\t\t} else if (keyCode == \"KeyI\") {\n\t\t\t\tlet itemMap = engine.inventoryView.render(engine.player.inventory, engine.player.equipment)\n\t\t\t\tlet inventoryInputHandler = new InventoryInputHandler(engine, itemMap)\n\t\t\t\tengine.setInputHandler(inventoryInputHandler)\n\n\t\t\t\tdocument.getElementById(\"dialogContainer\").style.display = \"block\";\n\t\t\t\tdocument.getElementById(\"inventoryDialog\").style.display = \"block\";\n\n\t/*\t\t} elseif (keyCode == \"KeyD\") {\n\t\t\t\treturn InventoryDropHandler(self.engine)\n\t\t\t}\n\t*/\n\t\t\t}\n\t\t}\n\n\t\tif (newAction)\n\t\t\tengine.playerActionQueue.enqueue(newAction)\n\t}\n}\n\nexport class InventoryInputHandler extends InputHandler {\n\titemMap: Dictionary<Item>\n\tselectedItemKey?: string\n\tcompositeCommand?: string\n\n\tget selectedItem(): Item {\n\t\tif (this.selectedItemKey)\n\t\t\treturn this.itemMap[this.selectedItemKey]\n\t\telse\n\t\t\treturn null\n\t}\n\n\tconstructor(engine: Engine, itemMap: Dictionary<Item>) {\n\t\tsuper(engine)\n\n\t\tthis.itemMap = itemMap\n\t}\n\t\n\thandleEvent(e: KeyboardEvent): void {\n\t\tlet engine = this.engine\n\n\t\tlet newAction\n\t\tlet keyCode = e.code\n\n\t\tif (keyCode == \"Escape\") {\n\t\t\tthis.selectedItemKey = null\n\t\t\tthis.compositeCommand = null\n\t\t\tthis.backToGame()\n\n\t\t} else if (!this.selectedItemKey) {\n\t\t\t//console.log(\"setting selected key:\" + e.key)\n\t\t\tif (e.key in this.itemMap) {\n\t\t\t\tthis.selectedItemKey = e.key\n\t\t\t\tthis.setSelectedRow()\n\t\t\t}\n\t\t} else if (this.compositeCommand) {\n\t\t\tif (e.key in this.itemMap) {\n\t\t\t\tlet secondItem = this.itemMap[e.key]\n\t\t\t\t\n\t\t\t\tif (this.compositeCommand == \"KeyC\") {\n\t\t\t\t\tnewAction = new CombineAction(engine, engine.player, \n\t\t\t\t\t\tthis.selectedItem, secondItem)\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\t\t\tif (keyCode == \"KeyD\") {\n\t\t\t\tnewAction = new DropAction(engine, engine.player, this.selectedItem)\n\t\t\t} else if (keyCode == \"KeyU\") {\n\t\t\t\tnewAction = new UseAction(engine, engine.player, this.selectedItem)\n\t\t\t} else if (keyCode == \"KeyE\" || keyCode == \"KeyT\") {\n\t\t\t\tnewAction = new EquipAction(engine, engine.player, this.selectedItem)\n\t\t\t} else if (keyCode == \"KeyC\") {\n\t\t\t\tthis.compositeCommand = keyCode\n\t\t\t\tthis.setSelectedRow(null)\n\t\t\t}\n\t\t}\n\n\t\tif (newAction) {\n\t\t\t//reset status\n\t\t\tthis.selectedItemKey = null\n\t\t\tthis.compositeCommand = null\n\t\t\tthis.setSelectedRow()\n\n\t\t\tengine.playerActionQueue.enqueue(newAction)\n\t\t\tthis.backToGame()\n\t\t}\n\n\t}\n\n\tsetSelectedRow(key=this.selectedItemKey): void {\n\t\tconsole.log(\"setSelectedRow\")\n\n\t\tlet rows = document.querySelectorAll(\".inventory-row\")\n\t\tfor (let row of rows) {\n\t\t\tconsole.log(row.querySelector(\".inventory-item-letter\").textContent)\n\t\t\tconsole.log(this.selectedItemKey)\n\n\t\t\tif (this.selectedItem && \n\t\t\t\trow.querySelector(\".inventory-item-letter\").textContent == \"(\" + key + \")\") {\n\t\t\t\trow.classList.add(\"selected\")\n\n\t\t\t} else {\n\t\t\t\trow.classList.remove(\"selected\")\n\t\t\t\trow.querySelector(\".inventory-item-command\").textContent = \"\"\n\t\t\t}\n\t\t}\n\t}\n\n\tbackToGame(): void {\n\t\tlet engine = this.engine\n\t\t\n\t\tengine.setInputHandler(new GameInputHandler(engine))\n\n\t\tengine.gameView.renderMap(engine.map)\n\t\tengine.gameView.renderStats(engine.player.stats)\n\t\tengine.gameView.renderMessages(engine.messageLog)\n\t\tdocument.getElementById(\"dialogContainer\").style.display = \"none\";\n\t\tdocument.getElementById(\"inventoryDialog\").style.display = \"none\";\n\t}\n}\n\n\nlet MOVE_KEYS = new Map<string, [number, number]>();\n// arrow keys\nMOVE_KEYS.set(\"ArrowUp\", [0, -1])\nMOVE_KEYS.set(\"ArrowDown\", [0, 1])\nMOVE_KEYS.set(\"ArrowLeft\", [-1, 0])\nMOVE_KEYS.set(\"ArrowRight\", [1, 0])\nMOVE_KEYS.set(\"Home\", [-1, -1])\nMOVE_KEYS.set(\"End\", [-1, 1])\nMOVE_KEYS.set(\"PageUp\", [1, -1])\nMOVE_KEYS.set(\"PageDown\", [1, 1])\n\n// numpad keys\nMOVE_KEYS.set(\"Numpad1\", [-1, 1])\nMOVE_KEYS.set(\"Numpad2\", [0, 1])\nMOVE_KEYS.set(\"Numpad3\", [1, 1])\nMOVE_KEYS.set(\"Numpad4\", [-1, 0])\nMOVE_KEYS.set(\"Numpad6\", [1, 0])\nMOVE_KEYS.set(\"Numpad7\", [-1, -1])\nMOVE_KEYS.set(\"Numpad8\", [0, -1])\nMOVE_KEYS.set(\"Numpad9\", [1, -1])\n\n// vi keys\n//MOVE_KEYS.set(\"KeyH\", [-1, 0])\n//MOVE_KEYS.set(\"KeyJ\", [0, 1])\n//MOVE_KEYS.set(\"KeyK\", [0, -1])\n//MOVE_KEYS.set(\"KeyL\", [1, 0])\n//MOVE_KEYS.set(\"KeyY\", [-1, -1])\n//MOVE_KEYS.set(\"KeyU\", [1, -1])\n//MOVE_KEYS.set(\"KeyB\", [-1, 1])\n//MOVE_KEYS.set(\"KeyN\", [1, 1])\n\n\nenum WAIT_KEYS {\n\t\"Period\",\n\t\"Numpad5\",\n\t\"Delete\",\n}\n\nenum CONFIRM_KEYS {\n\t\"Enter\",\n\t\"NumpadEnter\",\n}\n","import * as ROT from \"rot-js\"\n\nimport * as colors from \"./colors\"\nimport { Entity, Actor, Item, Site } from \"../game/entities\"\nimport { GameMap } from \"../game/map\"\nimport { MessageLog } from \"../game/messageLog\"\nimport { UnexploredTile } from \"../game/terrain\"\nimport { Inventory } from \"../components/inventory\"\nimport { Equipment } from \"../components/equipment\"\nimport { Stats } from \"../components/stats\"\nimport { Dictionary } from \"../util\"\nimport { maxMapWidth, maxMapHeight } from \"../layout\"\n\n\nlet display: ROT.Display;\n\n\nexport class GameView {\n\n\tconstructor() {\n\t\tif (!display)\n\t\t\tdisplay = initDisplay()\n\t}\n\n\trenderMap(map: GameMap, highlightedTile?: [number, number]): void {\n\t\t//console.log(\"rendering map\")\n\t\tdocument.getElementById(\"mapLabel\").textContent = map.label\n\n\t\tlet entityTiles = entities2tiles(map.width, map.height, map.entities)\n\t\tdisplay.clear()\n\t\t\n\t\tfor (let x = 0; x < map.width; x++) {\n\t\t\tfor (let y = 0; y < map.height; y++) {\n\t\t\t\tlet currTile\n\n\t\t\t\tif (map.visible[x][y])\n\t\t\t\t\tcurrTile = map.tiles[x][y].lightTile\n\t\t\t\telse if (map.explored[x][y])\n\t\t\t\t\tcurrTile = map.tiles[x][y].darkTile\n\t\t\t\telse\n\t\t\t\t\tcurrTile = UnexploredTile\n\n\t\t\t\tlet char = currTile.char\n\t\t\t\tlet fgColor = currTile.fgColor\n\t\t\t\tlet bgColor = currTile.bgColor\n\t\t\t\tif (highlightedTile && highlightedTile[0] == x && highlightedTile[1] == y)\n\t\t\t\t\tbgColor = colors.highlightTile\n\n\t\t\t\tlet e = entityTiles[x][y]\n\t\t\t\tif (map.visible[x][y] && e) {\n\t\t\t\t\tchar = e.char\n\t\t\t\t\tfgColor = e.color\n\t\t\t\t} else if (map.explored[x][y]) {\n\t\t\t\t\tlet site = map.getSiteAt(x, y)\n\t\t\t\t\tif (site) {\n\t\t\t\t\t\tchar = site.char\n\t\t\t\t\t\tfgColor = site.darkColor\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdisplay.draw(x + map.xOffset, y + map.yOffset, char, fgColor, bgColor);\n\t\t\t}\n\t\t}\n\t}\n\n\trenderMapInfo(entities?: Entity[]): void {\n\t\tlet actor: Actor\n\t\tlet site: Site\n\t\tlet items: Item[] = []\n\t\tlet newDiv\n\n\t\tlet container = document.getElementById(\"mapInfo\")\n\t\tcontainer.textContent = \"\"\n\n\t\tif (!entities)\n\t\t\treturn\n\n\t\tfor (let e of entities) {\n\t\t\tif (e instanceof Actor) {\n\t\t\t\tactor = e\n\t\t\t} else if (e instanceof Site) {\n\t\t\t\tsite = e\n\t\t\t} else if (e instanceof Item) {\n\t\t\t\titems.push(e)\n\t\t\t}\n\t\t}\n\n\t\tif (site) {\n\t\t\tnewDiv = document.createElement(\"div\")\n\t\t\tnewDiv.innerHTML = `[${site.name}]`\n\t\t\tcontainer.appendChild(newDiv)\n\t\t}\n\n\t\tif (actor) {\n\t\t\tnewDiv = document.createElement(\"div\")\n\t\t\tnewDiv.innerHTML = `${actor.name}`\n\t\t\tcontainer.appendChild(newDiv)\n\t\t}\n\n\t\tlet itemText = \"\"\n\t\tlet firstItem = true\n\t\tfor (let item of items) {\n\t\t\tif (!firstItem)\n\t\t\t\titemText += `, `\n\t\t\titemText += `${item.name}`\n\t\t\tfirstItem = false\n\t\t}\n\n\t\tnewDiv = document.createElement(\"div\")\n\t\tnewDiv.innerHTML = itemText\n\t\tcontainer.appendChild(newDiv)\n\t}\n\n\trenderMessages(messageLog: MessageLog): void {\n\t\t//console.log(\"rendering messages\")\n\t\tlet container = document.getElementById(\"gameMessages\")\n\n\t\t//FIXME: clears all old messages everytime\n\t\tcontainer.textContent = ''\n\n\t\tfor (let m of messageLog.messages.slice().reverse()) {\n\t\t\tlet newDiv = document.createElement(\"div\")\n\t\t\tif (m.cssClass)\n\t\t\t\tnewDiv.classList.add(m.cssClass);\n\t\t\tnewDiv.appendChild(document.createTextNode(m.fullText))\n\t\t\tcontainer.appendChild(newDiv)\n\t\t}\n\t}\n\n\trenderStats(stats: Stats): void {\n\t\t//console.log(\"rendering stats\")\n\n\t\tlet elem = document.getElementById(\"statHp\")\n\t\telem.textContent = `hp: ${stats.hp} / ${stats.maxHp}`\n\n\t\t//TODO: other stats\n\t}\n\n}\n\n\nfunction initDisplay(): ROT.Display {\n\tdisplay = new ROT.Display({\n\t\twidth: maxMapWidth,\n\t\theight: maxMapHeight,\n\t\tfontFamily: \"menlo\",\n\t\tfontSize: 20,\n\t\tforceSquareRatio: true,\n\t\tfg: colors.defaultLight,\n\t\tbg: \"black\",\n\t})\n\n\tdocument.getElementById(\"gameMap\").appendChild(display.getContainer())\n\n\treturn display\n}\n\n\nfunction entities2tiles(w: number, h: number, entities: Set<Entity>): Entity[][] {\n\tlet res: Entity[][] = []\n\n\tfor (let x = 0; x < w; x++) {\n\t\tres[x] = []\n\t\tfor (let y = 0; y < h; y++) {\n\t\t\tres.push(null)\n\t\t}\n\t}\n\n\tentities.forEach((e, i) => {\n\t\tif ((!res[e.x][e.y]) || res[e.x][e.y].renderOrder < e.renderOrder)\n\t\t\tres[e.x][e.y] = e\n\t})\n\n\treturn res\n}\n\n\nexport class InventoryView {\n\trender(inventory: Inventory, equipment: Equipment): Dictionary<Item> {\n\t\tlet itemMap: Dictionary<Item> = {}\n\n\t\tlet container = document.getElementById(\"inventoryContent\")\n\n\t\tif (inventory.items.size == 0) {\n\t\t\tcontainer.innerHTML = \"&lt; empty &gt;\"\n\t\t\n\t\t} else {\n\t\t\tcontainer.textContent = \"\"\n\n\t\t\tlet currLetter = \"a\"\n\t\t\tlet currAscii = currLetter.charCodeAt(0)\n\t\t\tfor (let item of inventory.items) {\n\t\t\t\titemMap[currLetter] = item\n\t\t\t\tlet nameStr = item.name\n\t\t\t\tlet commandStr\n\n\t\t\t\tif (item.equippable) {\n\t\t\t\t\tif (equipment && equipment.isEquipped(item)) {\n\t\t\t\t\t\tcommandStr = \"(d)rop / (t)akeoff\"\n\t\t\t\t\t\tnameStr += \" [equipped]\"\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcommandStr = \"(d)rop / (e)quip\"\n\t\t\t\t\t}\n\t\t\t\t} else if (item.combinable) {\n\t\t\t\t\tcommandStr = \"(d)rop / (c)ombine with...\"\n\t\t\t\t} else if (item.consumable) {\n\t\t\t\t\tcommandStr = \"(d)rop / (u)se\"\n\t\t\t\t} else {\n\t\t\t\t\tcommandStr = \"(d)rop\"\n\t\t\t\t}\n\n\t\t\t\tlet newDiv = document.createElement(\"div\")\n\t\t\t\tnewDiv.innerHTML = `<div class=\"inventory-row\">` +\n\t\t\t\t\t\t`<div class=\"inventory-item-letter\">(${currLetter})</div>` +\n\t\t\t\t\t\t`<div class=\"inventory-item-name\">${nameStr}</div>` +\n\t\t\t\t\t\t`<div class=\"inventory-item-command\">${commandStr}</div>` +\n\t\t\t\t\t`</div>`\n\t\t\t\tcontainer.appendChild(newDiv)\n\t\t\t\t\t\n\t\t\t\tcurrLetter = String.fromCharCode(currAscii + 1);\n\t\t\t\tcurrAscii = currLetter.charCodeAt(0)\n\t\t\t}\n\t\t}\n\n\t\treturn itemMap\n\t}\n}\n","import * as ROT from \"rot-js\"\n\nimport { lightRadius, maxMapWidth, maxMapHeight } from \"../layout\"\nimport { Actor } from \"./entities\"\nimport { Action } from \"./actions\"\nimport { makeActor, ActorType, makeItem, ItemType, } from \"./entity_factory\"\nimport { GameMap } from \"./map\"\nimport { GameWorld } from \"./world\"\nimport { MessageLog } from \"./messageLog\"\nimport { BlockingQueue } from \"../util\"\nimport { InputHandler, GameInputHandler } from \"../ui/input_handlers\"\nimport { GameView, InventoryView } from \"../ui/views\"\nimport { gameMaps } from \"../loaders/map_loader\"\n\n\nexport class Engine {\n\tmap: GameMap\n\tworld: GameWorld\n\n\tactors: Actor[] = []\n\tplayer: Actor\n\tmessageLog = new MessageLog()\n\tscheduler = new ROT.Scheduler.Simple()\n\tplayerActionQueue = new BlockingQueue<Action>()\n\tfov = new ROT.FOV.PreciseShadowcasting(this.transparency.bind(this))\n\tgameView = new GameView()\n\tinventoryView = new InventoryView()\n\tcurrEventListener?: { (e: KeyboardEvent): void }\n\n\n\tconstructor() {\n\t\tconsole.log(\"Starting engine\")\n\t\tthis.setInputHandler(new GameInputHandler(this))\n\t\tthis.setMouseHandler()\n\n\t\tthis.world = new GameWorld(this)\n\n\t\tthis.player = makeActor(this, ActorType.Player)\n\t\tthis.addActor(this.player)\n\t\t\n\t\tthis.world.pushMap(gameMaps[\"test_map_world\"])\n\n\t\t/*\n\t\t//DEBUG: add a consumable item\n\t\tlet potion = makeItem(this, ItemType.PotionHealth)\n\t\tthis.map.place(potion, 16, 8)\n\t\t//\n\n\t\t//DEBUG: add equipment items\n\t\tlet dagger = makeItem(this, ItemType.Dagger)\n\t\tthis.map.place(dagger, 19, 8)\n\n\t\tlet armor = makeItem(this, ItemType.LeatherArmor)\n\t\tthis.map.place(armor, 19, 10)\n\t\t//\n\n\t\t//DEBUG: add ingredients\n\t\tlet herb1 = makeItem(this, ItemType.HerbHenbane)\n\t\tthis.map.place(herb1, 17, 8)\n\n\t\tlet herb2 = makeItem(this, ItemType.HerbNightshade)\n\t\tthis.map.place(herb2, 17, 10)\n\t\t//\n\n\t\t//DEBUG: add monsters\n\t\tlet orc = makeActor(this, ActorType.Orc)\n\t\tthis.addActor(orc)\n\t\tthis.map.place(orc, 22, 12)\n\n\t\tlet troll = makeActor(this, ActorType.Troll)\n\t\tthis.addActor(troll)\n\t\tthis.map.place(troll, 32, 12)\n\t\t//\n*/\n\n\t\tthis.fov.compute(this.player.x, this.player.y, lightRadius, this.setFov.bind(this))\n\n\t\tthis.gameView.renderMap(this.map)\n\t\tthis.gameView.renderMapInfo()\n\t\tthis.gameView.renderStats(this.player.stats)\n\n\t\tthis.messageLog.addMessage(\"Welcome, adventurer!\")\n\t\t//this.messageLog.addMessage(\"This is a very very long message to test message view does not get too wide\")\n\t\tthis.gameView.renderMessages(this.messageLog)\n\t}\n\n\n\taddActor(actor: Actor): void {\n\t\tthis.actors.push(actor)\n\t\tthis.scheduler.add(actor, true)\n\t}\n\n\tasync processTurn(): Promise<void> {\n\t\t//console.log(\"processTurn\")\n\n\t\tlet currActor = <Actor>this.scheduler.next()\n\t\tlet actionResult = await currActor.act();\n\n\t\tthis.map.resetVisible()\n\t\tthis.fov.compute(this.player.x, this.player.y, lightRadius, this.setFov.bind(this))\n\n\t\tthis.gameView.renderMap(this.map)\n\t\tthis.gameView.renderMapInfo()\n\t\tthis.gameView.renderStats(this.player.stats)\n\t\tthis.gameView.renderMessages(this.messageLog)\n\t}\n\n\n\tsetInputHandler(newInputHandler: InputHandler): void {\n\t\tif (this.currEventListener)\n\t\t\tdocument.body.removeEventListener(\"keydown\", this.currEventListener)\n\n\t\tthis.currEventListener = newInputHandler.eventListener\n\t\tdocument.body.addEventListener(\"keydown\", this.currEventListener)\n\t}\n\n\tsetMouseHandler(): void {\n\t\tdocument.body.addEventListener(\"mousemove\", this.mouseEventListener.bind(this))\n\t}\n\n\tmouseEventListener(e: MouseEvent): void {\n\t\t//console.log(\"mouseEventListener\")\n\t\t//console.log(`client coords: ${e.clientX}, ${e.clientY}`)\n\t\tlet mapElem = document.getElementById(\"gameMap\")\n\t\tlet bRect = mapElem.getBoundingClientRect()\n\t\t//console.log(`bRect: ${bRect}`)\n\n\t\tlet xPixels = e.clientX - bRect.left\n\t\tlet yPixels = e.clientY - bRect.top\n\t\t//console.log(`net coords: ${x}, ${y}`)\n\n\t\tconst tileSize = 20\n\t\tlet xTiles = Math.floor(xPixels / tileSize) - this.map.xOffset\n\t\tlet yTiles = Math.floor(yPixels / tileSize) - this.map.yOffset\n\t\tif ((xTiles >= 0 && xTiles < maxMapWidth && yTiles >= 0 && yTiles < maxMapHeight) &&\n\t\t\t(this.map.visible[xTiles][yTiles]) ) {\n\t\t\tthis.gameView.renderMapInfo(this.map.getEntitiesAt(xTiles, yTiles))\n\t\t}\n\t}\n\n\n\ttransparency(x: number, y: number) {\n\t\tif (x < 0 || x >= this.map.width || y < 0 || y >= this.map.height)\n\t\t\treturn false\n\t\telse\n\t\t\treturn this.map.tiles[x][y].transparent\n\t}\n\n\tsetFov(x: number, y: number, r: number, visibility: number) {\n\t\tif (x < 0 || x >= this.map.width || y < 0 || y >= this.map.height)\n\t\t\treturn\n\t\t\n\t\tthis.map.visible[x][y] = !!visibility\n\t\tif (this.map.visible[x][y])\n\t\t\tthis.map.explored[x][y] = true\n\t}\n}\n","\nimport { Engine } from \"./game/engine\"\nimport { loadAllData } from \"./loaders/map_loader\"\n\n\n\nasync function gameLoop() {\n\tawait loadAllData()\n\tlet engine = new Engine()\n\t\n\twhile (true) {\n\t\tawait engine.processTurn();\n\t}\n}\n\n\nfunction isMobileBrowser(): boolean {\n\treturn ('ontouchstart' in document.documentElement)\n}\n\nconst minXRes = 1600\nconst minYRes = 800\n\nfunction isResolutionKO(): boolean {\n\tlet xRes = window.screen.width * window.devicePixelRatio\n\tlet yRes = window.screen.height * window.devicePixelRatio\n\n\treturn (xRes < minXRes || yRes < minYRes) \n}\n\nif (isMobileBrowser()) {\n\talert(\"This game can be played only on desktop computers\")\n} else if (isResolutionKO()) {\n\talert(`This game can be played only on resolution ${minXRes}x${minYRes} or higher`)\n} else {\n\t//ok, let's play\n\twindow.setTimeout(gameLoop, 500)\n}\n"],"sourceRoot":""}